Terminals unused in grammar

    "backslash"
    "escaped space"
    "escaped horizontal tab"
    "escaped form feed"
    "escaped carriage return"
    "escaped vertical tab"
    ")"
    tLAST_TOKEN


Grammar

    0 $accept: program "end-of-input"

    1 $@1: ε

    2 program: $@1 top_compstmt

    3 top_compstmt: top_stmts opt_terms

    4 top_stmts: none
    5          | top_stmt
    6          | top_stmts terms top_stmt

    7 top_stmt: stmt
    8         | "`BEGIN'" begin_block

    9 begin_block: '{' top_compstmt '}'

   10 $@2: ε

   11 bodystmt: compstmt opt_rescue k_else $@2 compstmt opt_ensure
   12         | compstmt opt_rescue opt_ensure

   13 compstmt: stmts opt_terms

   14 stmts: none
   15      | stmt_or_begin
   16      | stmts terms stmt_or_begin

   17 stmt_or_begin: stmt

   18 $@3: ε

   19 stmt_or_begin: "`BEGIN'" $@3 begin_block

   20 $@4: ε

   21 stmt: "`alias'" fitem $@4 fitem
   22     | "`alias'" "global variable" "global variable"
   23     | "`alias'" "global variable" "back reference"
   24     | "`alias'" "global variable" "numbered reference"
   25     | "`undef'" undef_list
   26     | stmt "`if' modifier" expr_value
   27     | stmt "`unless' modifier" expr_value
   28     | stmt "`while' modifier" expr_value
   29     | stmt "`until' modifier" expr_value
   30     | stmt "`rescue' modifier" stmt
   31     | "`END'" '{' compstmt '}'
   32     | command_asgn
   33     | mlhs '=' lex_ctxt command_call
   34     | lhs '=' lex_ctxt mrhs
   35     | mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | mlhs '=' lex_ctxt mrhs_arg
   37     | expr
   38     | error

   39 command_asgn: lhs '=' lex_ctxt command_rhs
   40             | var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | defn_head f_opt_paren_args '=' command
   47             | defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | defs_head f_opt_paren_args '=' command
   49             | defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | backref "operator-assignment" lex_ctxt command_rhs

   51 command_rhs: command_call
   52            | command_call "`rescue' modifier" stmt
   53            | command_asgn

   54 expr: command_call
   55     | expr "`and'" expr
   56     | expr "`or'" expr
   57     | "`not'" opt_nl expr
   58     | '!' command_call

   59 @5: ε

   60 @6: ε

   61 expr: arg "=>" @5 @6 p_top_expr_body

   62 @7: ε

   63 @8: ε

   64 expr: arg "`in'" @7 @8 p_top_expr_body
   65     | arg

   66 def_name: fname

   67 defn_head: k_def def_name

   68 $@9: ε

   69 defs_head: k_def singleton dot_or_colon $@9 def_name

   70 expr_value: expr
   71           | error

   72 $@10: ε

   73 $@11: ε

   74 expr_value_do: $@10 expr_value do $@11

   75 command_call: command
   76             | block_command

   77 block_command: block_call
   78              | block_call call_op2 operation2 command_args

   79 cmd_brace_block: "{ arg" brace_body '}'

   80 fcall: operation

   81 command: fcall command_args
   82        | fcall command_args cmd_brace_block
   83        | primary_value call_op operation2 command_args
   84        | primary_value call_op operation2 command_args cmd_brace_block
   85        | primary_value "::" operation2 command_args
   86        | primary_value "::" operation2 command_args cmd_brace_block
   87        | "`super'" command_args
   88        | "`yield'" command_args
   89        | k_return call_args
   90        | "`break'" call_args
   91        | "`next'" call_args

   92 mlhs: mlhs_basic
   93     | "(" mlhs_inner rparen

   94 mlhs_inner: mlhs_basic
   95           | "(" mlhs_inner rparen

   96 mlhs_basic: mlhs_head
   97           | mlhs_head mlhs_item
   98           | mlhs_head "*" mlhs_node
   99           | mlhs_head "*" mlhs_node ',' mlhs_post
  100           | mlhs_head "*"
  101           | mlhs_head "*" ',' mlhs_post
  102           | "*" mlhs_node
  103           | "*" mlhs_node ',' mlhs_post
  104           | "*"
  105           | "*" ',' mlhs_post

  106 mlhs_item: mlhs_node
  107          | "(" mlhs_inner rparen

  108 mlhs_head: mlhs_item ','
  109          | mlhs_head mlhs_item ','

  110 mlhs_post: mlhs_item
  111          | mlhs_post ',' mlhs_item

  112 mlhs_node: user_variable
  113          | keyword_variable
  114          | primary_value '[' opt_call_args rbracket
  115          | primary_value call_op "local variable or method"
  116          | primary_value "::" "local variable or method"
  117          | primary_value call_op "constant"
  118          | primary_value "::" "constant"
  119          | ":: at EXPR_BEG" "constant"
  120          | backref

  121 lhs: user_variable
  122    | keyword_variable
  123    | primary_value '[' opt_call_args rbracket
  124    | primary_value call_op "local variable or method"
  125    | primary_value "::" "local variable or method"
  126    | primary_value call_op "constant"
  127    | primary_value "::" "constant"
  128    | ":: at EXPR_BEG" "constant"
  129    | backref

  130 cname: "local variable or method"
  131      | "constant"

  132 cpath: ":: at EXPR_BEG" cname
  133      | cname
  134      | primary_value "::" cname

  135 fname: "local variable or method"
  136      | "constant"
  137      | "method"
  138      | op
  139      | reswords

  140 fitem: fname
  141      | symbol

  142 undef_list: fitem

  143 $@12: ε

  144 undef_list: undef_list ',' $@12 fitem

  145 op: '|'
  146   | '^'
  147   | '&'
  148   | "<=>"
  149   | "=="
  150   | "==="
  151   | "=~"
  152   | "!~"
  153   | '>'
  154   | ">="
  155   | '<'
  156   | "<="
  157   | "!="
  158   | "<<"
  159   | ">>"
  160   | '+'
  161   | '-'
  162   | '*'
  163   | "*"
  164   | '/'
  165   | '%'
  166   | "**"
  167   | "**arg"
  168   | '!'
  169   | '~'
  170   | "unary+"
  171   | "unary-"
  172   | "[]"
  173   | "[]="
  174   | '`'

  175 reswords: "`__LINE__'"
  176         | "`__FILE__'"
  177         | "`__ENCODING__'"
  178         | "`BEGIN'"
  179         | "`END'"
  180         | "`alias'"
  181         | "`and'"
  182         | "`begin'"
  183         | "`break'"
  184         | "`case'"
  185         | "`class'"
  186         | "`def'"
  187         | "`defined?'"
  188         | "`do'"
  189         | "`else'"
  190         | "`elsif'"
  191         | "`end'"
  192         | "`ensure'"
  193         | "`false'"
  194         | "`for'"
  195         | "`in'"
  196         | "`module'"
  197         | "`next'"
  198         | "`nil'"
  199         | "`not'"
  200         | "`or'"
  201         | "`redo'"
  202         | "`rescue'"
  203         | "`retry'"
  204         | "`return'"
  205         | "`self'"
  206         | "`super'"
  207         | "`then'"
  208         | "`true'"
  209         | "`undef'"
  210         | "`when'"
  211         | "`yield'"
  212         | "`if'"
  213         | "`unless'"
  214         | "`while'"
  215         | "`until'"

  216 arg: lhs '=' lex_ctxt arg_rhs
  217    | var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | backref "operator-assignment" lex_ctxt arg_rhs
  225    | arg ".." arg
  226    | arg "..." arg
  227    | arg ".."
  228    | arg "..."
  229    | "(.." arg
  230    | "(..." arg
  231    | arg '+' arg
  232    | arg '-' arg
  233    | arg '*' arg
  234    | arg '/' arg
  235    | arg '%' arg
  236    | arg "**" arg
  237    | tUMINUS_NUM simple_numeric "**" arg
  238    | "unary+" arg
  239    | "unary-" arg
  240    | arg '|' arg
  241    | arg '^' arg
  242    | arg '&' arg
  243    | arg "<=>" arg
  244    | rel_expr
  245    | arg "==" arg
  246    | arg "===" arg
  247    | arg "!=" arg
  248    | arg "=~" arg
  249    | arg "!~" arg
  250    | '!' arg
  251    | '~' arg
  252    | arg "<<" arg
  253    | arg ">>" arg
  254    | arg "&&" arg
  255    | arg "||" arg

  256 $@13: ε

  257 arg: "`defined?'" opt_nl $@13 arg
  258    | arg '?' arg opt_nl ':' arg
  259    | defn_head f_opt_paren_args '=' arg
  260    | defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | defs_head f_opt_paren_args '=' arg
  262    | defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | primary

  264 relop: '>'
  265      | '<'
  266      | ">="
  267      | "<="

  268 rel_expr: arg relop arg
  269         | rel_expr relop arg

  270 lex_ctxt: none

  271 arg_value: arg

  272 aref_args: none
  273          | args trailer
  274          | args ',' assocs trailer
  275          | assocs trailer

  276 arg_rhs: arg
  277        | arg "`rescue' modifier" arg

  278 paren_args: '(' opt_call_args rparen
  279           | '(' args ',' args_forward rparen
  280           | '(' args_forward rparen

  281 opt_paren_args: none
  282               | paren_args

  283 opt_call_args: none
  284              | call_args
  285              | args ','
  286              | args ',' assocs ','
  287              | assocs ','

  288 call_args: command
  289          | args opt_block_arg
  290          | assocs opt_block_arg
  291          | args ',' assocs opt_block_arg
  292          | block_arg

  293 $@14: ε

  294 command_args: $@14 call_args

  295 block_arg: "&" arg_value
  296          | "&"

  297 opt_block_arg: ',' block_arg
  298              | none

  299 args: arg_value
  300     | "*" arg_value
  301     | "*"
  302     | args ',' arg_value
  303     | args ',' "*" arg_value
  304     | args ',' "*"

  305 mrhs_arg: mrhs
  306         | arg_value

  307 mrhs: args ',' arg_value
  308     | args ',' "*" arg_value
  309     | "*" arg_value

  310 primary: literal
  311        | strings
  312        | xstring
  313        | regexp
  314        | words
  315        | qwords
  316        | symbols
  317        | qsymbols
  318        | var_ref
  319        | backref
  320        | "method"

  321 $@15: ε

  322 primary: k_begin $@15 bodystmt k_end

  323 $@16: ε

  324 primary: "( arg" $@16 rparen

  325 $@17: ε

  326 primary: "( arg" stmt $@17 rparen
  327        | "(" compstmt ')'
  328        | primary_value "::" "constant"
  329        | ":: at EXPR_BEG" "constant"
  330        | "[" aref_args ']'
  331        | "{" assoc_list '}'
  332        | k_return
  333        | "`yield'" '(' call_args rparen
  334        | "`yield'" '(' rparen
  335        | "`yield'"

  336 $@18: ε

  337 primary: "`defined?'" opt_nl '(' $@18 expr rparen
  338        | "`not'" '(' expr rparen
  339        | "`not'" '(' rparen
  340        | fcall brace_block
  341        | method_call
  342        | method_call brace_block
  343        | lambda
  344        | k_if expr_value then compstmt if_tail k_end
  345        | k_unless expr_value then compstmt opt_else k_end
  346        | k_while expr_value_do compstmt k_end
  347        | k_until expr_value_do compstmt k_end

  348 @19: ε

  349 primary: k_case expr_value opt_terms @19 case_body k_end

  350 @20: ε

  351 primary: k_case opt_terms @20 case_body k_end
  352        | k_case expr_value opt_terms p_case_body k_end
  353        | k_for for_var "`in'" expr_value_do compstmt k_end

  354 $@21: ε

  355 primary: k_class cpath superclass $@21 bodystmt k_end

  356 $@22: ε

  357 primary: k_class "<<" expr $@22 term bodystmt k_end

  358 $@23: ε

  359 primary: k_module cpath $@23 bodystmt k_end

  360 $@24: ε

  361 primary: defn_head f_arglist $@24 bodystmt k_end

  362 $@25: ε

  363 primary: defs_head f_arglist $@25 bodystmt k_end
  364        | "`break'"
  365        | "`next'"
  366        | "`redo'"
  367        | "`retry'"

  368 primary_value: primary

  369 k_begin: "`begin'"

  370 k_if: "`if'"

  371 k_unless: "`unless'"

  372 k_while: "`while'"

  373 k_until: "`until'"

  374 k_case: "`case'"

  375 k_for: "`for'"

  376 k_class: "`class'"

  377 k_module: "`module'"

  378 k_def: "`def'"

  379 k_do: "`do'"

  380 k_do_block: "`do' for block"

  381 k_rescue: "`rescue'"

  382 k_ensure: "`ensure'"

  383 k_when: "`when'"

  384 k_else: "`else'"

  385 k_elsif: "`elsif'"

  386 k_end: "`end'"
  387      | "dummy end"

  388 k_return: "`return'"

  389 then: term
  390     | "`then'"
  391     | term "`then'"

  392 do: term
  393   | "`do' for condition"

  394 if_tail: opt_else
  395        | k_elsif expr_value then compstmt if_tail

  396 opt_else: none
  397         | k_else compstmt

  398 for_var: lhs
  399        | mlhs

  400 f_marg: f_norm_arg
  401       | "(" f_margs rparen

  402 f_marg_list: f_marg
  403            | f_marg_list ',' f_marg

  404 f_margs: f_marg_list
  405        | f_marg_list ',' f_rest_marg
  406        | f_marg_list ',' f_rest_marg ',' f_marg_list
  407        | f_rest_marg
  408        | f_rest_marg ',' f_marg_list

  409 f_rest_marg: "*" f_norm_arg
  410            | "*"

  411 f_any_kwrest: f_kwrest
  412             | f_no_kwarg

  413 $@26: ε

  414 f_eq: $@26 '='

  415 block_args_tail: f_block_kwarg ',' f_kwrest opt_f_block_arg
  416                | f_block_kwarg opt_f_block_arg
  417                | f_any_kwrest opt_f_block_arg
  418                | f_block_arg

  419 opt_block_args_tail: ',' block_args_tail
  420                    | ε

  421 excessed_comma: ','

  422 block_param: f_arg ',' f_block_optarg ',' f_rest_arg opt_block_args_tail
  423            | f_arg ',' f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail
  424            | f_arg ',' f_block_optarg opt_block_args_tail
  425            | f_arg ',' f_block_optarg ',' f_arg opt_block_args_tail
  426            | f_arg ',' f_rest_arg opt_block_args_tail
  427            | f_arg excessed_comma
  428            | f_arg ',' f_rest_arg ',' f_arg opt_block_args_tail
  429            | f_arg opt_block_args_tail
  430            | f_block_optarg ',' f_rest_arg opt_block_args_tail
  431            | f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail
  432            | f_block_optarg opt_block_args_tail
  433            | f_block_optarg ',' f_arg opt_block_args_tail
  434            | f_rest_arg opt_block_args_tail
  435            | f_rest_arg ',' f_arg opt_block_args_tail
  436            | block_args_tail

  437 opt_block_param: none
  438                | block_param_def

  439 block_param_def: '|' opt_bv_decl '|'
  440                | '|' block_param opt_bv_decl '|'

  441 opt_bv_decl: opt_nl
  442            | opt_nl ';' bv_decls opt_nl

  443 bv_decls: bvar
  444         | bv_decls ',' bvar

  445 bvar: "local variable or method"
  446     | f_bad_arg

  447 @27: ε

  448 @28: ε

  449 @29: ε

  450 $@30: ε

  451 lambda: "->" @27 @28 @29 f_larglist $@30 lambda_body

  452 f_larglist: '(' f_args opt_bv_decl ')'
  453           | f_args

  454 lambda_body: tLAMBEG compstmt '}'

  455 $@31: ε

  456 lambda_body: "`do' for lambda" $@31 bodystmt k_end

  457 do_block: k_do_block do_body k_end

  458 block_call: command do_block
  459           | block_call call_op2 operation2 opt_paren_args
  460           | block_call call_op2 operation2 opt_paren_args brace_block
  461           | block_call call_op2 operation2 command_args do_block

  462 method_call: fcall paren_args
  463            | primary_value call_op operation2 opt_paren_args
  464            | primary_value "::" operation2 paren_args
  465            | primary_value "::" operation3
  466            | primary_value call_op paren_args
  467            | primary_value "::" paren_args
  468            | "`super'" paren_args
  469            | "`super'"
  470            | primary_value '[' opt_call_args rbracket

  471 brace_block: '{' brace_body '}'
  472            | k_do do_body k_end

  473 @32: ε

  474 @33: ε

  475 @34: ε

  476 brace_body: @32 @33 @34 opt_block_param compstmt

  477 @35: ε

  478 @36: ε

  479 @37: ε

  480 do_body: @35 @36 @37 opt_block_param bodystmt

  481 case_args: arg_value
  482          | "*" arg_value
  483          | case_args ',' arg_value
  484          | case_args ',' "*" arg_value

  485 case_body: k_when case_args then compstmt cases

  486 cases: opt_else
  487      | case_body

  488 @38: ε

  489 @39: ε

  490 $@40: ε

  491 p_case_body: "`in'" @38 @39 p_top_expr then $@40 compstmt p_cases

  492 p_cases: opt_else
  493        | p_case_body

  494 p_top_expr: p_top_expr_body
  495           | p_top_expr_body "`if' modifier" expr_value
  496           | p_top_expr_body "`unless' modifier" expr_value

  497 p_top_expr_body: p_expr
  498                | p_expr ','
  499                | p_expr ',' p_args
  500                | p_find
  501                | p_args_tail
  502                | p_kwargs

  503 p_expr: p_as

  504 p_as: p_expr "=>" p_variable
  505     | p_alt

  506 p_alt: p_alt '|' p_expr_basic
  507      | p_expr_basic

  508 p_lparen: '('

  509 p_lbracket: '['

  510 p_expr_basic: p_value
  511             | p_variable
  512             | p_const p_lparen p_args rparen
  513             | p_const p_lparen p_find rparen
  514             | p_const p_lparen p_kwargs rparen
  515             | p_const '(' rparen
  516             | p_const p_lbracket p_args rbracket
  517             | p_const p_lbracket p_find rbracket
  518             | p_const p_lbracket p_kwargs rbracket
  519             | p_const '[' rbracket
  520             | "[" p_args rbracket
  521             | "[" p_find rbracket
  522             | "[" rbracket

  523 @41: ε

  524 p_expr_basic: "{" @41 p_kwargs rbrace
  525             | "{" rbrace

  526 @42: ε

  527 p_expr_basic: "(" @42 p_expr rparen

  528 p_args: p_expr
  529       | p_args_head
  530       | p_args_head p_arg
  531       | p_args_head p_rest
  532       | p_args_head p_rest ',' p_args_post
  533       | p_args_tail

  534 p_args_head: p_arg ','
  535            | p_args_head p_arg ','

  536 p_args_tail: p_rest
  537            | p_rest ',' p_args_post

  538 p_find: p_rest ',' p_args_post ',' p_rest

  539 p_rest: "*" "local variable or method"
  540       | "*"

  541 p_args_post: p_arg
  542            | p_args_post ',' p_arg

  543 p_arg: p_expr

  544 p_kwargs: p_kwarg ',' p_any_kwrest
  545         | p_kwarg
  546         | p_kwarg ','
  547         | p_any_kwrest

  548 p_kwarg: p_kw
  549        | p_kwarg ',' p_kw

  550 p_kw: p_kw_label p_expr
  551     | p_kw_label

  552 p_kw_label: "label"
  553           | "string literal" string_contents tLABEL_END

  554 p_kwrest: kwrest_mark "local variable or method"
  555         | kwrest_mark

  556 p_kwnorest: kwrest_mark "`nil'"

  557 p_any_kwrest: p_kwrest
  558             | p_kwnorest

  559 p_value: p_primitive
  560        | p_primitive ".." p_primitive
  561        | p_primitive "..." p_primitive
  562        | p_primitive ".."
  563        | p_primitive "..."
  564        | p_var_ref
  565        | p_expr_ref
  566        | p_const
  567        | "(.." p_primitive
  568        | "(..." p_primitive

  569 p_primitive: literal
  570            | strings
  571            | xstring
  572            | regexp
  573            | words
  574            | qwords
  575            | symbols
  576            | qsymbols
  577            | keyword_variable
  578            | lambda

  579 p_variable: "local variable or method"

  580 p_var_ref: '^' "local variable or method"
  581          | '^' nonlocal_var

  582 p_expr_ref: '^' "(" expr_value ')'

  583 p_const: ":: at EXPR_BEG" cname
  584        | p_const "::" cname
  585        | "constant"

  586 opt_rescue: k_rescue exc_list exc_var then compstmt opt_rescue
  587           | none

  588 exc_list: arg_value
  589         | mrhs
  590         | none

  591 exc_var: "=>" lhs
  592        | none

  593 opt_ensure: k_ensure compstmt
  594           | none

  595 literal: numeric
  596        | symbol

  597 strings: string

  598 string: "char literal"
  599       | string1
  600       | string string1

  601 string1: "string literal" string_contents "terminator"

  602 xstring: "backtick literal" xstring_contents "terminator"

  603 regexp: "regexp literal" regexp_contents tREGEXP_END

  604 words: "word list" ' ' word_list "terminator"

  605 word_list: ε
  606          | word_list word ' '

  607 word: string_content
  608     | word string_content

  609 symbols: "symbol list" ' ' symbol_list "terminator"

  610 symbol_list: ε
  611            | symbol_list word ' '

  612 qwords: "verbatim word list" ' ' qword_list "terminator"

  613 qsymbols: "verbatim symbol list" ' ' qsym_list "terminator"

  614 qword_list: ε
  615           | qword_list "literal content" ' '

  616 qsym_list: ε
  617          | qsym_list "literal content" ' '

  618 string_contents: ε
  619                | string_contents string_content

  620 xstring_contents: ε
  621                 | xstring_contents string_content

  622 regexp_contents: ε
  623                | regexp_contents string_content

  624 string_content: "literal content"

  625 @43: ε

  626 string_content: tSTRING_DVAR @43 string_dvar

  627 $@44: ε

  628 @45: ε

  629 @46: ε

  630 @47: ε

  631 @48: ε

  632 string_content: tSTRING_DBEG $@44 @45 @46 @47 @48 compstmt "'}'"

  633 string_dvar: "global variable"
  634            | "instance variable"
  635            | "class variable"
  636            | backref

  637 symbol: ssym
  638       | dsym

  639 ssym: "symbol literal" sym

  640 sym: fname
  641    | nonlocal_var

  642 dsym: "symbol literal" string_contents "terminator"

  643 numeric: simple_numeric
  644        | tUMINUS_NUM simple_numeric

  645 simple_numeric: "integer literal"
  646               | "float literal"
  647               | "rational literal"
  648               | "imaginary literal"

  649 nonlocal_var: "instance variable"
  650             | "global variable"
  651             | "class variable"

  652 user_variable: "local variable or method"
  653              | "constant"
  654              | nonlocal_var

  655 keyword_variable: "`nil'"
  656                 | "`self'"
  657                 | "`true'"
  658                 | "`false'"
  659                 | "`__FILE__'"
  660                 | "`__LINE__'"
  661                 | "`__ENCODING__'"

  662 var_ref: user_variable
  663        | keyword_variable

  664 var_lhs: user_variable
  665        | keyword_variable

  666 backref: "numbered reference"
  667        | "back reference"

  668 $@49: ε

  669 superclass: '<' $@49 expr_value term
  670           | ε

  671 f_opt_paren_args: f_paren_args
  672                 | none

  673 f_paren_args: '(' f_args rparen

  674 f_arglist: f_paren_args

  675 @50: ε

  676 f_arglist: @50 f_args term

  677 args_tail: f_kwarg ',' f_kwrest opt_f_block_arg
  678          | f_kwarg opt_f_block_arg
  679          | f_any_kwrest opt_f_block_arg
  680          | f_block_arg
  681          | args_forward

  682 opt_args_tail: ',' args_tail
  683              | ε

  684 f_args: f_arg ',' f_optarg ',' f_rest_arg opt_args_tail
  685       | f_arg ',' f_optarg ',' f_rest_arg ',' f_arg opt_args_tail
  686       | f_arg ',' f_optarg opt_args_tail
  687       | f_arg ',' f_optarg ',' f_arg opt_args_tail
  688       | f_arg ',' f_rest_arg opt_args_tail
  689       | f_arg ',' f_rest_arg ',' f_arg opt_args_tail
  690       | f_arg opt_args_tail
  691       | f_optarg ',' f_rest_arg opt_args_tail
  692       | f_optarg ',' f_rest_arg ',' f_arg opt_args_tail
  693       | f_optarg opt_args_tail
  694       | f_optarg ',' f_arg opt_args_tail
  695       | f_rest_arg opt_args_tail
  696       | f_rest_arg ',' f_arg opt_args_tail
  697       | args_tail
  698       | ε

  699 args_forward: "(..."

  700 f_bad_arg: "constant"
  701          | "instance variable"
  702          | "global variable"
  703          | "class variable"

  704 f_norm_arg: f_bad_arg
  705           | "local variable or method"

  706 f_arg_asgn: f_norm_arg

  707 f_arg_item: f_arg_asgn
  708           | "(" f_margs rparen

  709 f_arg: f_arg_item
  710      | f_arg ',' f_arg_item

  711 f_label: "label"

  712 f_kw: f_label arg_value
  713     | f_label

  714 f_block_kw: f_label primary_value
  715           | f_label

  716 f_block_kwarg: f_block_kw
  717              | f_block_kwarg ',' f_block_kw

  718 f_kwarg: f_kw
  719        | f_kwarg ',' f_kw

  720 kwrest_mark: "**"
  721            | "**arg"

  722 f_no_kwarg: p_kwnorest

  723 f_kwrest: kwrest_mark "local variable or method"
  724         | kwrest_mark

  725 f_opt: f_arg_asgn f_eq arg_value

  726 f_block_opt: f_arg_asgn f_eq primary_value

  727 f_block_optarg: f_block_opt
  728               | f_block_optarg ',' f_block_opt

  729 f_optarg: f_opt
  730         | f_optarg ',' f_opt

  731 restarg_mark: '*'
  732             | "*"

  733 f_rest_arg: restarg_mark "local variable or method"
  734           | restarg_mark

  735 blkarg_mark: '&'
  736            | "&"

  737 f_block_arg: blkarg_mark "local variable or method"
  738            | blkarg_mark

  739 opt_f_block_arg: ',' f_block_arg
  740                | none

  741 singleton: var_ref

  742 $@51: ε

  743 singleton: '(' $@51 expr rparen

  744 assoc_list: none
  745           | assocs trailer

  746 assocs: assoc
  747       | assocs ',' assoc

  748 assoc: arg_value "=>" arg_value
  749      | "label" arg_value
  750      | "label"
  751      | "string literal" string_contents tLABEL_END arg_value
  752      | "**arg" arg_value
  753      | "**arg"

  754 operation: "local variable or method"
  755          | "constant"
  756          | "method"

  757 operation2: operation
  758           | op

  759 operation3: "local variable or method"
  760           | "method"
  761           | op

  762 dot_or_colon: '.'
  763             | "::"

  764 call_op: '.'
  765        | "&."

  766 call_op2: call_op
  767         | "::"

  768 opt_terms: ε
  769          | terms

  770 opt_nl: ε
  771       | '\n'

  772 rparen: opt_nl ')'

  773 rbracket: opt_nl ']'

  774 rbrace: opt_nl '}'

  775 trailer: opt_nl
  776        | ','

  777 term: ';'
  778     | '\n'

  779 terms: term
  780      | terms ';'

  781 none: ε


Terminals, with rules where they appear

    "end-of-input" (0) 0
    "escaped horizontal tab" <id> (9)
    '\n' (10) 771 778
    "escaped vertical tab" <id> (11)
    "escaped form feed" <id> (12)
    "escaped carriage return" <id> (13)
    ' ' (32) 604 606 609 611 612 613 615 617
    '!' (33) 58 168 250
    '%' (37) 165 235
    '&' (38) 147 242 735
    '(' (40) 278 279 280 333 334 337 338 339 452 508 515 673 743
    ')' (41) 327 452 582 772
    '*' (42) 162 233 731
    '+' (43) 160 231
    ',' (44) 99 101 103 105 108 109 111 144 274 279 285 286 287 291 297 302 303 304 307 308 403 405 406 408 415 419 421 422 423 424 425 426 428 430 431 433 435 444 483 484 498 499 532 534 535 537 538 542 544 546 549 677 682 684 685 686 687 688 689 691 692 694 696 710 717 719 728 730 739 747 776
    '-' (45) 161 232
    '.' <id> (46) 762 764
    '/' (47) 164 234
    ':' (58) 258
    ';' (59) 442 777 780
    '<' (60) 155 265 669
    '=' (61) 33 34 35 36 39 46 47 48 49 216 259 260 261 262 414
    '>' (62) 153 264
    '?' (63) 258
    '[' (91) 41 114 123 218 470 509 519
    "backslash" <id> (92)
    ']' (93) 330 773
    '^' (94) 146 241 580 581 582
    '`' (96) 174
    '{' (123) 9 31 471
    '|' (124) 145 240 439 440 506
    '}' (125) 9 31 79 331 454 471 774
    '~' (126) 169 251
    ".." (128) 225 227 560 562
    "..." (129) 226 228 561 563
    "(.." (130) 229 567
    "(..." (131) 230 568 699
    "unary+" (132) 170 238
    "unary-" (133) 171 239
    "**" (134) 166 236 237 720
    "<=>" (135) 148 243
    "<<" (136) 158 252 357
    ">>" (137) 159 253
    "<=" (138) 156 267
    ">=" (139) 154 266
    "==" (140) 149 245
    "===" (141) 150 246
    "!=" (142) 157 247
    "=~" (143) 151 248
    "!~" (144) 152 249
    "[]" (145) 172
    "[]=" (146) 173
    "::" <id> (147) 44 45 85 86 116 118 125 127 134 221 222 328 464 465 467 584 763 767
    "&&" (148) 254
    "||" (149) 255
    "&." <id> (150) 765
    error (256) 38 71
    "`class'" <id> (258) 185 376
    "`module'" <id> (259) 196 377
    "`def'" <id> (260) 186 378
    "`undef'" <id> (261) 25 209
    "`begin'" <id> (262) 182 369
    "`rescue'" <id> (263) 202 381
    "`ensure'" <id> (264) 192 382
    "`end'" <id> (265) 191 386
    "`if'" <id> (266) 212 370
    "`unless'" <id> (267) 213 371
    "`then'" <id> (268) 207 390 391
    "`elsif'" <id> (269) 190 385
    "`else'" <id> (270) 189 384
    "`case'" <id> (271) 184 374
    "`when'" <id> (272) 210 383
    "`while'" <id> (273) 214 372
    "`until'" <id> (274) 215 373
    "`for'" <id> (275) 194 375
    "`break'" <id> (276) 90 183 364
    "`next'" <id> (277) 91 197 365
    "`redo'" <id> (278) 201 366
    "`retry'" <id> (279) 203 367
    "`in'" <id> (280) 64 195 353 491
    "`do'" <id> (281) 188 379
    "`do' for condition" <id> (282) 393
    "`do' for block" <id> (283) 380
    "`do' for lambda" <id> (284) 456
    "`return'" <id> (285) 204 388
    "`yield'" <id> (286) 88 211 333 334 335
    "`super'" <id> (287) 87 206 468 469
    "`self'" <id> (288) 205 656
    "`nil'" <id> (289) 198 556 655
    "`true'" <id> (290) 208 657
    "`false'" <id> (291) 193 658
    "`and'" <id> (292) 55 181
    "`or'" <id> (293) 56 200
    "`not'" <id> (294) 57 199 338 339
    "`if' modifier" <id> (295) 26 495
    "`unless' modifier" <id> (296) 27 496
    "`while' modifier" <id> (297) 28
    "`until' modifier" <id> (298) 29
    "`rescue' modifier" <id> (299) 30 35 47 49 52 260 262 277
    "`alias'" <id> (300) 21 22 23 24 180
    "`defined?'" <id> (301) 187 257 337
    "`BEGIN'" <id> (302) 8 19 178
    "`END'" <id> (303) 31 179
    "`__LINE__'" <id> (304) 175 660
    "`__FILE__'" <id> (305) 176 659
    "`__ENCODING__'" <id> (306) 177 661
    "local variable or method" <id> (307) 42 45 115 116 124 125 130 135 219 221 445 539 554 579 580 652 705 723 733 737 754 759
    "method" <id> (308) 137 320 756 760
    "global variable" <id> (309) 22 23 24 633 650 702
    "instance variable" <id> (310) 634 649 701
    "constant" <id> (311) 43 44 117 118 119 126 127 128 131 136 220 222 223 328 329 585 653 700 755
    "class variable" <id> (312) 635 651 703
    "label" <id> (313) 552 711 749 750
    "integer literal" <node> (314) 645
    "float literal" <node> (315) 646
    "rational literal" <node> (316) 647
    "imaginary literal" <node> (317) 648
    "char literal" <node> (318) 598
    "numbered reference" <node> (319) 24 666
    "back reference" <node> (320) 23 667
    "literal content" <node> (321) 615 617 624
    tREGEXP_END <num> (322) 603
    "dummy end" <num> (323) 387
    "escaped space" (324)
    ":: at EXPR_BEG" (325) 119 128 132 223 329 583
    "operator-assignment" <id> (326) 40 41 42 43 44 45 50 217 218 219 220 221 222 223 224
    "=>" (327) 61 504 591 748
    "(" (328) 93 95 107 327 401 527 582 708
    "( arg" (329) 324 326
    ")" (330)
    "[" (331) 330 520 521 522
    "{" (332) 331 524 525
    "{ arg" (333) 79
    "*" (334) 98 99 100 101 102 103 104 105 163 300 301 303 304 308 309 409 410 482 484 539 540 732
    "**arg" (335) 167 721 752 753
    "&" (336) 295 296 736
    "->" (337) 451
    "symbol literal" (338) 639 642
    "string literal" (339) 553 601 751
    "backtick literal" (340) 602
    "regexp literal" (341) 603
    "word list" (342) 604
    "verbatim word list" (343) 612
    "symbol list" (344) 609
    "verbatim symbol list" (345) 613
    "terminator" (346) 601 602 604 609 612 613 642
    "'}'" (347) 632
    tSTRING_DBEG (348) 632
    tSTRING_DVAR (349) 626
    tLAMBEG (350) 454
    tLABEL_END (351) 553 751
    tLOWEST (352)
    tUMINUS_NUM (353) 237 644
    tLAST_TOKEN (354)


Nonterminals, with rules where they appear

    $accept (155)
        on left: 0
    program (156)
        on left: 2
        on right: 0
    $@1 (157)
        on left: 1
        on right: 2
    top_compstmt <node> (158)
        on left: 3
        on right: 2 9
    top_stmts <node> (159)
        on left: 4 5 6
        on right: 3 6
    top_stmt <node> (160)
        on left: 7 8
        on right: 5 6
    begin_block <node> (161)
        on left: 9
        on right: 8 19
    bodystmt <node> (162)
        on left: 11 12
        on right: 322 355 357 359 361 363 456 480
    $@2 (163)
        on left: 10
        on right: 11
    compstmt <node> (164)
        on left: 13
        on right: 11 12 31 327 344 345 346 347 353 395 397 454 476 485 491 586 593 632
    stmts <node> (165)
        on left: 14 15 16
        on right: 13 16
    stmt_or_begin <node> (166)
        on left: 17 19
        on right: 15 16
    $@3 (167)
        on left: 18
        on right: 19
    stmt <node> (168)
        on left: 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38
        on right: 7 17 26 27 28 29 30 35 52 326
    $@4 (169)
        on left: 20
        on right: 21
    command_asgn <node> (170)
        on left: 39 40 41 42 43 44 45 46 47 48 49 50
        on right: 32 53
    command_rhs <node> (171)
        on left: 51 52 53
        on right: 39 40 41 42 43 44 45 50
    expr <node> (172)
        on left: 54 55 56 57 58 61 64 65
        on right: 37 55 56 57 70 337 338 357 743
    @5 (173)
        on left: 59
        on right: 61
    @6 (174)
        on left: 60
        on right: 61
    @7 (175)
        on left: 62
        on right: 64
    @8 (176)
        on left: 63
        on right: 64
    def_name <node> (177)
        on left: 66
        on right: 67 69
    defn_head <node> (178)
        on left: 67
        on right: 46 47 259 260 361
    defs_head <node> (179)
        on left: 69
        on right: 48 49 261 262 363
    $@9 (180)
        on left: 68
        on right: 69
    expr_value <node> (181)
        on left: 70 71
        on right: 26 27 28 29 74 344 345 349 352 395 495 496 582 669
    expr_value_do <node> (182)
        on left: 74
        on right: 346 347 353
    $@10 (183)
        on left: 72
        on right: 74
    $@11 (184)
        on left: 73
        on right: 74
    command_call <node> (185)
        on left: 75 76
        on right: 33 51 52 54 58
    block_command <node> (186)
        on left: 77 78
        on right: 76
    cmd_brace_block <node> (187)
        on left: 79
        on right: 82 84 86
    fcall <node> (188)
        on left: 80
        on right: 81 82 340 462
    command <node> (189)
        on left: 81 82 83 84 85 86 87 88 89 90 91
        on right: 46 47 48 49 75 288 458
    mlhs <node> (190)
        on left: 92 93
        on right: 33 35 36 399
    mlhs_inner <node> (191)
        on left: 94 95
        on right: 93 95 107
    mlhs_basic <node> (192)
        on left: 96 97 98 99 100 101 102 103 104 105
        on right: 92 94
    mlhs_item <node> (193)
        on left: 106 107
        on right: 97 108 109 110 111
    mlhs_head <node> (194)
        on left: 108 109
        on right: 96 97 98 99 100 101 109
    mlhs_post <node> (195)
        on left: 110 111
        on right: 99 101 103 105 111
    mlhs_node <node> (196)
        on left: 112 113 114 115 116 117 118 119 120
        on right: 98 99 102 103 106
    lhs <node> (197)
        on left: 121 122 123 124 125 126 127 128 129
        on right: 34 39 216 398 591
    cname <id> (198)
        on left: 130 131
        on right: 132 133 134 583 584
    cpath <node> (199)
        on left: 132 133 134
        on right: 355 359
    fname <id> (200)
        on left: 135 136 137 138 139
        on right: 66 140 640
    fitem <node> (201)
        on left: 140 141
        on right: 21 142 144
    undef_list <node> (202)
        on left: 142 144
        on right: 25 144
    $@12 (203)
        on left: 143
        on right: 144
    op <id> (204)
        on left: 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174
        on right: 138 758 761
    reswords <id> (205)
        on left: 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
        on right: 139
    arg <node> (206)
        on left: 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 257 258 259 260 261 262 263
        on right: 47 49 61 64 65 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 245 246 247 248 249 250 251 252 253 254 255 257 258 259 260 261 262 268 269 271 276 277
    $@13 (207)
        on left: 256
        on right: 257
    relop <id> (208)
        on left: 264 265 266 267
        on right: 268 269
    rel_expr <node> (209)
        on left: 268 269
        on right: 244 269
    lex_ctxt <ctxt> (210)
        on left: 270
        on right: 33 34 35 36 39 40 41 42 43 44 45 50 216 217 218 219 220 221 222 223 224
    arg_value <node> (211)
        on left: 271
        on right: 295 299 300 302 303 306 307 308 309 481 482 483 484 588 712 725 748 749 751 752
    aref_args <node> (212)
        on left: 272 273 274 275
        on right: 330
    arg_rhs <node> (213)
        on left: 276 277
        on right: 216 217 218 219 220 221 222 223 224
    paren_args <node> (214)
        on left: 278 279 280
        on right: 282 462 464 466 467 468
    opt_paren_args <node> (215)
        on left: 281 282
        on right: 459 460 463
    opt_call_args <node> (216)
        on left: 283 284 285 286 287
        on right: 41 114 123 218 278 470
    call_args <node> (217)
        on left: 288 289 290 291 292
        on right: 89 90 91 284 294 333
    command_args <node> (218)
        on left: 294
        on right: 78 81 82 83 84 85 86 87 88 461
    $@14 (219)
        on left: 293
        on right: 294
    block_arg <node> (220)
        on left: 295 296
        on right: 292 297
    opt_block_arg <node> (221)
        on left: 297 298
        on right: 289 290 291
    args <node> (222)
        on left: 299 300 301 302 303 304
        on right: 273 274 279 285 286 289 291 302 303 304 307 308
    mrhs_arg <node> (223)
        on left: 305 306
        on right: 35 36
    mrhs <node> (224)
        on left: 307 308 309
        on right: 34 305 589
    primary <node> (225)
        on left: 310 311 312 313 314 315 316 317 318 319 320 322 324 326 327 328 329 330 331 332 333 334 335 337 338 339 340 341 342 343 344 345 346 347 349 351 352 353 355 357 359 361 363 364 365 366 367
        on right: 263 368
    $@15 (226)
        on left: 321
        on right: 322
    $@16 (227)
        on left: 323
        on right: 324
    $@17 (228)
        on left: 325
        on right: 326
    $@18 (229)
        on left: 336
        on right: 337
    @19 (230)
        on left: 348
        on right: 349
    @20 (231)
        on left: 350
        on right: 351
    $@21 (232)
        on left: 354
        on right: 355
    $@22 (233)
        on left: 356
        on right: 357
    $@23 (234)
        on left: 358
        on right: 359
    $@24 (235)
        on left: 360
        on right: 361
    $@25 (236)
        on left: 362
        on right: 363
    primary_value <node> (237)
        on left: 368
        on right: 41 42 43 44 45 83 84 85 86 114 115 116 117 118 123 124 125 126 127 134 218 219 220 221 222 328 463 464 465 466 467 470 714 726
    k_begin (238)
        on left: 369
        on right: 322
    k_if (239)
        on left: 370
        on right: 344
    k_unless (240)
        on left: 371
        on right: 345
    k_while (241)
        on left: 372
        on right: 346
    k_until (242)
        on left: 373
        on right: 347
    k_case (243)
        on left: 374
        on right: 349 351 352
    k_for (244)
        on left: 375
        on right: 353
    k_class (245)
        on left: 376
        on right: 355 357
    k_module (246)
        on left: 377
        on right: 359
    k_def (247)
        on left: 378
        on right: 67 69
    k_do (248)
        on left: 379
        on right: 472
    k_do_block (249)
        on left: 380
        on right: 457
    k_rescue (250)
        on left: 381
        on right: 586
    k_ensure (251)
        on left: 382
        on right: 593
    k_when (252)
        on left: 383
        on right: 485
    k_else (253)
        on left: 384
        on right: 11 397
    k_elsif (254)
        on left: 385
        on right: 395
    k_end (255)
        on left: 386 387
        on right: 322 344 345 346 347 349 351 352 353 355 357 359 361 363 456 457 472
    k_return (256)
        on left: 388
        on right: 89 332
    then (257)
        on left: 389 390 391
        on right: 344 345 395 485 491 586
    do (258)
        on left: 392 393
        on right: 74
    if_tail <node> (259)
        on left: 394 395
        on right: 344 395
    opt_else <node> (260)
        on left: 396 397
        on right: 345 394 486 492
    for_var <node> (261)
        on left: 398 399
        on right: 353
    f_marg <node> (262)
        on left: 400 401
        on right: 402 403
    f_marg_list <node> (263)
        on left: 402 403
        on right: 403 404 405 406 408
    f_margs <node> (264)
        on left: 404 405 406 407 408
        on right: 401 708
    f_rest_marg <node> (265)
        on left: 409 410
        on right: 405 406 407 408
    f_any_kwrest <id> (266)
        on left: 411 412
        on right: 417 679
    f_eq (267)
        on left: 414
        on right: 725 726
    $@26 (268)
        on left: 413
        on right: 414
    block_args_tail <node> (269)
        on left: 415 416 417 418
        on right: 419 436
    opt_block_args_tail <node> (270)
        on left: 419 420
        on right: 422 423 424 425 426 428 429 430 431 432 433 434 435
    excessed_comma <id> (271)
        on left: 421
        on right: 427
    block_param <node> (272)
        on left: 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436
        on right: 440
    opt_block_param <node> (273)
        on left: 437 438
        on right: 476 480
    block_param_def <node> (274)
        on left: 439 440
        on right: 438
    opt_bv_decl <node> (275)
        on left: 441 442
        on right: 439 440 452
    bv_decls <node> (276)
        on left: 443 444
        on right: 442 444
    bvar <node> (277)
        on left: 445 446
        on right: 443 444
    lambda <node> (278)
        on left: 451
        on right: 343 578
    @27 (279)
        on left: 447
        on right: 451
    @28 (280)
        on left: 448
        on right: 451
    @29 (281)
        on left: 449
        on right: 451
    $@30 (282)
        on left: 450
        on right: 451
    f_larglist <node> (283)
        on left: 452 453
        on right: 451
    lambda_body <node> (284)
        on left: 454 456
        on right: 451
    $@31 (285)
        on left: 455
        on right: 456
    do_block <node> (286)
        on left: 457
        on right: 458 461
    block_call <node> (287)
        on left: 458 459 460 461
        on right: 77 78 459 460 461
    method_call <node> (288)
        on left: 462 463 464 465 466 467 468 469 470
        on right: 341 342
    brace_block <node> (289)
        on left: 471 472
        on right: 340 342 460
    brace_body <node> (290)
        on left: 476
        on right: 79 471
    @32 (291)
        on left: 473
        on right: 476
    @33 (292)
        on left: 474
        on right: 476
    @34 (293)
        on left: 475
        on right: 476
    do_body <node> (294)
        on left: 480
        on right: 457 472
    @35 (295)
        on left: 477
        on right: 480
    @36 (296)
        on left: 478
        on right: 480
    @37 (297)
        on left: 479
        on right: 480
    case_args <node> (298)
        on left: 481 482 483 484
        on right: 483 484 485
    case_body <node> (299)
        on left: 485
        on right: 349 351 487
    cases <node> (300)
        on left: 486 487
        on right: 485
    p_case_body <node> (301)
        on left: 491
        on right: 352 493
    @38 (302)
        on left: 488
        on right: 491
    @39 (303)
        on left: 489
        on right: 491
    $@40 (304)
        on left: 490
        on right: 491
    p_cases <node> (305)
        on left: 492 493
        on right: 491
    p_top_expr <node> (306)
        on left: 494 495 496
        on right: 491
    p_top_expr_body <node> (307)
        on left: 497 498 499 500 501 502
        on right: 61 64 494 495 496
    p_expr <node> (308)
        on left: 503
        on right: 497 498 499 504 527 528 543 550
    p_as <node> (309)
        on left: 504 505
        on right: 503
    p_alt <node> (310)
        on left: 506 507
        on right: 505 506
    p_lparen (311)
        on left: 508
        on right: 512 513 514
    p_lbracket (312)
        on left: 509
        on right: 516 517 518
    p_expr_basic <node> (313)
        on left: 510 511 512 513 514 515 516 517 518 519 520 521 522 524 525 527
        on right: 506 507
    @41 (314)
        on left: 523
        on right: 524
    @42 (315)
        on left: 526
        on right: 527
    p_args <node> (316)
        on left: 528 529 530 531 532 533
        on right: 499 512 516 520
    p_args_head <node> (317)
        on left: 534 535
        on right: 529 530 531 532 535
    p_args_tail <node> (318)
        on left: 536 537
        on right: 501 533
    p_find <node> (319)
        on left: 538
        on right: 500 513 517 521
    p_rest <id> (320)
        on left: 539 540
        on right: 531 532 536 537 538
    p_args_post <node> (321)
        on left: 541 542
        on right: 532 537 538 542
    p_arg <node> (322)
        on left: 543
        on right: 530 534 535 541 542
    p_kwargs <node> (323)
        on left: 544 545 546 547
        on right: 502 514 518 524
    p_kwarg <node> (324)
        on left: 548 549
        on right: 544 545 546 549
    p_kw <node> (325)
        on left: 550 551
        on right: 548 549
    p_kw_label <id> (326)
        on left: 552 553
        on right: 550 551
    p_kwrest <id> (327)
        on left: 554 555
        on right: 557
    p_kwnorest <id> (328)
        on left: 556
        on right: 558 722
    p_any_kwrest <id> (329)
        on left: 557 558
        on right: 544 547
    p_value <node> (330)
        on left: 559 560 561 562 563 564 565 566 567 568
        on right: 510
    p_primitive <node> (331)
        on left: 569 570 571 572 573 574 575 576 577 578
        on right: 559 560 561 562 563 567 568
    p_variable <node> (332)
        on left: 579
        on right: 504 511
    p_var_ref <node> (333)
        on left: 580 581
        on right: 564
    p_expr_ref <node> (334)
        on left: 582
        on right: 565
    p_const <node> (335)
        on left: 583 584 585
        on right: 512 513 514 515 516 517 518 519 566 584
    opt_rescue <node> (336)
        on left: 586 587
        on right: 11 12 586
    exc_list <node> (337)
        on left: 588 589 590
        on right: 586
    exc_var <node> (338)
        on left: 591 592
        on right: 586
    opt_ensure <node> (339)
        on left: 593 594
        on right: 11 12
    literal <node> (340)
        on left: 595 596
        on right: 310 569
    strings <node> (341)
        on left: 597
        on right: 311 570
    string <node> (342)
        on left: 598 599 600
        on right: 597 600
    string1 <node> (343)
        on left: 601
        on right: 599 600
    xstring <node> (344)
        on left: 602
        on right: 312 571
    regexp <node> (345)
        on left: 603
        on right: 313 572
    words <node> (346)
        on left: 604
        on right: 314 573
    word_list <node> (347)
        on left: 605 606
        on right: 604 606
    word <node> (348)
        on left: 607 608
        on right: 606 608 611
    symbols <node> (349)
        on left: 609
        on right: 316 575
    symbol_list <node> (350)
        on left: 610 611
        on right: 609 611
    qwords <node> (351)
        on left: 612
        on right: 315 574
    qsymbols <node> (352)
        on left: 613
        on right: 317 576
    qword_list <node> (353)
        on left: 614 615
        on right: 612 615
    qsym_list <node> (354)
        on left: 616 617
        on right: 613 617
    string_contents <node> (355)
        on left: 618 619
        on right: 553 601 619 642 751
    xstring_contents <node> (356)
        on left: 620 621
        on right: 602 621
    regexp_contents <node> (357)
        on left: 622 623
        on right: 603 623
    string_content <node> (358)
        on left: 624 626 632
        on right: 607 608 619 621 623
    @43 (359)
        on left: 625
        on right: 626
    $@44 (360)
        on left: 627
        on right: 632
    @45 (361)
        on left: 628
        on right: 632
    @46 (362)
        on left: 629
        on right: 632
    @47 (363)
        on left: 630
        on right: 632
    @48 (364)
        on left: 631
        on right: 632
    string_dvar <node> (365)
        on left: 633 634 635 636
        on right: 626
    symbol <node> (366)
        on left: 637 638
        on right: 141 596
    ssym <node> (367)
        on left: 639
        on right: 637
    sym <id> (368)
        on left: 640 641
        on right: 639
    dsym <node> (369)
        on left: 642
        on right: 638
    numeric <node> (370)
        on left: 643 644
        on right: 595
    simple_numeric <node> (371)
        on left: 645 646 647 648
        on right: 237 643 644
    nonlocal_var <id> (372)
        on left: 649 650 651
        on right: 581 641 654
    user_variable <id> (373)
        on left: 652 653 654
        on right: 112 121 662 664
    keyword_variable <id> (374)
        on left: 655 656 657 658 659 660 661
        on right: 113 122 577 663 665
    var_ref <node> (375)
        on left: 662 663
        on right: 318 741
    var_lhs <node> (376)
        on left: 664 665
        on right: 40 217
    backref <node> (377)
        on left: 666 667
        on right: 50 120 129 224 319 636
    superclass <node> (378)
        on left: 669 670
        on right: 355
    $@49 (379)
        on left: 668
        on right: 669
    f_opt_paren_args <node> (380)
        on left: 671 672
        on right: 46 47 48 49 259 260 261 262
    f_paren_args <node> (381)
        on left: 673
        on right: 671 674
    f_arglist <node> (382)
        on left: 674 676
        on right: 361 363
    @50 (383)
        on left: 675
        on right: 676
    args_tail <node> (384)
        on left: 677 678 679 680 681
        on right: 682 697
    opt_args_tail <node> (385)
        on left: 682 683
        on right: 684 685 686 687 688 689 690 691 692 693 694 695 696
    f_args <node> (386)
        on left: 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698
        on right: 452 453 673 676
    args_forward <id> (387)
        on left: 699
        on right: 279 280 681
    f_bad_arg <id> (388)
        on left: 700 701 702 703
        on right: 446 704
    f_norm_arg <id> (389)
        on left: 704 705
        on right: 400 409 706
    f_arg_asgn <id> (390)
        on left: 706
        on right: 707 725 726
    f_arg_item <node> (391)
        on left: 707 708
        on right: 709 710
    f_arg <node> (392)
        on left: 709 710
        on right: 422 423 424 425 426 427 428 429 431 433 435 684 685 686 687 688 689 690 692 694 696 710
    f_label <id> (393)
        on left: 711
        on right: 712 713 714 715
    f_kw <node> (394)
        on left: 712 713
        on right: 718 719
    f_block_kw <node> (395)
        on left: 714 715
        on right: 716 717
    f_block_kwarg <node> (396)
        on left: 716 717
        on right: 415 416 717
    f_kwarg <node> (397)
        on left: 718 719
        on right: 677 678 719
    kwrest_mark (398)
        on left: 720 721
        on right: 554 555 556 723 724
    f_no_kwarg <id> (399)
        on left: 722
        on right: 412
    f_kwrest <id> (400)
        on left: 723 724
        on right: 411 415 677
    f_opt <node> (401)
        on left: 725
        on right: 729 730
    f_block_opt <node> (402)
        on left: 726
        on right: 727 728
    f_block_optarg <node> (403)
        on left: 727 728
        on right: 422 423 424 425 430 431 432 433 728
    f_optarg <node> (404)
        on left: 729 730
        on right: 684 685 686 687 691 692 693 694 730
    restarg_mark (405)
        on left: 731 732
        on right: 733 734
    f_rest_arg <id> (406)
        on left: 733 734
        on right: 422 423 426 428 430 431 434 435 684 685 688 689 691 692 695 696
    blkarg_mark (407)
        on left: 735 736
        on right: 737 738
    f_block_arg <id> (408)
        on left: 737 738
        on right: 418 680 739
    opt_f_block_arg <id> (409)
        on left: 739 740
        on right: 415 416 417 677 678 679
    singleton <node> (410)
        on left: 741 743
        on right: 69
    $@51 (411)
        on left: 742
        on right: 743
    assoc_list <node> (412)
        on left: 744 745
        on right: 331
    assocs <node> (413)
        on left: 746 747
        on right: 274 275 286 287 290 291 745 747
    assoc <node> (414)
        on left: 748 749 750 751 752 753
        on right: 746 747
    operation <id> (415)
        on left: 754 755 756
        on right: 80 757
    operation2 <id> (416)
        on left: 757 758
        on right: 78 83 84 85 86 459 460 461 463 464
    operation3 <id> (417)
        on left: 759 760 761
        on right: 465
    dot_or_colon <id> (418)
        on left: 762 763
        on right: 69
    call_op <id> (419)
        on left: 764 765
        on right: 42 43 83 84 115 117 124 126 219 220 463 466 766
    call_op2 <id> (420)
        on left: 766 767
        on right: 78 459 460 461
    opt_terms (421)
        on left: 768 769
        on right: 3 13 349 351 352
    opt_nl (422)
        on left: 770 771
        on right: 57 257 258 337 441 442 772 773 774 775
    rparen (423)
        on left: 772
        on right: 93 95 107 278 279 280 324 326 333 334 337 338 339 401 512 513 514 515 527 673 708 743
    rbracket (424)
        on left: 773
        on right: 41 114 123 218 470 516 517 518 519 520 521 522
    rbrace (425)
        on left: 774
        on right: 524 525
    trailer (426)
        on left: 775 776
        on right: 273 274 275 745
    term (427)
        on left: 777 778
        on right: 357 389 391 392 669 676 779
    terms (428)
        on left: 779 780
        on right: 6 16 769 780
    none <node> (429)
        on left: 781
        on right: 4 14 270 272 281 283 298 396 437 587 590 592 594 672 740 744


State 0

    0 $accept: • program "end-of-input"
    1 $@1: ε •
    2 program: • $@1 top_compstmt

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program • "end-of-input"

    "end-of-input"  shift, and go to state 3


State 2

    2 program: $@1 • top_compstmt
    3 top_compstmt: • top_stmts opt_terms
    4 top_stmts: • none
    5          | • top_stmt
    6          | • top_stmts terms top_stmt
    7 top_stmt: • stmt
    8         | • "`BEGIN'" begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["end-of-input", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 30
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "end-of-input"  reduce using rule 781 (none)
    ';'             reduce using rule 781 (none)
    '\n'            reduce using rule 781 (none)

    top_compstmt      go to state 70
    top_stmts         go to state 71
    top_stmt          go to state 72
    stmt              go to state 73
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 128


State 3

    0 $accept: program "end-of-input" •

    $default  accept


State 4

   38 stmt: error •

    $default  reduce using rule 38 (stmt)


State 5

  376 k_class: "`class'" •

    $default  reduce using rule 376 (k_class)


State 6

  377 k_module: "`module'" •

    $default  reduce using rule 377 (k_module)


State 7

  378 k_def: "`def'" •

    $default  reduce using rule 378 (k_def)


State 8

   25 stmt: "`undef'" • undef_list
  135 fname: • "local variable or method"
  136      | • "constant"
  137      | • "method"
  138      | • op
  139      | • reswords
  140 fitem: • fname
  141      | • symbol
  142 undef_list: • fitem
  144           | • undef_list ',' $@12 fitem
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  175 reswords: • "`__LINE__'"
  176         | • "`__FILE__'"
  177         | • "`__ENCODING__'"
  178         | • "`BEGIN'"
  179         | • "`END'"
  180         | • "`alias'"
  181         | • "`and'"
  182         | • "`begin'"
  183         | • "`break'"
  184         | • "`case'"
  185         | • "`class'"
  186         | • "`def'"
  187         | • "`defined?'"
  188         | • "`do'"
  189         | • "`else'"
  190         | • "`elsif'"
  191         | • "`end'"
  192         | • "`ensure'"
  193         | • "`false'"
  194         | • "`for'"
  195         | • "`in'"
  196         | • "`module'"
  197         | • "`next'"
  198         | • "`nil'"
  199         | • "`not'"
  200         | • "`or'"
  201         | • "`redo'"
  202         | • "`rescue'"
  203         | • "`retry'"
  204         | • "`return'"
  205         | • "`self'"
  206         | • "`super'"
  207         | • "`then'"
  208         | • "`true'"
  209         | • "`undef'"
  210         | • "`when'"
  211         | • "`yield'"
  212         | • "`if'"
  213         | • "`unless'"
  214         | • "`while'"
  215         | • "`until'"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"

    "`class'"                   shift, and go to state 129
    "`module'"                  shift, and go to state 130
    "`def'"                     shift, and go to state 131
    "`undef'"                   shift, and go to state 132
    "`begin'"                   shift, and go to state 133
    "`rescue'"                  shift, and go to state 134
    "`ensure'"                  shift, and go to state 135
    "`end'"                     shift, and go to state 136
    "`if'"                      shift, and go to state 137
    "`unless'"                  shift, and go to state 138
    "`then'"                    shift, and go to state 139
    "`elsif'"                   shift, and go to state 140
    "`else'"                    shift, and go to state 141
    "`case'"                    shift, and go to state 142
    "`when'"                    shift, and go to state 143
    "`while'"                   shift, and go to state 144
    "`until'"                   shift, and go to state 145
    "`for'"                     shift, and go to state 146
    "`break'"                   shift, and go to state 147
    "`next'"                    shift, and go to state 148
    "`redo'"                    shift, and go to state 149
    "`retry'"                   shift, and go to state 150
    "`in'"                      shift, and go to state 151
    "`do'"                      shift, and go to state 152
    "`return'"                  shift, and go to state 153
    "`yield'"                   shift, and go to state 154
    "`super'"                   shift, and go to state 155
    "`self'"                    shift, and go to state 156
    "`nil'"                     shift, and go to state 157
    "`true'"                    shift, and go to state 158
    "`false'"                   shift, and go to state 159
    "`and'"                     shift, and go to state 160
    "`or'"                      shift, and go to state 161
    "`not'"                     shift, and go to state 162
    "`alias'"                   shift, and go to state 163
    "`defined?'"                shift, and go to state 164
    "`BEGIN'"                   shift, and go to state 165
    "`END'"                     shift, and go to state 166
    "`__LINE__'"                shift, and go to state 167
    "`__FILE__'"                shift, and go to state 168
    "`__ENCODING__'"            shift, and go to state 169
    "local variable or method"  shift, and go to state 170
    "method"                    shift, and go to state 171
    "constant"                  shift, and go to state 172
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    "symbol literal"            shift, and go to state 59
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202

    fname       go to state 203
    fitem       go to state 204
    undef_list  go to state 205
    op          go to state 206
    reswords    go to state 207
    symbol      go to state 208
    ssym        go to state 117
    dsym        go to state 118


State 9

  369 k_begin: "`begin'" •

    $default  reduce using rule 369 (k_begin)


State 10

  370 k_if: "`if'" •

    $default  reduce using rule 370 (k_if)


State 11

  371 k_unless: "`unless'" •

    $default  reduce using rule 371 (k_unless)


State 12

  374 k_case: "`case'" •

    $default  reduce using rule 374 (k_case)


State 13

  372 k_while: "`while'" •

    $default  reduce using rule 372 (k_while)


State 14

  373 k_until: "`until'" •

    $default  reduce using rule 373 (k_until)


State 15

  375 k_for: "`for'" •

    $default  reduce using rule 375 (k_for)


State 16

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   90        | "`break'" • call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  288 call_args: • command
  289          | • args opt_block_arg
  290          | • assocs opt_block_arg
  291          | • args ',' assocs opt_block_arg
  292          | • block_arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  364        | "`break'" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 213
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 364 (primary)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 80
    command           go to state 220
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 223
    call_args         go to state 224
    block_arg         go to state 225
    args              go to state 226
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 232
    assoc             go to state 233
    operation         go to state 127


State 17

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   91        | "`next'" • call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  288 call_args: • command
  289          | • args opt_block_arg
  290          | • assocs opt_block_arg
  291          | • args ',' assocs opt_block_arg
  292          | • block_arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  365        | "`next'" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 213
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 365 (primary)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 80
    command           go to state 220
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 223
    call_args         go to state 234
    block_arg         go to state 225
    args              go to state 226
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 232
    assoc             go to state 233
    operation         go to state 127


State 18

  366 primary: "`redo'" •

    $default  reduce using rule 366 (primary)


State 19

  367 primary: "`retry'" •

    $default  reduce using rule 367 (primary)


State 20

  388 k_return: "`return'" •

    $default  reduce using rule 388 (k_return)


State 21

   88 command: "`yield'" • command_args
  293 $@14: ε •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~']
  294 command_args: • $@14 call_args
  333 primary: "`yield'" • '(' call_args rparen
  334        | "`yield'" • '(' rparen
  335        | "`yield'" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']

    '('  shift, and go to state 235

    "end-of-input"        reduce using rule 335 (primary)
    "`rescue'"            reduce using rule 335 (primary)
    "`ensure'"            reduce using rule 335 (primary)
    "`end'"               reduce using rule 335 (primary)
    "`then'"              reduce using rule 335 (primary)
    "`elsif'"             reduce using rule 335 (primary)
    "`else'"              reduce using rule 335 (primary)
    "`when'"              reduce using rule 335 (primary)
    "`in'"                reduce using rule 335 (primary)
    "`do' for condition"  reduce using rule 335 (primary)
    "`do' for block"      reduce using rule 335 (primary)
    "`and'"               reduce using rule 335 (primary)
    "`or'"                reduce using rule 335 (primary)
    "`if' modifier"       reduce using rule 335 (primary)
    "`unless' modifier"   reduce using rule 335 (primary)
    "`while' modifier"    reduce using rule 335 (primary)
    "`until' modifier"    reduce using rule 335 (primary)
    "`rescue' modifier"   reduce using rule 335 (primary)
    "dummy end"           reduce using rule 335 (primary)
    '.'                   reduce using rule 335 (primary)
    "**"                  reduce using rule 335 (primary)
    "<=>"                 reduce using rule 335 (primary)
    "=="                  reduce using rule 335 (primary)
    "==="                 reduce using rule 335 (primary)
    "!="                  reduce using rule 335 (primary)
    ">="                  reduce using rule 335 (primary)
    "<="                  reduce using rule 335 (primary)
    "&&"                  reduce using rule 335 (primary)
    "||"                  reduce using rule 335 (primary)
    "=~"                  reduce using rule 335 (primary)
    "!~"                  reduce using rule 335 (primary)
    ".."                  reduce using rule 335 (primary)
    "..."                 reduce using rule 335 (primary)
    "<<"                  reduce using rule 335 (primary)
    ">>"                  reduce using rule 335 (primary)
    "&."                  reduce using rule 335 (primary)
    "::"                  reduce using rule 335 (primary)
    "=>"                  reduce using rule 335 (primary)
    "{ arg"               reduce using rule 335 (primary)
    "'}'"                 reduce using rule 335 (primary)
    '?'                   reduce using rule 335 (primary)
    '>'                   reduce using rule 335 (primary)
    '<'                   reduce using rule 335 (primary)
    '|'                   reduce using rule 335 (primary)
    '^'                   reduce using rule 335 (primary)
    '&'                   reduce using rule 335 (primary)
    '+'                   reduce using rule 335 (primary)
    '-'                   reduce using rule 335 (primary)
    '*'                   reduce using rule 335 (primary)
    '/'                   reduce using rule 335 (primary)
    '%'                   reduce using rule 335 (primary)
    '}'                   reduce using rule 335 (primary)
    '['                   reduce using rule 335 (primary)
    ','                   reduce using rule 335 (primary)
    ')'                   reduce using rule 335 (primary)
    ']'                   reduce using rule 335 (primary)
    ';'                   reduce using rule 335 (primary)
    '\n'                  reduce using rule 335 (primary)
    $default              reduce using rule 293 ($@14)

    command_args  go to state 236
    $@14          go to state 237


State 22

   87 command: "`super'" • command_args
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  293 $@14: ε •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~']
  294 command_args: • $@14 call_args
  468 method_call: "`super'" • paren_args
  469            | "`super'" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '{', '}', '[', ',', ')', ']', ';', '\n']

    '('  shift, and go to state 238

    "end-of-input"        reduce using rule 469 (method_call)
    "`rescue'"            reduce using rule 469 (method_call)
    "`ensure'"            reduce using rule 469 (method_call)
    "`end'"               reduce using rule 469 (method_call)
    "`then'"              reduce using rule 469 (method_call)
    "`elsif'"             reduce using rule 469 (method_call)
    "`else'"              reduce using rule 469 (method_call)
    "`when'"              reduce using rule 469 (method_call)
    "`in'"                reduce using rule 469 (method_call)
    "`do'"                reduce using rule 469 (method_call)
    "`do' for condition"  reduce using rule 469 (method_call)
    "`do' for block"      reduce using rule 469 (method_call)
    "`and'"               reduce using rule 469 (method_call)
    "`or'"                reduce using rule 469 (method_call)
    "`if' modifier"       reduce using rule 469 (method_call)
    "`unless' modifier"   reduce using rule 469 (method_call)
    "`while' modifier"    reduce using rule 469 (method_call)
    "`until' modifier"    reduce using rule 469 (method_call)
    "`rescue' modifier"   reduce using rule 469 (method_call)
    "dummy end"           reduce using rule 469 (method_call)
    '.'                   reduce using rule 469 (method_call)
    "**"                  reduce using rule 469 (method_call)
    "<=>"                 reduce using rule 469 (method_call)
    "=="                  reduce using rule 469 (method_call)
    "==="                 reduce using rule 469 (method_call)
    "!="                  reduce using rule 469 (method_call)
    ">="                  reduce using rule 469 (method_call)
    "<="                  reduce using rule 469 (method_call)
    "&&"                  reduce using rule 469 (method_call)
    "||"                  reduce using rule 469 (method_call)
    "=~"                  reduce using rule 469 (method_call)
    "!~"                  reduce using rule 469 (method_call)
    ".."                  reduce using rule 469 (method_call)
    "..."                 reduce using rule 469 (method_call)
    "<<"                  reduce using rule 469 (method_call)
    ">>"                  reduce using rule 469 (method_call)
    "&."                  reduce using rule 469 (method_call)
    "::"                  reduce using rule 469 (method_call)
    "=>"                  reduce using rule 469 (method_call)
    "{ arg"               reduce using rule 469 (method_call)
    "'}'"                 reduce using rule 469 (method_call)
    '?'                   reduce using rule 469 (method_call)
    '>'                   reduce using rule 469 (method_call)
    '<'                   reduce using rule 469 (method_call)
    '|'                   reduce using rule 469 (method_call)
    '^'                   reduce using rule 469 (method_call)
    '&'                   reduce using rule 469 (method_call)
    '+'                   reduce using rule 469 (method_call)
    '-'                   reduce using rule 469 (method_call)
    '*'                   reduce using rule 469 (method_call)
    '/'                   reduce using rule 469 (method_call)
    '%'                   reduce using rule 469 (method_call)
    '{'                   reduce using rule 469 (method_call)
    '}'                   reduce using rule 469 (method_call)
    '['                   reduce using rule 469 (method_call)
    ','                   reduce using rule 469 (method_call)
    ')'                   reduce using rule 469 (method_call)
    ']'                   reduce using rule 469 (method_call)
    ';'                   reduce using rule 469 (method_call)
    '\n'                  reduce using rule 469 (method_call)
    $default              reduce using rule 293 ($@14)

    paren_args    go to state 239
    command_args  go to state 240
    $@14          go to state 237


State 23

  656 keyword_variable: "`self'" •

    $default  reduce using rule 656 (keyword_variable)


State 24

  655 keyword_variable: "`nil'" •

    $default  reduce using rule 655 (keyword_variable)


State 25

  657 keyword_variable: "`true'" •

    $default  reduce using rule 657 (keyword_variable)


State 26

  658 keyword_variable: "`false'" •

    $default  reduce using rule 658 (keyword_variable)


State 27

   57 expr: "`not'" • opt_nl expr
  338 primary: "`not'" • '(' expr rparen
  339        | "`not'" • '(' rparen
  770 opt_nl: ε •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~']
  771       | • '\n'

    '('   shift, and go to state 241
    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 243


State 28

   21 stmt: "`alias'" • fitem $@4 fitem
   22     | "`alias'" • "global variable" "global variable"
   23     | "`alias'" • "global variable" "back reference"
   24     | "`alias'" • "global variable" "numbered reference"
  135 fname: • "local variable or method"
  136      | • "constant"
  137      | • "method"
  138      | • op
  139      | • reswords
  140 fitem: • fname
  141      | • symbol
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  175 reswords: • "`__LINE__'"
  176         | • "`__FILE__'"
  177         | • "`__ENCODING__'"
  178         | • "`BEGIN'"
  179         | • "`END'"
  180         | • "`alias'"
  181         | • "`and'"
  182         | • "`begin'"
  183         | • "`break'"
  184         | • "`case'"
  185         | • "`class'"
  186         | • "`def'"
  187         | • "`defined?'"
  188         | • "`do'"
  189         | • "`else'"
  190         | • "`elsif'"
  191         | • "`end'"
  192         | • "`ensure'"
  193         | • "`false'"
  194         | • "`for'"
  195         | • "`in'"
  196         | • "`module'"
  197         | • "`next'"
  198         | • "`nil'"
  199         | • "`not'"
  200         | • "`or'"
  201         | • "`redo'"
  202         | • "`rescue'"
  203         | • "`retry'"
  204         | • "`return'"
  205         | • "`self'"
  206         | • "`super'"
  207         | • "`then'"
  208         | • "`true'"
  209         | • "`undef'"
  210         | • "`when'"
  211         | • "`yield'"
  212         | • "`if'"
  213         | • "`unless'"
  214         | • "`while'"
  215         | • "`until'"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"

    "`class'"                   shift, and go to state 129
    "`module'"                  shift, and go to state 130
    "`def'"                     shift, and go to state 131
    "`undef'"                   shift, and go to state 132
    "`begin'"                   shift, and go to state 133
    "`rescue'"                  shift, and go to state 134
    "`ensure'"                  shift, and go to state 135
    "`end'"                     shift, and go to state 136
    "`if'"                      shift, and go to state 137
    "`unless'"                  shift, and go to state 138
    "`then'"                    shift, and go to state 139
    "`elsif'"                   shift, and go to state 140
    "`else'"                    shift, and go to state 141
    "`case'"                    shift, and go to state 142
    "`when'"                    shift, and go to state 143
    "`while'"                   shift, and go to state 144
    "`until'"                   shift, and go to state 145
    "`for'"                     shift, and go to state 146
    "`break'"                   shift, and go to state 147
    "`next'"                    shift, and go to state 148
    "`redo'"                    shift, and go to state 149
    "`retry'"                   shift, and go to state 150
    "`in'"                      shift, and go to state 151
    "`do'"                      shift, and go to state 152
    "`return'"                  shift, and go to state 153
    "`yield'"                   shift, and go to state 154
    "`super'"                   shift, and go to state 155
    "`self'"                    shift, and go to state 156
    "`nil'"                     shift, and go to state 157
    "`true'"                    shift, and go to state 158
    "`false'"                   shift, and go to state 159
    "`and'"                     shift, and go to state 160
    "`or'"                      shift, and go to state 161
    "`not'"                     shift, and go to state 162
    "`alias'"                   shift, and go to state 163
    "`defined?'"                shift, and go to state 164
    "`BEGIN'"                   shift, and go to state 165
    "`END'"                     shift, and go to state 166
    "`__LINE__'"                shift, and go to state 167
    "`__FILE__'"                shift, and go to state 168
    "`__ENCODING__'"            shift, and go to state 169
    "local variable or method"  shift, and go to state 170
    "method"                    shift, and go to state 171
    "global variable"           shift, and go to state 244
    "constant"                  shift, and go to state 172
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    "symbol literal"            shift, and go to state 59
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202

    fname     go to state 203
    fitem     go to state 245
    op        go to state 206
    reswords  go to state 207
    symbol    go to state 208
    ssym      go to state 117
    dsym      go to state 118


State 29

  257 arg: "`defined?'" • opt_nl $@13 arg
  337 primary: "`defined?'" • opt_nl '(' $@18 expr rparen
  770 opt_nl: ε •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', '(']
  771       | • '\n'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 246


State 30

    8 top_stmt: "`BEGIN'" • begin_block
    9 begin_block: • '{' top_compstmt '}'

    '{'  shift, and go to state 247

    begin_block  go to state 248


State 31

   31 stmt: "`END'" • '{' compstmt '}'

    '{'  shift, and go to state 249


State 32

  660 keyword_variable: "`__LINE__'" •

    $default  reduce using rule 660 (keyword_variable)


State 33

  659 keyword_variable: "`__FILE__'" •

    $default  reduce using rule 659 (keyword_variable)


State 34

  661 keyword_variable: "`__ENCODING__'" •

    $default  reduce using rule 661 (keyword_variable)


State 35

  652 user_variable: "local variable or method" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "operator-assignment", "=>", "{ arg", "'}'", tLAMBEG, '=', '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']
  754 operation: "local variable or method" •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`do'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', '{', '(']

    "end-of-input"         reduce using rule 652 (user_variable)
    "`rescue'"             reduce using rule 652 (user_variable)
    "`ensure'"             reduce using rule 652 (user_variable)
    "`end'"                reduce using rule 652 (user_variable)
    "`then'"               reduce using rule 652 (user_variable)
    "`elsif'"              reduce using rule 652 (user_variable)
    "`else'"               reduce using rule 652 (user_variable)
    "`when'"               reduce using rule 652 (user_variable)
    "`in'"                 reduce using rule 652 (user_variable)
    "`do' for condition"   reduce using rule 652 (user_variable)
    "`do' for block"       reduce using rule 652 (user_variable)
    "`do' for lambda"      reduce using rule 652 (user_variable)
    "`and'"                reduce using rule 652 (user_variable)
    "`or'"                 reduce using rule 652 (user_variable)
    "`if' modifier"        reduce using rule 652 (user_variable)
    "`unless' modifier"    reduce using rule 652 (user_variable)
    "`while' modifier"     reduce using rule 652 (user_variable)
    "`until' modifier"     reduce using rule 652 (user_variable)
    "`rescue' modifier"    reduce using rule 652 (user_variable)
    "dummy end"            reduce using rule 652 (user_variable)
    '.'                    reduce using rule 652 (user_variable)
    "**"                   reduce using rule 652 (user_variable)
    "<=>"                  reduce using rule 652 (user_variable)
    "=="                   reduce using rule 652 (user_variable)
    "==="                  reduce using rule 652 (user_variable)
    "!="                   reduce using rule 652 (user_variable)
    ">="                   reduce using rule 652 (user_variable)
    "<="                   reduce using rule 652 (user_variable)
    "&&"                   reduce using rule 652 (user_variable)
    "||"                   reduce using rule 652 (user_variable)
    "=~"                   reduce using rule 652 (user_variable)
    "!~"                   reduce using rule 652 (user_variable)
    ".."                   reduce using rule 652 (user_variable)
    "..."                  reduce using rule 652 (user_variable)
    "<<"                   reduce using rule 652 (user_variable)
    ">>"                   reduce using rule 652 (user_variable)
    "&."                   reduce using rule 652 (user_variable)
    "::"                   reduce using rule 652 (user_variable)
    "operator-assignment"  reduce using rule 652 (user_variable)
    "=>"                   reduce using rule 652 (user_variable)
    "{ arg"                reduce using rule 652 (user_variable)
    "'}'"                  reduce using rule 652 (user_variable)
    tLAMBEG                reduce using rule 652 (user_variable)
    '='                    reduce using rule 652 (user_variable)
    '?'                    reduce using rule 652 (user_variable)
    ':'                    reduce using rule 652 (user_variable)
    '>'                    reduce using rule 652 (user_variable)
    '<'                    reduce using rule 652 (user_variable)
    '|'                    reduce using rule 652 (user_variable)
    '^'                    reduce using rule 652 (user_variable)
    '&'                    reduce using rule 652 (user_variable)
    '+'                    reduce using rule 652 (user_variable)
    '-'                    reduce using rule 652 (user_variable)
    '*'                    reduce using rule 652 (user_variable)
    '/'                    reduce using rule 652 (user_variable)
    '%'                    reduce using rule 652 (user_variable)
    '}'                    reduce using rule 652 (user_variable)
    '['                    reduce using rule 652 (user_variable)
    ','                    reduce using rule 652 (user_variable)
    ')'                    reduce using rule 652 (user_variable)
    ']'                    reduce using rule 652 (user_variable)
    ';'                    reduce using rule 652 (user_variable)
    '\n'                   reduce using rule 652 (user_variable)
    $default               reduce using rule 754 (operation)


State 36

  320 primary: "method" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']
  756 operation: "method" •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`do'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', '{', '(']

    "end-of-input"        reduce using rule 320 (primary)
    "`rescue'"            reduce using rule 320 (primary)
    "`ensure'"            reduce using rule 320 (primary)
    "`end'"               reduce using rule 320 (primary)
    "`then'"              reduce using rule 320 (primary)
    "`elsif'"             reduce using rule 320 (primary)
    "`else'"              reduce using rule 320 (primary)
    "`when'"              reduce using rule 320 (primary)
    "`in'"                reduce using rule 320 (primary)
    "`do' for condition"  reduce using rule 320 (primary)
    "`do' for block"      reduce using rule 320 (primary)
    "`do' for lambda"     reduce using rule 320 (primary)
    "`and'"               reduce using rule 320 (primary)
    "`or'"                reduce using rule 320 (primary)
    "`if' modifier"       reduce using rule 320 (primary)
    "`unless' modifier"   reduce using rule 320 (primary)
    "`while' modifier"    reduce using rule 320 (primary)
    "`until' modifier"    reduce using rule 320 (primary)
    "`rescue' modifier"   reduce using rule 320 (primary)
    "dummy end"           reduce using rule 320 (primary)
    '.'                   reduce using rule 320 (primary)
    "**"                  reduce using rule 320 (primary)
    "<=>"                 reduce using rule 320 (primary)
    "=="                  reduce using rule 320 (primary)
    "==="                 reduce using rule 320 (primary)
    "!="                  reduce using rule 320 (primary)
    ">="                  reduce using rule 320 (primary)
    "<="                  reduce using rule 320 (primary)
    "&&"                  reduce using rule 320 (primary)
    "||"                  reduce using rule 320 (primary)
    "=~"                  reduce using rule 320 (primary)
    "!~"                  reduce using rule 320 (primary)
    ".."                  reduce using rule 320 (primary)
    "..."                 reduce using rule 320 (primary)
    "<<"                  reduce using rule 320 (primary)
    ">>"                  reduce using rule 320 (primary)
    "&."                  reduce using rule 320 (primary)
    "::"                  reduce using rule 320 (primary)
    "=>"                  reduce using rule 320 (primary)
    "{ arg"               reduce using rule 320 (primary)
    "'}'"                 reduce using rule 320 (primary)
    tLAMBEG               reduce using rule 320 (primary)
    '?'                   reduce using rule 320 (primary)
    ':'                   reduce using rule 320 (primary)
    '>'                   reduce using rule 320 (primary)
    '<'                   reduce using rule 320 (primary)
    '|'                   reduce using rule 320 (primary)
    '^'                   reduce using rule 320 (primary)
    '&'                   reduce using rule 320 (primary)
    '+'                   reduce using rule 320 (primary)
    '-'                   reduce using rule 320 (primary)
    '*'                   reduce using rule 320 (primary)
    '/'                   reduce using rule 320 (primary)
    '%'                   reduce using rule 320 (primary)
    '}'                   reduce using rule 320 (primary)
    '['                   reduce using rule 320 (primary)
    ','                   reduce using rule 320 (primary)
    ')'                   reduce using rule 320 (primary)
    ']'                   reduce using rule 320 (primary)
    ';'                   reduce using rule 320 (primary)
    '\n'                  reduce using rule 320 (primary)
    $default              reduce using rule 756 (operation)


State 37

  650 nonlocal_var: "global variable" •

    $default  reduce using rule 650 (nonlocal_var)


State 38

  649 nonlocal_var: "instance variable" •

    $default  reduce using rule 649 (nonlocal_var)


State 39

  653 user_variable: "constant" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "operator-assignment", "=>", "{ arg", "'}'", tLAMBEG, '=', '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']
  755 operation: "constant" •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`do'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', '{', '(']

    "end-of-input"         reduce using rule 653 (user_variable)
    "`rescue'"             reduce using rule 653 (user_variable)
    "`ensure'"             reduce using rule 653 (user_variable)
    "`end'"                reduce using rule 653 (user_variable)
    "`then'"               reduce using rule 653 (user_variable)
    "`elsif'"              reduce using rule 653 (user_variable)
    "`else'"               reduce using rule 653 (user_variable)
    "`when'"               reduce using rule 653 (user_variable)
    "`in'"                 reduce using rule 653 (user_variable)
    "`do' for condition"   reduce using rule 653 (user_variable)
    "`do' for block"       reduce using rule 653 (user_variable)
    "`do' for lambda"      reduce using rule 653 (user_variable)
    "`and'"                reduce using rule 653 (user_variable)
    "`or'"                 reduce using rule 653 (user_variable)
    "`if' modifier"        reduce using rule 653 (user_variable)
    "`unless' modifier"    reduce using rule 653 (user_variable)
    "`while' modifier"     reduce using rule 653 (user_variable)
    "`until' modifier"     reduce using rule 653 (user_variable)
    "`rescue' modifier"    reduce using rule 653 (user_variable)
    "dummy end"            reduce using rule 653 (user_variable)
    '.'                    reduce using rule 653 (user_variable)
    "**"                   reduce using rule 653 (user_variable)
    "<=>"                  reduce using rule 653 (user_variable)
    "=="                   reduce using rule 653 (user_variable)
    "==="                  reduce using rule 653 (user_variable)
    "!="                   reduce using rule 653 (user_variable)
    ">="                   reduce using rule 653 (user_variable)
    "<="                   reduce using rule 653 (user_variable)
    "&&"                   reduce using rule 653 (user_variable)
    "||"                   reduce using rule 653 (user_variable)
    "=~"                   reduce using rule 653 (user_variable)
    "!~"                   reduce using rule 653 (user_variable)
    ".."                   reduce using rule 653 (user_variable)
    "..."                  reduce using rule 653 (user_variable)
    "<<"                   reduce using rule 653 (user_variable)
    ">>"                   reduce using rule 653 (user_variable)
    "&."                   reduce using rule 653 (user_variable)
    "::"                   reduce using rule 653 (user_variable)
    "operator-assignment"  reduce using rule 653 (user_variable)
    "=>"                   reduce using rule 653 (user_variable)
    "{ arg"                reduce using rule 653 (user_variable)
    "'}'"                  reduce using rule 653 (user_variable)
    tLAMBEG                reduce using rule 653 (user_variable)
    '='                    reduce using rule 653 (user_variable)
    '?'                    reduce using rule 653 (user_variable)
    ':'                    reduce using rule 653 (user_variable)
    '>'                    reduce using rule 653 (user_variable)
    '<'                    reduce using rule 653 (user_variable)
    '|'                    reduce using rule 653 (user_variable)
    '^'                    reduce using rule 653 (user_variable)
    '&'                    reduce using rule 653 (user_variable)
    '+'                    reduce using rule 653 (user_variable)
    '-'                    reduce using rule 653 (user_variable)
    '*'                    reduce using rule 653 (user_variable)
    '/'                    reduce using rule 653 (user_variable)
    '%'                    reduce using rule 653 (user_variable)
    '}'                    reduce using rule 653 (user_variable)
    '['                    reduce using rule 653 (user_variable)
    ','                    reduce using rule 653 (user_variable)
    ')'                    reduce using rule 653 (user_variable)
    ']'                    reduce using rule 653 (user_variable)
    ';'                    reduce using rule 653 (user_variable)
    '\n'                   reduce using rule 653 (user_variable)
    $default               reduce using rule 755 (operation)


State 40

  651 nonlocal_var: "class variable" •

    $default  reduce using rule 651 (nonlocal_var)


State 41

  645 simple_numeric: "integer literal" •

    $default  reduce using rule 645 (simple_numeric)


State 42

  646 simple_numeric: "float literal" •

    $default  reduce using rule 646 (simple_numeric)


State 43

  647 simple_numeric: "rational literal" •

    $default  reduce using rule 647 (simple_numeric)


State 44

  648 simple_numeric: "imaginary literal" •

    $default  reduce using rule 648 (simple_numeric)


State 45

  598 string: "char literal" •

    $default  reduce using rule 598 (string)


State 46

  666 backref: "numbered reference" •

    $default  reduce using rule 666 (backref)


State 47

  667 backref: "back reference" •

    $default  reduce using rule 667 (backref)


State 48

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  238    | "unary+" • arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 255
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 49

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  239    | "unary-" • arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 258
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 50

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  229    | "(.." • arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 259
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 51

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  230    | "(..." • arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 260
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 52

  119 mlhs_node: ":: at EXPR_BEG" • "constant"
  128 lhs: ":: at EXPR_BEG" • "constant"
  223 arg: ":: at EXPR_BEG" • "constant" "operator-assignment" lex_ctxt arg_rhs
  329 primary: ":: at EXPR_BEG" • "constant"

    "constant"  shift, and go to state 261


State 53

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   93     | "(" • mlhs_inner rparen
   94 mlhs_inner: • mlhs_basic
   95           | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  107          | "(" • mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  327        | "(" • compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  [')', ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 263
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    ')'   reduce using rule 781 (none)
    ';'   reduce using rule 781 (none)
    '\n'  reduce using rule 781 (none)

    compstmt          go to state 264
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_inner        go to state 268
    mlhs_basic        go to state 269
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 54

   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  323 $@16: ε •  [')', '\n']
  324 primary: • "( arg" $@16 rparen
  324        | "( arg" • $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  326        | "( arg" • stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    ')'   reduce using rule 323 ($@16)
    '\n'  reduce using rule 323 ($@16)

    stmt              go to state 271
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    $@16              go to state 272
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127


State 55

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  272 aref_args: • none
  273          | • args trailer
  274          | • args ',' assocs trailer
  275          | • assocs trailer
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  330        | "[" • aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  [']']

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 213
    "**arg"                     shift, and go to state 214
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 781 (none)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 223
    aref_args         go to state 273
    args              go to state 274
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 275
    assoc             go to state 233
    operation         go to state 127
    none              go to state 276


State 56

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  331        | "{" • assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  744 assoc_list: • none
  745           | • assocs trailer
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ['}']

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "**arg"                     shift, and go to state 214
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 781 (none)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 277
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assoc_list        go to state 278
    assocs            go to state 279
    assoc             go to state 233
    operation         go to state 127
    none              go to state 280


State 57

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  102 mlhs_basic: "*" • mlhs_node
  103           | "*" • mlhs_node ',' mlhs_post
  104           | "*" •  ["`in'", '=', ')', '\n']
  105           | "*" • ',' mlhs_post
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 281
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    ":: at EXPR_BEG"            shift, and go to state 282
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 283
    ','                         shift, and go to state 284

    $default  reduce using rule 104 (mlhs_basic)

    defn_head         go to state 285
    defs_head         go to state 286
    fcall             go to state 254
    mlhs_node         go to state 287
    primary           go to state 288
    primary_value     go to state 289
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 290
    keyword_variable  go to state 291
    var_ref           go to state 124
    backref           go to state 292
    operation         go to state 127


State 58

  447 @27: ε •
  451 lambda: "->" • @27 @28 @29 f_larglist $@30 lambda_body

    $default  reduce using rule 447 (@27)

    @27  go to state 293


State 59

  135 fname: • "local variable or method"
  136      | • "constant"
  137      | • "method"
  138      | • op
  139      | • reswords
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  175 reswords: • "`__LINE__'"
  176         | • "`__FILE__'"
  177         | • "`__ENCODING__'"
  178         | • "`BEGIN'"
  179         | • "`END'"
  180         | • "`alias'"
  181         | • "`and'"
  182         | • "`begin'"
  183         | • "`break'"
  184         | • "`case'"
  185         | • "`class'"
  186         | • "`def'"
  187         | • "`defined?'"
  188         | • "`do'"
  189         | • "`else'"
  190         | • "`elsif'"
  191         | • "`end'"
  192         | • "`ensure'"
  193         | • "`false'"
  194         | • "`for'"
  195         | • "`in'"
  196         | • "`module'"
  197         | • "`next'"
  198         | • "`nil'"
  199         | • "`not'"
  200         | • "`or'"
  201         | • "`redo'"
  202         | • "`rescue'"
  203         | • "`retry'"
  204         | • "`return'"
  205         | • "`self'"
  206         | • "`super'"
  207         | • "`then'"
  208         | • "`true'"
  209         | • "`undef'"
  210         | • "`when'"
  211         | • "`yield'"
  212         | • "`if'"
  213         | • "`unless'"
  214         | • "`while'"
  215         | • "`until'"
  618 string_contents: ε •  ["literal content", "terminator", tSTRING_DBEG, tSTRING_DVAR]
  619                | • string_contents string_content
  639 ssym: "symbol literal" • sym
  640 sym: • fname
  641    | • nonlocal_var
  642 dsym: "symbol literal" • string_contents "terminator"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"

    "`class'"                   shift, and go to state 129
    "`module'"                  shift, and go to state 130
    "`def'"                     shift, and go to state 131
    "`undef'"                   shift, and go to state 132
    "`begin'"                   shift, and go to state 133
    "`rescue'"                  shift, and go to state 134
    "`ensure'"                  shift, and go to state 135
    "`end'"                     shift, and go to state 136
    "`if'"                      shift, and go to state 137
    "`unless'"                  shift, and go to state 138
    "`then'"                    shift, and go to state 139
    "`elsif'"                   shift, and go to state 140
    "`else'"                    shift, and go to state 141
    "`case'"                    shift, and go to state 142
    "`when'"                    shift, and go to state 143
    "`while'"                   shift, and go to state 144
    "`until'"                   shift, and go to state 145
    "`for'"                     shift, and go to state 146
    "`break'"                   shift, and go to state 147
    "`next'"                    shift, and go to state 148
    "`redo'"                    shift, and go to state 149
    "`retry'"                   shift, and go to state 150
    "`in'"                      shift, and go to state 151
    "`do'"                      shift, and go to state 152
    "`return'"                  shift, and go to state 153
    "`yield'"                   shift, and go to state 154
    "`super'"                   shift, and go to state 155
    "`self'"                    shift, and go to state 156
    "`nil'"                     shift, and go to state 157
    "`true'"                    shift, and go to state 158
    "`false'"                   shift, and go to state 159
    "`and'"                     shift, and go to state 160
    "`or'"                      shift, and go to state 161
    "`not'"                     shift, and go to state 162
    "`alias'"                   shift, and go to state 163
    "`defined?'"                shift, and go to state 164
    "`BEGIN'"                   shift, and go to state 165
    "`END'"                     shift, and go to state 166
    "`__LINE__'"                shift, and go to state 167
    "`__FILE__'"                shift, and go to state 168
    "`__ENCODING__'"            shift, and go to state 169
    "local variable or method"  shift, and go to state 170
    "method"                    shift, and go to state 171
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 172
    "class variable"            shift, and go to state 40
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202

    $default  reduce using rule 618 (string_contents)

    fname            go to state 294
    op               go to state 206
    reswords         go to state 207
    string_contents  go to state 295
    sym              go to state 296
    nonlocal_var     go to state 297


State 60

  601 string1: "string literal" • string_contents "terminator"
  618 string_contents: ε •
  619                | • string_contents string_content

    $default  reduce using rule 618 (string_contents)

    string_contents  go to state 298


State 61

  602 xstring: "backtick literal" • xstring_contents "terminator"
  620 xstring_contents: ε •
  621                 | • xstring_contents string_content

    $default  reduce using rule 620 (xstring_contents)

    xstring_contents  go to state 299


State 62

  603 regexp: "regexp literal" • regexp_contents tREGEXP_END
  622 regexp_contents: ε •
  623                | • regexp_contents string_content

    $default  reduce using rule 622 (regexp_contents)

    regexp_contents  go to state 300


State 63

  604 words: "word list" • ' ' word_list "terminator"

    ' '  shift, and go to state 301


State 64

  612 qwords: "verbatim word list" • ' ' qword_list "terminator"

    ' '  shift, and go to state 302


State 65

  609 symbols: "symbol list" • ' ' symbol_list "terminator"

    ' '  shift, and go to state 303


State 66

  613 qsymbols: "verbatim symbol list" • ' ' qsym_list "terminator"

    ' '  shift, and go to state 304


State 67

  237 arg: tUMINUS_NUM • simple_numeric "**" arg
  644 numeric: tUMINUS_NUM • simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"

    "integer literal"    shift, and go to state 41
    "float literal"      shift, and go to state 42
    "rational literal"   shift, and go to state 43
    "imaginary literal"  shift, and go to state 44

    simple_numeric  go to state 305


State 68

   58 expr: '!' • command_call
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  250    | '!' • arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    command_call      go to state 306
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 307
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 69

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  251    | '~' • arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 308
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 70

    2 program: $@1 top_compstmt •

    $default  reduce using rule 2 (program)


State 71

    3 top_compstmt: top_stmts • opt_terms
    6 top_stmts: top_stmts • terms top_stmt
  768 opt_terms: ε •  ["end-of-input", '}']
  769          | • terms
  777 term: • ';'
  778     | • '\n'
  779 terms: • term
  780      | • terms ';'

    ';'   shift, and go to state 309
    '\n'  shift, and go to state 310

    $default  reduce using rule 768 (opt_terms)

    opt_terms  go to state 311
    term       go to state 312
    terms      go to state 313


State 72

    5 top_stmts: top_stmt •

    $default  reduce using rule 5 (top_stmts)


State 73

    7 top_stmt: stmt •  ["end-of-input", '}', ';', '\n']
   26 stmt: stmt • "`if' modifier" expr_value
   27     | stmt • "`unless' modifier" expr_value
   28     | stmt • "`while' modifier" expr_value
   29     | stmt • "`until' modifier" expr_value
   30     | stmt • "`rescue' modifier" stmt

    "`if' modifier"      shift, and go to state 314
    "`unless' modifier"  shift, and go to state 315
    "`while' modifier"   shift, and go to state 316
    "`until' modifier"   shift, and go to state 317
    "`rescue' modifier"  shift, and go to state 318

    $default  reduce using rule 7 (top_stmt)


State 74

   32 stmt: command_asgn •

    $default  reduce using rule 32 (stmt)


State 75

   37 stmt: expr •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
   55 expr: expr • "`and'" expr
   56     | expr • "`or'" expr

    "`and'"  shift, and go to state 319
    "`or'"   shift, and go to state 320

    $default  reduce using rule 37 (stmt)


State 76

   46 command_asgn: defn_head • f_opt_paren_args '=' command
   47             | defn_head • f_opt_paren_args '=' command "`rescue' modifier" arg
  259 arg: defn_head • f_opt_paren_args '=' arg
  260    | defn_head • f_opt_paren_args '=' arg "`rescue' modifier" arg
  361 primary: defn_head • f_arglist $@24 bodystmt k_end
  671 f_opt_paren_args: • f_paren_args
  672                 | • none
  673 f_paren_args: • '(' f_args rparen
  674 f_arglist: • f_paren_args
  675 @50: ε •  ["local variable or method", "global variable", "instance variable", "constant", "class variable", "label", "**", "(...", "(", "*", "**arg", "&", '&', '*', ';', '\n']
  676 f_arglist: • @50 f_args term
  781 none: ε •  ['=']

    '('  shift, and go to state 321

    '='       reduce using rule 781 (none)
    $default  reduce using rule 675 (@50)

    f_opt_paren_args  go to state 322
    f_paren_args      go to state 323
    f_arglist         go to state 324
    @50               go to state 325
    none              go to state 326


State 77

   48 command_asgn: defs_head • f_opt_paren_args '=' command
   49             | defs_head • f_opt_paren_args '=' command "`rescue' modifier" arg
  261 arg: defs_head • f_opt_paren_args '=' arg
  262    | defs_head • f_opt_paren_args '=' arg "`rescue' modifier" arg
  363 primary: defs_head • f_arglist $@25 bodystmt k_end
  671 f_opt_paren_args: • f_paren_args
  672                 | • none
  673 f_paren_args: • '(' f_args rparen
  674 f_arglist: • f_paren_args
  675 @50: ε •  ["local variable or method", "global variable", "instance variable", "constant", "class variable", "label", "**", "(...", "(", "*", "**arg", "&", '&', '*', ';', '\n']
  676 f_arglist: • @50 f_args term
  781 none: ε •  ['=']

    '('  shift, and go to state 321

    '='       reduce using rule 781 (none)
    $default  reduce using rule 675 (@50)

    f_opt_paren_args  go to state 327
    f_paren_args      go to state 323
    f_arglist         go to state 328
    @50               go to state 325
    none              go to state 326


State 78

   54 expr: command_call •

    $default  reduce using rule 54 (expr)


State 79

   76 command_call: block_command •

    $default  reduce using rule 76 (command_call)


State 80

   81 command: fcall • command_args
   82        | fcall • command_args cmd_brace_block
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  293 $@14: ε •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~']
  294 command_args: • $@14 call_args
  340 primary: fcall • brace_block
  379 k_do: • "`do'"
  462 method_call: fcall • paren_args
  471 brace_block: • '{' brace_body '}'
  472            | • k_do do_body k_end

    "`do'"  shift, and go to state 329
    '{'     shift, and go to state 330
    '('     shift, and go to state 238

    $default  reduce using rule 293 ($@14)

    paren_args    go to state 331
    command_args  go to state 332
    $@14          go to state 237
    k_do          go to state 333
    brace_block   go to state 334


State 81

   75 command_call: command •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
  380 k_do_block: • "`do' for block"
  457 do_block: • k_do_block do_body k_end
  458 block_call: command • do_block

    "`do' for block"  shift, and go to state 335

    $default  reduce using rule 75 (command_call)

    k_do_block  go to state 336
    do_block    go to state 337


State 82

   33 stmt: mlhs • '=' lex_ctxt command_call
   35     | mlhs • '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | mlhs • '=' lex_ctxt mrhs_arg

    '='  shift, and go to state 338


State 83

   92 mlhs: mlhs_basic •

    $default  reduce using rule 92 (mlhs)


State 84

  108 mlhs_head: mlhs_item • ','

    ','  shift, and go to state 339


State 85

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   96 mlhs_basic: mlhs_head •  ["`in'", '=', ')', '\n']
   97           | mlhs_head • mlhs_item
   98           | mlhs_head • "*" mlhs_node
   99           | mlhs_head • "*" mlhs_node ',' mlhs_post
  100           | mlhs_head • "*"
  101           | mlhs_head • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  109 mlhs_head: mlhs_head • mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 281
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    ":: at EXPR_BEG"            shift, and go to state 282
    "("                         shift, and go to state 340
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 341
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 283

    $default  reduce using rule 96 (mlhs_basic)

    defn_head         go to state 285
    defs_head         go to state 286
    fcall             go to state 254
    mlhs_item         go to state 342
    mlhs_node         go to state 86
    primary           go to state 288
    primary_value     go to state 289
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 290
    keyword_variable  go to state 291
    var_ref           go to state 124
    backref           go to state 292
    operation         go to state 127


State 86

  106 mlhs_item: mlhs_node •

    $default  reduce using rule 106 (mlhs_item)


State 87

   34 stmt: lhs • '=' lex_ctxt mrhs
   39 command_asgn: lhs • '=' lex_ctxt command_rhs
  216 arg: lhs • '=' lex_ctxt arg_rhs

    '='  shift, and go to state 343


State 88

   61 expr: arg • "=>" @5 @6 p_top_expr_body
   64     | arg • "`in'" @7 @8 p_top_expr_body
   65     | arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "`in'"  shift, and go to state 344
    "**"    shift, and go to state 345
    "<=>"   shift, and go to state 346
    "=="    shift, and go to state 347
    "==="   shift, and go to state 348
    "!="    shift, and go to state 349
    ">="    shift, and go to state 350
    "<="    shift, and go to state 351
    "&&"    shift, and go to state 352
    "||"    shift, and go to state 353
    "=~"    shift, and go to state 354
    "!~"    shift, and go to state 355
    ".."    shift, and go to state 356
    "..."   shift, and go to state 357
    "<<"    shift, and go to state 358
    ">>"    shift, and go to state 359
    "=>"    shift, and go to state 360
    '?'     shift, and go to state 361
    '>'     shift, and go to state 362
    '<'     shift, and go to state 363
    '|'     shift, and go to state 364
    '^'     shift, and go to state 365
    '&'     shift, and go to state 366
    '+'     shift, and go to state 367
    '-'     shift, and go to state 368
    '*'     shift, and go to state 369
    '/'     shift, and go to state 370
    '%'     shift, and go to state 371

    $default  reduce using rule 65 (expr)

    relop  go to state 372

    Conflict between rule 65 and token "`in'" resolved as shift ("{ arg" < "`in'").


State 89

  244 arg: rel_expr •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "**", "<=>", "==", "===", "!=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '|', '^', '&', '+', '-', '*', '/', '%', '}', ',', ')', ']', ';', '\n']
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  269 rel_expr: rel_expr • relop arg

    ">="  shift, and go to state 350
    "<="  shift, and go to state 351
    '>'   shift, and go to state 362
    '<'   shift, and go to state 363

    $default  reduce using rule 244 (arg)

    relop  go to state 373

    Conflict between rule 244 and token ">=" resolved as shift ("<=>" < ">=").
    Conflict between rule 244 and token "<=" resolved as shift ("<=>" < "<=").
    Conflict between rule 244 and token '>' resolved as shift ("<=>" < '>').
    Conflict between rule 244 and token '<' resolved as shift ("<=>" < '<').


State 90

  263 arg: primary •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', ',', ')', ']', ';', '\n']
  368 primary_value: primary •  ['.', "&.", "::", '[']

    '.'       reduce using rule 368 (primary_value)
    "&."      reduce using rule 368 (primary_value)
    "::"      reduce using rule 368 (primary_value)
    '['       reduce using rule 368 (primary_value)
    $default  reduce using rule 263 (arg)


State 91

   41 command_asgn: primary_value • '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | primary_value • call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | primary_value • call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | primary_value • "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | primary_value • "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   83 command: primary_value • call_op operation2 command_args
   84        | primary_value • call_op operation2 command_args cmd_brace_block
   85        | primary_value • "::" operation2 command_args
   86        | primary_value • "::" operation2 command_args cmd_brace_block
  114 mlhs_node: primary_value • '[' opt_call_args rbracket
  115          | primary_value • call_op "local variable or method"
  116          | primary_value • "::" "local variable or method"
  117          | primary_value • call_op "constant"
  118          | primary_value • "::" "constant"
  123 lhs: primary_value • '[' opt_call_args rbracket
  124    | primary_value • call_op "local variable or method"
  125    | primary_value • "::" "local variable or method"
  126    | primary_value • call_op "constant"
  127    | primary_value • "::" "constant"
  218 arg: primary_value • '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | primary_value • call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | primary_value • call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | primary_value • "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | primary_value • "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  328 primary: primary_value • "::" "constant"
  463 method_call: primary_value • call_op operation2 opt_paren_args
  464            | primary_value • "::" operation2 paren_args
  465            | primary_value • "::" operation3
  466            | primary_value • call_op paren_args
  467            | primary_value • "::" paren_args
  470            | primary_value • '[' opt_call_args rbracket
  764 call_op: • '.'
  765        | • "&."

    '.'   shift, and go to state 374
    "&."  shift, and go to state 375
    "::"  shift, and go to state 376
    '['   shift, and go to state 377

    call_op  go to state 378


State 92

  321 $@15: ε •
  322 primary: k_begin • $@15 bodystmt k_end

    $default  reduce using rule 321 ($@15)

    $@15  go to state 379


State 93

   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   70 expr_value: • expr
   71           | • error
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  344        | k_if • expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 380
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 381
    defn_head         go to state 218
    defs_head         go to state 219
    expr_value        go to state 382
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 94

   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   70 expr_value: • expr
   71           | • error
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  345        | k_unless • expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 380
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 381
    defn_head         go to state 218
    defs_head         go to state 219
    expr_value        go to state 383
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 95

   72 $@10: ε •
   74 expr_value_do: • $@10 expr_value do $@11
  346 primary: k_while • expr_value_do compstmt k_end

    $default  reduce using rule 72 ($@10)

    expr_value_do  go to state 384
    $@10           go to state 385


State 96

   72 $@10: ε •
   74 expr_value_do: • $@10 expr_value do $@11
  347 primary: k_until • expr_value_do compstmt k_end

    $default  reduce using rule 72 ($@10)

    expr_value_do  go to state 386
    $@10           go to state 385


State 97

   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   70 expr_value: • expr
   71           | • error
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  349        | k_case • expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  351        | k_case • opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  352        | k_case • expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  768 opt_terms: ε •  ["`when'"]
  769          | • terms
  777 term: • ';'
  778     | • '\n'
  779 terms: • term
  780      | • terms ';'

    error                       shift, and go to state 380
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69
    ';'                         shift, and go to state 309
    '\n'                        shift, and go to state 310

    "`when'"  reduce using rule 768 (opt_terms)

    expr              go to state 381
    defn_head         go to state 218
    defs_head         go to state 219
    expr_value        go to state 387
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127
    opt_terms         go to state 388
    term              go to state 312
    terms             go to state 389


State 98

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  353        | k_for • for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  398 for_var: • lhs
  399        | • mlhs
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 281
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    ":: at EXPR_BEG"            shift, and go to state 390
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 283

    defn_head         go to state 285
    defs_head         go to state 286
    fcall             go to state 254
    mlhs              go to state 391
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 392
    primary           go to state 288
    primary_value     go to state 393
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    for_var           go to state 394
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 395
    keyword_variable  go to state 396
    var_ref           go to state 124
    backref           go to state 397
    operation         go to state 127


State 99

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  130 cname: • "local variable or method"
  131      | • "constant"
  132 cpath: • ":: at EXPR_BEG" cname
  133      | • cname
  134      | • primary_value "::" cname
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  355        | k_class • cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  357        | k_class • "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 281
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 398
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 399
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "<<"                        shift, and go to state 400
    ":: at EXPR_BEG"            shift, and go to state 401
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 283

    defn_head         go to state 285
    defs_head         go to state 286
    fcall             go to state 254
    cname             go to state 402
    cpath             go to state 403
    primary           go to state 288
    primary_value     go to state 404
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 405
    keyword_variable  go to state 406
    var_ref           go to state 124
    backref           go to state 407
    operation         go to state 127


State 100

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  130 cname: • "local variable or method"
  131      | • "constant"
  132 cpath: • ":: at EXPR_BEG" cname
  133      | • cname
  134      | • primary_value "::" cname
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  359        | k_module • cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 281
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 398
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 399
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    ":: at EXPR_BEG"            shift, and go to state 401
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 283

    defn_head         go to state 285
    defs_head         go to state 286
    fcall             go to state 254
    cname             go to state 402
    cpath             go to state 408
    primary           go to state 288
    primary_value     go to state 404
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 405
    keyword_variable  go to state 406
    var_ref           go to state 124
    backref           go to state 407
    operation         go to state 127


State 101

   66 def_name: • fname
   67 defn_head: k_def • def_name
   69 defs_head: k_def • singleton dot_or_colon $@9 def_name
  135 fname: • "local variable or method"
  136      | • "constant"
  137      | • "method"
  138      | • op
  139      | • reswords
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  175 reswords: • "`__LINE__'"
  176         | • "`__FILE__'"
  177         | • "`__ENCODING__'"
  178         | • "`BEGIN'"
  179         | • "`END'"
  180         | • "`alias'"
  181         | • "`and'"
  182         | • "`begin'"
  183         | • "`break'"
  184         | • "`case'"
  185         | • "`class'"
  186         | • "`def'"
  187         | • "`defined?'"
  188         | • "`do'"
  189         | • "`else'"
  190         | • "`elsif'"
  191         | • "`end'"
  192         | • "`ensure'"
  193         | • "`false'"
  194         | • "`for'"
  195         | • "`in'"
  196         | • "`module'"
  197         | • "`next'"
  198         | • "`nil'"
  199         | • "`not'"
  200         | • "`or'"
  201         | • "`redo'"
  202         | • "`rescue'"
  203         | • "`retry'"
  204         | • "`return'"
  205         | • "`self'"
  206         | • "`super'"
  207         | • "`then'"
  208         | • "`true'"
  209         | • "`undef'"
  210         | • "`when'"
  211         | • "`yield'"
  212         | • "`if'"
  213         | • "`unless'"
  214         | • "`while'"
  215         | • "`until'"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  741 singleton: • var_ref
  743          | • '(' $@51 expr rparen

    "`class'"                   shift, and go to state 129
    "`module'"                  shift, and go to state 130
    "`def'"                     shift, and go to state 131
    "`undef'"                   shift, and go to state 132
    "`begin'"                   shift, and go to state 133
    "`rescue'"                  shift, and go to state 134
    "`ensure'"                  shift, and go to state 135
    "`end'"                     shift, and go to state 136
    "`if'"                      shift, and go to state 137
    "`unless'"                  shift, and go to state 138
    "`then'"                    shift, and go to state 139
    "`elsif'"                   shift, and go to state 140
    "`else'"                    shift, and go to state 141
    "`case'"                    shift, and go to state 142
    "`when'"                    shift, and go to state 143
    "`while'"                   shift, and go to state 144
    "`until'"                   shift, and go to state 145
    "`for'"                     shift, and go to state 146
    "`break'"                   shift, and go to state 147
    "`next'"                    shift, and go to state 148
    "`redo'"                    shift, and go to state 149
    "`retry'"                   shift, and go to state 150
    "`in'"                      shift, and go to state 151
    "`do'"                      shift, and go to state 152
    "`return'"                  shift, and go to state 153
    "`yield'"                   shift, and go to state 154
    "`super'"                   shift, and go to state 155
    "`self'"                    shift, and go to state 409
    "`nil'"                     shift, and go to state 410
    "`true'"                    shift, and go to state 411
    "`false'"                   shift, and go to state 412
    "`and'"                     shift, and go to state 160
    "`or'"                      shift, and go to state 161
    "`not'"                     shift, and go to state 162
    "`alias'"                   shift, and go to state 163
    "`defined?'"                shift, and go to state 164
    "`BEGIN'"                   shift, and go to state 165
    "`END'"                     shift, and go to state 166
    "`__LINE__'"                shift, and go to state 413
    "`__FILE__'"                shift, and go to state 414
    "`__ENCODING__'"            shift, and go to state 415
    "local variable or method"  shift, and go to state 416
    "method"                    shift, and go to state 171
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 417
    "class variable"            shift, and go to state 40
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 418

    def_name          go to state 419
    fname             go to state 420
    op                go to state 206
    reswords          go to state 207
    nonlocal_var      go to state 121
    user_variable     go to state 405
    keyword_variable  go to state 406
    var_ref           go to state 421
    singleton         go to state 422


State 102

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   89        | k_return • call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  288 call_args: • command
  289          | • args opt_block_arg
  290          | • assocs opt_block_arg
  291          | • args ',' assocs opt_block_arg
  292          | • block_arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  332        | k_return •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 213
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 332 (primary)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 80
    command           go to state 220
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 223
    call_args         go to state 423
    block_arg         go to state 225
    args              go to state 226
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 232
    assoc             go to state 233
    operation         go to state 127


State 103

  343 primary: lambda •

    $default  reduce using rule 343 (primary)


State 104

   77 block_command: block_call •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
   78              | block_call • call_op2 operation2 command_args
  459 block_call: block_call • call_op2 operation2 opt_paren_args
  460           | block_call • call_op2 operation2 opt_paren_args brace_block
  461           | block_call • call_op2 operation2 command_args do_block
  764 call_op: • '.'
  765        | • "&."
  766 call_op2: • call_op
  767         | • "::"

    '.'   shift, and go to state 374
    "&."  shift, and go to state 375
    "::"  shift, and go to state 424

    $default  reduce using rule 77 (block_command)

    call_op   go to state 425
    call_op2  go to state 426


State 105

  341 primary: method_call •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']
  342        | method_call • brace_block
  379 k_do: • "`do'"
  471 brace_block: • '{' brace_body '}'
  472            | • k_do do_body k_end

    "`do'"  shift, and go to state 329
    '{'     shift, and go to state 330

    $default  reduce using rule 341 (primary)

    k_do         go to state 333
    brace_block  go to state 427


State 106

  310 primary: literal •

    $default  reduce using rule 310 (primary)


State 107

  311 primary: strings •

    $default  reduce using rule 311 (primary)


State 108

  597 strings: string •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']
  600 string: string • string1
  601 string1: • "string literal" string_contents "terminator"

    "string literal"  shift, and go to state 60

    $default  reduce using rule 597 (strings)

    string1  go to state 428


State 109

  599 string: string1 •

    $default  reduce using rule 599 (string)


State 110

  312 primary: xstring •

    $default  reduce using rule 312 (primary)


State 111

  313 primary: regexp •

    $default  reduce using rule 313 (primary)


State 112

  314 primary: words •

    $default  reduce using rule 314 (primary)


State 113

  316 primary: symbols •

    $default  reduce using rule 316 (primary)


State 114

  315 primary: qwords •

    $default  reduce using rule 315 (primary)


State 115

  317 primary: qsymbols •

    $default  reduce using rule 317 (primary)


State 116

  596 literal: symbol •

    $default  reduce using rule 596 (literal)


State 117

  637 symbol: ssym •

    $default  reduce using rule 637 (symbol)


State 118

  638 symbol: dsym •

    $default  reduce using rule 638 (symbol)


State 119

  595 literal: numeric •

    $default  reduce using rule 595 (literal)


State 120

  643 numeric: simple_numeric •

    $default  reduce using rule 643 (numeric)


State 121

  654 user_variable: nonlocal_var •

    $default  reduce using rule 654 (user_variable)


State 122

  112 mlhs_node: user_variable •  [',']
  121 lhs: user_variable •  ['=']
  662 var_ref: user_variable •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ')', ';', '\n']
  664 var_lhs: user_variable •  ["operator-assignment"]

    "operator-assignment"  reduce using rule 664 (var_lhs)
    '='                    reduce using rule 121 (lhs)
    ','                    reduce using rule 112 (mlhs_node)
    $default               reduce using rule 662 (var_ref)


State 123

  113 mlhs_node: keyword_variable •  [',']
  122 lhs: keyword_variable •  ['=']
  663 var_ref: keyword_variable •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ')', ';', '\n']
  665 var_lhs: keyword_variable •  ["operator-assignment"]

    "operator-assignment"  reduce using rule 665 (var_lhs)
    '='                    reduce using rule 122 (lhs)
    ','                    reduce using rule 113 (mlhs_node)
    $default               reduce using rule 663 (var_ref)


State 124

  318 primary: var_ref •

    $default  reduce using rule 318 (primary)


State 125

   40 command_asgn: var_lhs • "operator-assignment" lex_ctxt command_rhs
  217 arg: var_lhs • "operator-assignment" lex_ctxt arg_rhs

    "operator-assignment"  shift, and go to state 429


State 126

   50 command_asgn: backref • "operator-assignment" lex_ctxt command_rhs
  120 mlhs_node: backref •  [',']
  129 lhs: backref •  ['=']
  224 arg: backref • "operator-assignment" lex_ctxt arg_rhs
  319 primary: backref •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ')', ';', '\n']

    "operator-assignment"  shift, and go to state 430

    '='       reduce using rule 129 (lhs)
    ','       reduce using rule 120 (mlhs_node)
    $default  reduce using rule 319 (primary)


State 127

   80 fcall: operation •

    $default  reduce using rule 80 (fcall)


State 128

    4 top_stmts: none •

    $default  reduce using rule 4 (top_stmts)


State 129

  185 reswords: "`class'" •

    $default  reduce using rule 185 (reswords)


State 130

  196 reswords: "`module'" •

    $default  reduce using rule 196 (reswords)


State 131

  186 reswords: "`def'" •

    $default  reduce using rule 186 (reswords)


State 132

  209 reswords: "`undef'" •

    $default  reduce using rule 209 (reswords)


State 133

  182 reswords: "`begin'" •

    $default  reduce using rule 182 (reswords)


State 134

  202 reswords: "`rescue'" •

    $default  reduce using rule 202 (reswords)


State 135

  192 reswords: "`ensure'" •

    $default  reduce using rule 192 (reswords)


State 136

  191 reswords: "`end'" •

    $default  reduce using rule 191 (reswords)


State 137

  212 reswords: "`if'" •

    $default  reduce using rule 212 (reswords)


State 138

  213 reswords: "`unless'" •

    $default  reduce using rule 213 (reswords)


State 139

  207 reswords: "`then'" •

    $default  reduce using rule 207 (reswords)


State 140

  190 reswords: "`elsif'" •

    $default  reduce using rule 190 (reswords)


State 141

  189 reswords: "`else'" •

    $default  reduce using rule 189 (reswords)


State 142

  184 reswords: "`case'" •

    $default  reduce using rule 184 (reswords)


State 143

  210 reswords: "`when'" •

    $default  reduce using rule 210 (reswords)


State 144

  214 reswords: "`while'" •

    $default  reduce using rule 214 (reswords)


State 145

  215 reswords: "`until'" •

    $default  reduce using rule 215 (reswords)


State 146

  194 reswords: "`for'" •

    $default  reduce using rule 194 (reswords)


State 147

  183 reswords: "`break'" •

    $default  reduce using rule 183 (reswords)


State 148

  197 reswords: "`next'" •

    $default  reduce using rule 197 (reswords)


State 149

  201 reswords: "`redo'" •

    $default  reduce using rule 201 (reswords)


State 150

  203 reswords: "`retry'" •

    $default  reduce using rule 203 (reswords)


State 151

  195 reswords: "`in'" •

    $default  reduce using rule 195 (reswords)


State 152

  188 reswords: "`do'" •

    $default  reduce using rule 188 (reswords)


State 153

  204 reswords: "`return'" •

    $default  reduce using rule 204 (reswords)


State 154

  211 reswords: "`yield'" •

    $default  reduce using rule 211 (reswords)


State 155

  206 reswords: "`super'" •

    $default  reduce using rule 206 (reswords)


State 156

  205 reswords: "`self'" •

    $default  reduce using rule 205 (reswords)


State 157

  198 reswords: "`nil'" •

    $default  reduce using rule 198 (reswords)


State 158

  208 reswords: "`true'" •

    $default  reduce using rule 208 (reswords)


State 159

  193 reswords: "`false'" •

    $default  reduce using rule 193 (reswords)


State 160

  181 reswords: "`and'" •

    $default  reduce using rule 181 (reswords)


State 161

  200 reswords: "`or'" •

    $default  reduce using rule 200 (reswords)


State 162

  199 reswords: "`not'" •

    $default  reduce using rule 199 (reswords)


State 163

  180 reswords: "`alias'" •

    $default  reduce using rule 180 (reswords)


State 164

  187 reswords: "`defined?'" •

    $default  reduce using rule 187 (reswords)


State 165

  178 reswords: "`BEGIN'" •

    $default  reduce using rule 178 (reswords)


State 166

  179 reswords: "`END'" •

    $default  reduce using rule 179 (reswords)


State 167

  175 reswords: "`__LINE__'" •

    $default  reduce using rule 175 (reswords)


State 168

  176 reswords: "`__FILE__'" •

    $default  reduce using rule 176 (reswords)


State 169

  177 reswords: "`__ENCODING__'" •

    $default  reduce using rule 177 (reswords)


State 170

  135 fname: "local variable or method" •

    $default  reduce using rule 135 (fname)


State 171

  137 fname: "method" •

    $default  reduce using rule 137 (fname)


State 172

  136 fname: "constant" •

    $default  reduce using rule 136 (fname)


State 173

  170 op: "unary+" •

    $default  reduce using rule 170 (op)


State 174

  171 op: "unary-" •

    $default  reduce using rule 171 (op)


State 175

  166 op: "**" •

    $default  reduce using rule 166 (op)


State 176

  148 op: "<=>" •

    $default  reduce using rule 148 (op)


State 177

  149 op: "==" •

    $default  reduce using rule 149 (op)


State 178

  150 op: "===" •

    $default  reduce using rule 150 (op)


State 179

  157 op: "!=" •

    $default  reduce using rule 157 (op)


State 180

  154 op: ">=" •

    $default  reduce using rule 154 (op)


State 181

  156 op: "<=" •

    $default  reduce using rule 156 (op)


State 182

  151 op: "=~" •

    $default  reduce using rule 151 (op)


State 183

  152 op: "!~" •

    $default  reduce using rule 152 (op)


State 184

  172 op: "[]" •

    $default  reduce using rule 172 (op)


State 185

  173 op: "[]=" •

    $default  reduce using rule 173 (op)


State 186

  158 op: "<<" •

    $default  reduce using rule 158 (op)


State 187

  159 op: ">>" •

    $default  reduce using rule 159 (op)


State 188

  163 op: "*" •

    $default  reduce using rule 163 (op)


State 189

  167 op: "**arg" •

    $default  reduce using rule 167 (op)


State 190

  153 op: '>' •

    $default  reduce using rule 153 (op)


State 191

  155 op: '<' •

    $default  reduce using rule 155 (op)


State 192

  145 op: '|' •

    $default  reduce using rule 145 (op)


State 193

  146 op: '^' •

    $default  reduce using rule 146 (op)


State 194

  147 op: '&' •

    $default  reduce using rule 147 (op)


State 195

  160 op: '+' •

    $default  reduce using rule 160 (op)


State 196

  161 op: '-' •

    $default  reduce using rule 161 (op)


State 197

  162 op: '*' •

    $default  reduce using rule 162 (op)


State 198

  164 op: '/' •

    $default  reduce using rule 164 (op)


State 199

  165 op: '%' •

    $default  reduce using rule 165 (op)


State 200

  168 op: '!' •

    $default  reduce using rule 168 (op)


State 201

  169 op: '~' •

    $default  reduce using rule 169 (op)


State 202

  174 op: '`' •

    $default  reduce using rule 174 (op)


State 203

  140 fitem: fname •

    $default  reduce using rule 140 (fitem)


State 204

  142 undef_list: fitem •

    $default  reduce using rule 142 (undef_list)


State 205

   25 stmt: "`undef'" undef_list •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
  144 undef_list: undef_list • ',' $@12 fitem

    ','  shift, and go to state 431

    $default  reduce using rule 25 (stmt)


State 206

  138 fname: op •

    $default  reduce using rule 138 (fname)


State 207

  139 fname: reswords •

    $default  reduce using rule 139 (fname)


State 208

  141 fitem: symbol •

    $default  reduce using rule 141 (fitem)


State 209

  338 primary: "`not'" • '(' expr rparen
  339        | "`not'" • '(' rparen

    '('  shift, and go to state 241


State 210

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  749 assoc: "label" • arg_value
  750      | "label" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "{ arg", "'}'", '}', ',', ')', ']', ';', '\n']
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 750 (assoc)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 432
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 211

  128 lhs: ":: at EXPR_BEG" • "constant"
  223 arg: ":: at EXPR_BEG" • "constant" "operator-assignment" lex_ctxt arg_rhs
  329 primary: ":: at EXPR_BEG" • "constant"

    "constant"  shift, and go to state 433


State 212

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  327        | "(" • compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  [')', ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    ')'   reduce using rule 781 (none)
    ';'   reduce using rule 781 (none)
    '\n'  reduce using rule 781 (none)

    compstmt          go to state 264
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 213

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  300 args: "*" • arg_value
  301     | "*" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "{ arg", "'}'", '}', ',', ')', ']', ';', '\n']
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 301 (args)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 434
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 214

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  752 assoc: "**arg" • arg_value
  753      | "**arg" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "{ arg", "'}'", '}', ',', ')', ']', ';', '\n']
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 753 (assoc)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 435
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 215

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  295 block_arg: "&" • arg_value
  296          | "&" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "{ arg", "'}'", '}', ')', ']', ';', '\n']
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 296 (block_arg)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 436
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 216

  601 string1: "string literal" • string_contents "terminator"
  618 string_contents: ε •
  619                | • string_contents string_content
  751 assoc: "string literal" • string_contents tLABEL_END arg_value

    $default  reduce using rule 618 (string_contents)

    string_contents  go to state 437


State 217

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  250    | '!' • arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 307
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 218

  259 arg: defn_head • f_opt_paren_args '=' arg
  260    | defn_head • f_opt_paren_args '=' arg "`rescue' modifier" arg
  361 primary: defn_head • f_arglist $@24 bodystmt k_end
  671 f_opt_paren_args: • f_paren_args
  672                 | • none
  673 f_paren_args: • '(' f_args rparen
  674 f_arglist: • f_paren_args
  675 @50: ε •  ["local variable or method", "global variable", "instance variable", "constant", "class variable", "label", "**", "(...", "(", "*", "**arg", "&", '&', '*', ';', '\n']
  676 f_arglist: • @50 f_args term
  781 none: ε •  ['=']

    '('  shift, and go to state 321

    '='       reduce using rule 781 (none)
    $default  reduce using rule 675 (@50)

    f_opt_paren_args  go to state 438
    f_paren_args      go to state 323
    f_arglist         go to state 324
    @50               go to state 325
    none              go to state 326


State 219

  261 arg: defs_head • f_opt_paren_args '=' arg
  262    | defs_head • f_opt_paren_args '=' arg "`rescue' modifier" arg
  363 primary: defs_head • f_arglist $@25 bodystmt k_end
  671 f_opt_paren_args: • f_paren_args
  672                 | • none
  673 f_paren_args: • '(' f_args rparen
  674 f_arglist: • f_paren_args
  675 @50: ε •  ["local variable or method", "global variable", "instance variable", "constant", "class variable", "label", "**", "(...", "(", "*", "**arg", "&", '&', '*', ';', '\n']
  676 f_arglist: • @50 f_args term
  781 none: ε •  ['=']

    '('  shift, and go to state 321

    '='       reduce using rule 781 (none)
    $default  reduce using rule 675 (@50)

    f_opt_paren_args  go to state 439
    f_paren_args      go to state 323
    f_arglist         go to state 328
    @50               go to state 325
    none              go to state 326


State 220

  288 call_args: command •

    $default  reduce using rule 288 (call_args)


State 221

  216 arg: lhs • '=' lex_ctxt arg_rhs

    '='  shift, and go to state 440


State 222

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg
  271 arg_value: arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "{ arg", "'}'", tLAMBEG, '}', ',', ')', ']', ';', '\n']

    "**"   shift, and go to state 345
    "<=>"  shift, and go to state 346
    "=="   shift, and go to state 347
    "==="  shift, and go to state 348
    "!="   shift, and go to state 349
    ">="   shift, and go to state 350
    "<="   shift, and go to state 351
    "&&"   shift, and go to state 352
    "||"   shift, and go to state 353
    "=~"   shift, and go to state 354
    "!~"   shift, and go to state 355
    ".."   shift, and go to state 356
    "..."  shift, and go to state 357
    "<<"   shift, and go to state 358
    ">>"   shift, and go to state 359
    '?'    shift, and go to state 361
    '>'    shift, and go to state 362
    '<'    shift, and go to state 363
    '|'    shift, and go to state 364
    '^'    shift, and go to state 365
    '&'    shift, and go to state 366
    '+'    shift, and go to state 367
    '-'    shift, and go to state 368
    '*'    shift, and go to state 369
    '/'    shift, and go to state 370
    '%'    shift, and go to state 371

    $default  reduce using rule 271 (arg_value)

    relop  go to state 372


State 223

  299 args: arg_value •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "{ arg", "'}'", '}', ',', ')', ']', ';', '\n']
  748 assoc: arg_value • "=>" arg_value

    "=>"  shift, and go to state 441

    $default  reduce using rule 299 (args)


State 224

   90 command: "`break'" call_args •

    $default  reduce using rule 90 (command)


State 225

  292 call_args: block_arg •

    $default  reduce using rule 292 (call_args)


State 226

  289 call_args: args • opt_block_arg
  291          | args • ',' assocs opt_block_arg
  297 opt_block_arg: • ',' block_arg
  298              | • none
  302 args: args • ',' arg_value
  303     | args • ',' "*" arg_value
  304     | args • ',' "*"
  781 none: ε •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "{ arg", "'}'", '}', ')', ']', ';', '\n']

    ','  shift, and go to state 442

    $default  reduce using rule 781 (none)

    opt_block_arg  go to state 443
    none           go to state 444


State 227

   83 command: primary_value • call_op operation2 command_args
   84        | primary_value • call_op operation2 command_args cmd_brace_block
   85        | primary_value • "::" operation2 command_args
   86        | primary_value • "::" operation2 command_args cmd_brace_block
  123 lhs: primary_value • '[' opt_call_args rbracket
  124    | primary_value • call_op "local variable or method"
  125    | primary_value • "::" "local variable or method"
  126    | primary_value • call_op "constant"
  127    | primary_value • "::" "constant"
  218 arg: primary_value • '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | primary_value • call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | primary_value • call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | primary_value • "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | primary_value • "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  328 primary: primary_value • "::" "constant"
  463 method_call: primary_value • call_op operation2 opt_paren_args
  464            | primary_value • "::" operation2 paren_args
  465            | primary_value • "::" operation3
  466            | primary_value • call_op paren_args
  467            | primary_value • "::" paren_args
  470            | primary_value • '[' opt_call_args rbracket
  764 call_op: • '.'
  765        | • "&."

    '.'   shift, and go to state 374
    "&."  shift, and go to state 375
    "::"  shift, and go to state 445
    '['   shift, and go to state 446

    call_op  go to state 447


State 228

  121 lhs: user_variable •  ['=']
  662 var_ref: user_variable •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']
  664 var_lhs: user_variable •  ["operator-assignment"]

    "operator-assignment"  reduce using rule 664 (var_lhs)
    '='                    reduce using rule 121 (lhs)
    $default               reduce using rule 662 (var_ref)


State 229

  122 lhs: keyword_variable •  ['=']
  663 var_ref: keyword_variable •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']
  665 var_lhs: keyword_variable •  ["operator-assignment"]

    "operator-assignment"  reduce using rule 665 (var_lhs)
    '='                    reduce using rule 122 (lhs)
    $default               reduce using rule 663 (var_ref)


State 230

  217 arg: var_lhs • "operator-assignment" lex_ctxt arg_rhs

    "operator-assignment"  shift, and go to state 448


State 231

  129 lhs: backref •  ['=']
  224 arg: backref • "operator-assignment" lex_ctxt arg_rhs
  319 primary: backref •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']

    "operator-assignment"  shift, and go to state 449

    '='       reduce using rule 129 (lhs)
    $default  reduce using rule 319 (primary)


State 232

  290 call_args: assocs • opt_block_arg
  297 opt_block_arg: • ',' block_arg
  298              | • none
  747 assocs: assocs • ',' assoc
  781 none: ε •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "{ arg", "'}'", '}', ')', ']', ';', '\n']

    ','  shift, and go to state 450

    $default  reduce using rule 781 (none)

    opt_block_arg  go to state 451
    none           go to state 444


State 233

  746 assocs: assoc •

    $default  reduce using rule 746 (assocs)


State 234

   91 command: "`next'" call_args •

    $default  reduce using rule 91 (command)


State 235

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  288 call_args: • command
  289          | • args opt_block_arg
  290          | • assocs opt_block_arg
  291          | • args ',' assocs opt_block_arg
  292          | • block_arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  333        | "`yield'" '(' • call_args rparen
  334        | • "`yield'" '(' rparen
  334        | "`yield'" '(' • rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 213
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69
    '\n'                        shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 80
    command           go to state 220
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 223
    call_args         go to state 452
    block_arg         go to state 225
    args              go to state 226
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 232
    assoc             go to state 233
    operation         go to state 127
    opt_nl            go to state 453
    rparen            go to state 454


State 236

   88 command: "`yield'" command_args •

    $default  reduce using rule 88 (command)


State 237

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  288 call_args: • command
  289          | • args opt_block_arg
  290          | • assocs opt_block_arg
  291          | • args ',' assocs opt_block_arg
  292          | • block_arg
  294 command_args: $@14 • call_args
  295 block_arg: • "&" arg_value
  296          | • "&"
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 213
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 80
    command           go to state 220
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 223
    call_args         go to state 455
    block_arg         go to state 225
    args              go to state 226
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 232
    assoc             go to state 233
    operation         go to state 127


State 238

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  278 paren_args: '(' • opt_call_args rparen
  279           | '(' • args ',' args_forward rparen
  280           | '(' • args_forward rparen
  283 opt_call_args: • none
  284              | • call_args
  285              | • args ','
  286              | • args ',' assocs ','
  287              | • assocs ','
  288 call_args: • command
  289          | • args opt_block_arg
  290          | • assocs opt_block_arg
  291          | • args ',' assocs opt_block_arg
  292          | • block_arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  699 args_forward: • "(..."
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  [')', '\n']

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 456
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 213
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 781 (none)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 80
    command           go to state 220
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 223
    opt_call_args     go to state 457
    call_args         go to state 458
    block_arg         go to state 225
    args              go to state 459
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    args_forward      go to state 460
    assocs            go to state 461
    assoc             go to state 233
    operation         go to state 127
    none              go to state 462


State 239

  468 method_call: "`super'" paren_args •

    $default  reduce using rule 468 (method_call)


State 240

   87 command: "`super'" command_args •

    $default  reduce using rule 87 (command)


State 241

   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  338        | "`not'" '(' • expr rparen
  339        | • "`not'" '(' rparen
  339        | "`not'" '(' • rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69
    '\n'                        shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    expr              go to state 463
    defn_head         go to state 218
    defs_head         go to state 219
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127
    opt_nl            go to state 453
    rparen            go to state 464


State 242

  771 opt_nl: '\n' •

    $default  reduce using rule 771 (opt_nl)


State 243

   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   57     | "`not'" opt_nl • expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 465
    defn_head         go to state 218
    defs_head         go to state 219
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 244

   22 stmt: "`alias'" "global variable" • "global variable"
   23     | "`alias'" "global variable" • "back reference"
   24     | "`alias'" "global variable" • "numbered reference"

    "global variable"     shift, and go to state 466
    "numbered reference"  shift, and go to state 467
    "back reference"      shift, and go to state 468


State 245

   20 $@4: ε •
   21 stmt: "`alias'" fitem • $@4 fitem

    $default  reduce using rule 20 ($@4)

    $@4  go to state 469


State 246

  256 $@13: ε •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~']
  257 arg: "`defined?'" opt_nl • $@13 arg
  337 primary: "`defined?'" opt_nl • '(' $@18 expr rparen

    '('  shift, and go to state 470

    $default  reduce using rule 256 ($@13)

    $@13  go to state 471


State 247

    3 top_compstmt: • top_stmts opt_terms
    4 top_stmts: • none
    5          | • top_stmt
    6          | • top_stmts terms top_stmt
    7 top_stmt: • stmt
    8         | • "`BEGIN'" begin_block
    9 begin_block: '{' • top_compstmt '}'
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ['}', ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 30
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    '}'   reduce using rule 781 (none)
    ';'   reduce using rule 781 (none)
    '\n'  reduce using rule 781 (none)

    top_compstmt      go to state 472
    top_stmts         go to state 71
    top_stmt          go to state 72
    stmt              go to state 73
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 128


State 248

    8 top_stmt: "`BEGIN'" begin_block •

    $default  reduce using rule 8 (top_stmt)


State 249

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   31     | "`END'" '{' • compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ['}', ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    '}'   reduce using rule 781 (none)
    ';'   reduce using rule 781 (none)
    '\n'  reduce using rule 781 (none)

    compstmt          go to state 473
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 250

  364 primary: "`break'" •

    $default  reduce using rule 364 (primary)


State 251

  365 primary: "`next'" •

    $default  reduce using rule 365 (primary)


State 252

  333 primary: "`yield'" • '(' call_args rparen
  334        | "`yield'" • '(' rparen
  335        | "`yield'" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']

    '('  shift, and go to state 235

    $default  reduce using rule 335 (primary)


State 253

  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  468 method_call: "`super'" • paren_args
  469            | "`super'" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '{', '}', '[', ',', ')', ']', ';', '\n']

    '('  shift, and go to state 238

    $default  reduce using rule 469 (method_call)

    paren_args  go to state 239


State 254

  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  340 primary: fcall • brace_block
  379 k_do: • "`do'"
  462 method_call: fcall • paren_args
  471 brace_block: • '{' brace_body '}'
  472            | • k_do do_body k_end

    "`do'"  shift, and go to state 329
    '{'     shift, and go to state 330
    '('     shift, and go to state 238

    paren_args   go to state 331
    k_do         go to state 333
    brace_block  go to state 334


State 255

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  238    | "unary+" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', ',', ')', ']', ';', '\n']
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    $default  reduce using rule 238 (arg)

    relop  go to state 372

    Conflict between rule 238 and token "**" resolved as reduce ("**" < "unary+").
    Conflict between rule 238 and token "<=>" resolved as reduce ("<=>" < "unary+").
    Conflict between rule 238 and token "==" resolved as reduce ("==" < "unary+").
    Conflict between rule 238 and token "===" resolved as reduce ("===" < "unary+").
    Conflict between rule 238 and token "!=" resolved as reduce ("!=" < "unary+").
    Conflict between rule 238 and token ">=" resolved as reduce (">=" < "unary+").
    Conflict between rule 238 and token "<=" resolved as reduce ("<=" < "unary+").
    Conflict between rule 238 and token "&&" resolved as reduce ("&&" < "unary+").
    Conflict between rule 238 and token "||" resolved as reduce ("||" < "unary+").
    Conflict between rule 238 and token "=~" resolved as reduce ("=~" < "unary+").
    Conflict between rule 238 and token "!~" resolved as reduce ("!~" < "unary+").
    Conflict between rule 238 and token ".." resolved as reduce (".." < "unary+").
    Conflict between rule 238 and token "..." resolved as reduce ("..." < "unary+").
    Conflict between rule 238 and token "<<" resolved as reduce ("<<" < "unary+").
    Conflict between rule 238 and token ">>" resolved as reduce (">>" < "unary+").
    Conflict between rule 238 and token '?' resolved as reduce ('?' < "unary+").
    Conflict between rule 238 and token '>' resolved as reduce ('>' < "unary+").
    Conflict between rule 238 and token '<' resolved as reduce ('<' < "unary+").
    Conflict between rule 238 and token '|' resolved as reduce ('|' < "unary+").
    Conflict between rule 238 and token '^' resolved as reduce ('^' < "unary+").
    Conflict between rule 238 and token '&' resolved as reduce ('&' < "unary+").
    Conflict between rule 238 and token '+' resolved as reduce ('+' < "unary+").
    Conflict between rule 238 and token '-' resolved as reduce ('-' < "unary+").
    Conflict between rule 238 and token '*' resolved as reduce ('*' < "unary+").
    Conflict between rule 238 and token '/' resolved as reduce ('/' < "unary+").
    Conflict between rule 238 and token '%' resolved as reduce ('%' < "unary+").


State 256

  123 lhs: primary_value • '[' opt_call_args rbracket
  124    | primary_value • call_op "local variable or method"
  125    | primary_value • "::" "local variable or method"
  126    | primary_value • call_op "constant"
  127    | primary_value • "::" "constant"
  218 arg: primary_value • '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | primary_value • call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | primary_value • call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | primary_value • "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | primary_value • "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  328 primary: primary_value • "::" "constant"
  463 method_call: primary_value • call_op operation2 opt_paren_args
  464            | primary_value • "::" operation2 paren_args
  465            | primary_value • "::" operation3
  466            | primary_value • call_op paren_args
  467            | primary_value • "::" paren_args
  470            | primary_value • '[' opt_call_args rbracket
  764 call_op: • '.'
  765        | • "&."

    '.'   shift, and go to state 374
    "&."  shift, and go to state 375
    "::"  shift, and go to state 474
    '['   shift, and go to state 446

    call_op  go to state 475


State 257

  332 primary: k_return •

    $default  reduce using rule 332 (primary)


State 258

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  239    | "unary-" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', ',', ')', ']', ';', '\n']
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345

    $default  reduce using rule 239 (arg)

    relop  go to state 372

    Conflict between rule 239 and token "**" resolved as shift ("unary-" < "**").
    Conflict between rule 239 and token "<=>" resolved as reduce ("<=>" < "unary-").
    Conflict between rule 239 and token "==" resolved as reduce ("==" < "unary-").
    Conflict between rule 239 and token "===" resolved as reduce ("===" < "unary-").
    Conflict between rule 239 and token "!=" resolved as reduce ("!=" < "unary-").
    Conflict between rule 239 and token ">=" resolved as reduce (">=" < "unary-").
    Conflict between rule 239 and token "<=" resolved as reduce ("<=" < "unary-").
    Conflict between rule 239 and token "&&" resolved as reduce ("&&" < "unary-").
    Conflict between rule 239 and token "||" resolved as reduce ("||" < "unary-").
    Conflict between rule 239 and token "=~" resolved as reduce ("=~" < "unary-").
    Conflict between rule 239 and token "!~" resolved as reduce ("!~" < "unary-").
    Conflict between rule 239 and token ".." resolved as reduce (".." < "unary-").
    Conflict between rule 239 and token "..." resolved as reduce ("..." < "unary-").
    Conflict between rule 239 and token "<<" resolved as reduce ("<<" < "unary-").
    Conflict between rule 239 and token ">>" resolved as reduce (">>" < "unary-").
    Conflict between rule 239 and token '?' resolved as reduce ('?' < "unary-").
    Conflict between rule 239 and token '>' resolved as reduce ('>' < "unary-").
    Conflict between rule 239 and token '<' resolved as reduce ('<' < "unary-").
    Conflict between rule 239 and token '|' resolved as reduce ('|' < "unary-").
    Conflict between rule 239 and token '^' resolved as reduce ('^' < "unary-").
    Conflict between rule 239 and token '&' resolved as reduce ('&' < "unary-").
    Conflict between rule 239 and token '+' resolved as reduce ('+' < "unary-").
    Conflict between rule 239 and token '-' resolved as reduce ('-' < "unary-").
    Conflict between rule 239 and token '*' resolved as reduce ('*' < "unary-").
    Conflict between rule 239 and token '/' resolved as reduce ('/' < "unary-").
    Conflict between rule 239 and token '%' resolved as reduce ('%' < "unary-").


State 259

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  229    | "(.." arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '}', ',', ')', ']', ';', '\n']
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"   shift, and go to state 345
    "<=>"  shift, and go to state 346
    "=="   shift, and go to state 347
    "==="  shift, and go to state 348
    "!="   shift, and go to state 349
    ">="   shift, and go to state 350
    "<="   shift, and go to state 351
    "&&"   shift, and go to state 352
    "||"   shift, and go to state 353
    "=~"   shift, and go to state 354
    "!~"   shift, and go to state 355
    "<<"   shift, and go to state 358
    ">>"   shift, and go to state 359
    '>'    shift, and go to state 362
    '<'    shift, and go to state 363
    '|'    shift, and go to state 364
    '^'    shift, and go to state 365
    '&'    shift, and go to state 366
    '+'    shift, and go to state 367
    '-'    shift, and go to state 368
    '*'    shift, and go to state 369
    '/'    shift, and go to state 370
    '%'    shift, and go to state 371

    ".."   error (nonassociative)
    "..."  error (nonassociative)

    $default  reduce using rule 229 (arg)

    relop  go to state 372

    Conflict between rule 229 and token "**" resolved as shift ("(.." < "**").
    Conflict between rule 229 and token "<=>" resolved as shift ("(.." < "<=>").
    Conflict between rule 229 and token "==" resolved as shift ("(.." < "==").
    Conflict between rule 229 and token "===" resolved as shift ("(.." < "===").
    Conflict between rule 229 and token "!=" resolved as shift ("(.." < "!=").
    Conflict between rule 229 and token ">=" resolved as shift ("(.." < ">=").
    Conflict between rule 229 and token "<=" resolved as shift ("(.." < "<=").
    Conflict between rule 229 and token "&&" resolved as shift ("(.." < "&&").
    Conflict between rule 229 and token "||" resolved as shift ("(.." < "||").
    Conflict between rule 229 and token "=~" resolved as shift ("(.." < "=~").
    Conflict between rule 229 and token "!~" resolved as shift ("(.." < "!~").
    Conflict between rule 229 and token ".." resolved as an error (%nonassoc "..").
    Conflict between rule 229 and token "..." resolved as an error (%nonassoc "...").
    Conflict between rule 229 and token "<<" resolved as shift ("(.." < "<<").
    Conflict between rule 229 and token ">>" resolved as shift ("(.." < ">>").
    Conflict between rule 229 and token '?' resolved as reduce ('?' < "(..").
    Conflict between rule 229 and token '>' resolved as shift ("(.." < '>').
    Conflict between rule 229 and token '<' resolved as shift ("(.." < '<').
    Conflict between rule 229 and token '|' resolved as shift ("(.." < '|').
    Conflict between rule 229 and token '^' resolved as shift ("(.." < '^').
    Conflict between rule 229 and token '&' resolved as shift ("(.." < '&').
    Conflict between rule 229 and token '+' resolved as shift ("(.." < '+').
    Conflict between rule 229 and token '-' resolved as shift ("(.." < '-').
    Conflict between rule 229 and token '*' resolved as shift ("(.." < '*').
    Conflict between rule 229 and token '/' resolved as shift ("(.." < '/').
    Conflict between rule 229 and token '%' resolved as shift ("(.." < '%').


State 260

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  230    | "(..." arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '}', ',', ')', ']', ';', '\n']
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"   shift, and go to state 345
    "<=>"  shift, and go to state 346
    "=="   shift, and go to state 347
    "==="  shift, and go to state 348
    "!="   shift, and go to state 349
    ">="   shift, and go to state 350
    "<="   shift, and go to state 351
    "&&"   shift, and go to state 352
    "||"   shift, and go to state 353
    "=~"   shift, and go to state 354
    "!~"   shift, and go to state 355
    "<<"   shift, and go to state 358
    ">>"   shift, and go to state 359
    '>'    shift, and go to state 362
    '<'    shift, and go to state 363
    '|'    shift, and go to state 364
    '^'    shift, and go to state 365
    '&'    shift, and go to state 366
    '+'    shift, and go to state 367
    '-'    shift, and go to state 368
    '*'    shift, and go to state 369
    '/'    shift, and go to state 370
    '%'    shift, and go to state 371

    ".."   error (nonassociative)
    "..."  error (nonassociative)

    $default  reduce using rule 230 (arg)

    relop  go to state 372

    Conflict between rule 230 and token "**" resolved as shift ("(..." < "**").
    Conflict between rule 230 and token "<=>" resolved as shift ("(..." < "<=>").
    Conflict between rule 230 and token "==" resolved as shift ("(..." < "==").
    Conflict between rule 230 and token "===" resolved as shift ("(..." < "===").
    Conflict between rule 230 and token "!=" resolved as shift ("(..." < "!=").
    Conflict between rule 230 and token ">=" resolved as shift ("(..." < ">=").
    Conflict between rule 230 and token "<=" resolved as shift ("(..." < "<=").
    Conflict between rule 230 and token "&&" resolved as shift ("(..." < "&&").
    Conflict between rule 230 and token "||" resolved as shift ("(..." < "||").
    Conflict between rule 230 and token "=~" resolved as shift ("(..." < "=~").
    Conflict between rule 230 and token "!~" resolved as shift ("(..." < "!~").
    Conflict between rule 230 and token ".." resolved as an error (%nonassoc "..").
    Conflict between rule 230 and token "..." resolved as an error (%nonassoc "...").
    Conflict between rule 230 and token "<<" resolved as shift ("(..." < "<<").
    Conflict between rule 230 and token ">>" resolved as shift ("(..." < ">>").
    Conflict between rule 230 and token '?' resolved as reduce ('?' < "(...").
    Conflict between rule 230 and token '>' resolved as shift ("(..." < '>').
    Conflict between rule 230 and token '<' resolved as shift ("(..." < '<').
    Conflict between rule 230 and token '|' resolved as shift ("(..." < '|').
    Conflict between rule 230 and token '^' resolved as shift ("(..." < '^').
    Conflict between rule 230 and token '&' resolved as shift ("(..." < '&').
    Conflict between rule 230 and token '+' resolved as shift ("(..." < '+').
    Conflict between rule 230 and token '-' resolved as shift ("(..." < '-').
    Conflict between rule 230 and token '*' resolved as shift ("(..." < '*').
    Conflict between rule 230 and token '/' resolved as shift ("(..." < '/').
    Conflict between rule 230 and token '%' resolved as shift ("(..." < '%').


State 261

  119 mlhs_node: ":: at EXPR_BEG" "constant" •  [',']
  128 lhs: ":: at EXPR_BEG" "constant" •  ['=']
  223 arg: ":: at EXPR_BEG" "constant" • "operator-assignment" lex_ctxt arg_rhs
  329 primary: ":: at EXPR_BEG" "constant" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ')', ';', '\n']

    "operator-assignment"  shift, and go to state 476

    '='       reduce using rule 128 (lhs)
    ','       reduce using rule 119 (mlhs_node)
    $default  reduce using rule 329 (primary)


State 262

   18 $@3: ε •
   19 stmt_or_begin: "`BEGIN'" • $@3 begin_block

    $default  reduce using rule 18 ($@3)

    $@3  go to state 477


State 263

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   93     | "(" • mlhs_inner rparen
   94 mlhs_inner: • mlhs_basic
   95           | • "(" mlhs_inner rparen
   95           | "(" • mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  107          | "(" • mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  327        | "(" • compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  [')', ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 263
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    ')'   reduce using rule 781 (none)
    ';'   reduce using rule 781 (none)
    '\n'  reduce using rule 781 (none)

    compstmt          go to state 264
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_inner        go to state 478
    mlhs_basic        go to state 269
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 264

  327 primary: "(" compstmt • ')'

    ')'  shift, and go to state 479


State 265

   13 compstmt: stmts • opt_terms
   16 stmts: stmts • terms stmt_or_begin
  768 opt_terms: ε •  ["`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "dummy end", "'}'", '}', ')']
  769          | • terms
  777 term: • ';'
  778     | • '\n'
  779 terms: • term
  780      | • terms ';'

    ';'   shift, and go to state 309
    '\n'  shift, and go to state 310

    $default  reduce using rule 768 (opt_terms)

    opt_terms  go to state 480
    term       go to state 312
    terms      go to state 481


State 266

   15 stmts: stmt_or_begin •

    $default  reduce using rule 15 (stmts)


State 267

   17 stmt_or_begin: stmt •  ["`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "dummy end", "'}'", '}', ')', ';', '\n']
   26 stmt: stmt • "`if' modifier" expr_value
   27     | stmt • "`unless' modifier" expr_value
   28     | stmt • "`while' modifier" expr_value
   29     | stmt • "`until' modifier" expr_value
   30     | stmt • "`rescue' modifier" stmt

    "`if' modifier"      shift, and go to state 314
    "`unless' modifier"  shift, and go to state 315
    "`while' modifier"   shift, and go to state 316
    "`until' modifier"   shift, and go to state 317
    "`rescue' modifier"  shift, and go to state 318

    $default  reduce using rule 17 (stmt_or_begin)


State 268

   93 mlhs: "(" mlhs_inner • rparen
  107 mlhs_item: "(" mlhs_inner • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 482


State 269

   92 mlhs: mlhs_basic •  ['=']
   94 mlhs_inner: mlhs_basic •  [')', '\n']

    '='       reduce using rule 92 (mlhs)
    $default  reduce using rule 94 (mlhs_inner)


State 270

   14 stmts: none •

    $default  reduce using rule 14 (stmts)


State 271

   26 stmt: stmt • "`if' modifier" expr_value
   27     | stmt • "`unless' modifier" expr_value
   28     | stmt • "`while' modifier" expr_value
   29     | stmt • "`until' modifier" expr_value
   30     | stmt • "`rescue' modifier" stmt
  325 $@17: ε •  [')', '\n']
  326 primary: "( arg" stmt • $@17 rparen

    "`if' modifier"      shift, and go to state 314
    "`unless' modifier"  shift, and go to state 315
    "`while' modifier"   shift, and go to state 316
    "`until' modifier"   shift, and go to state 317
    "`rescue' modifier"  shift, and go to state 318

    $default  reduce using rule 325 ($@17)

    $@17  go to state 483


State 272

  324 primary: "( arg" $@16 • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 484


State 273

  330 primary: "[" aref_args • ']'

    ']'  shift, and go to state 485


State 274

  273 aref_args: args • trailer
  274          | args • ',' assocs trailer
  302 args: args • ',' arg_value
  303     | args • ',' "*" arg_value
  304     | args • ',' "*"
  770 opt_nl: ε •  [']']
  771       | • '\n'
  775 trailer: • opt_nl
  776        | • ','

    ','   shift, and go to state 486
    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl   go to state 487
    trailer  go to state 488


State 275

  275 aref_args: assocs • trailer
  747 assocs: assocs • ',' assoc
  770 opt_nl: ε •  [']']
  771       | • '\n'
  775 trailer: • opt_nl
  776        | • ','

    ','   shift, and go to state 489
    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl   go to state 487
    trailer  go to state 490


State 276

  272 aref_args: none •

    $default  reduce using rule 272 (aref_args)


State 277

  748 assoc: arg_value • "=>" arg_value

    "=>"  shift, and go to state 441


State 278

  331 primary: "{" assoc_list • '}'

    '}'  shift, and go to state 491


State 279

  745 assoc_list: assocs • trailer
  747 assocs: assocs • ',' assoc
  770 opt_nl: ε •  ['}']
  771       | • '\n'
  775 trailer: • opt_nl
  776        | • ','

    ','   shift, and go to state 489
    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl   go to state 487
    trailer  go to state 492


State 280

  744 assoc_list: none •

    $default  reduce using rule 744 (assoc_list)


State 281

  337 primary: "`defined?'" • opt_nl '(' $@18 expr rparen
  770 opt_nl: ε •  ['(']
  771       | • '\n'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 493


State 282

  119 mlhs_node: ":: at EXPR_BEG" • "constant"
  329 primary: ":: at EXPR_BEG" • "constant"

    "constant"  shift, and go to state 494


State 283

  644 numeric: tUMINUS_NUM • simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"

    "integer literal"    shift, and go to state 41
    "float literal"      shift, and go to state 42
    "rational literal"   shift, and go to state 43
    "imaginary literal"  shift, and go to state 44

    simple_numeric  go to state 495


State 284

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  105 mlhs_basic: "*" ',' • mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  110 mlhs_post: • mlhs_item
  111          | • mlhs_post ',' mlhs_item
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 281
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    ":: at EXPR_BEG"            shift, and go to state 282
    "("                         shift, and go to state 340
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 283

    defn_head         go to state 285
    defs_head         go to state 286
    fcall             go to state 254
    mlhs_item         go to state 496
    mlhs_post         go to state 497
    mlhs_node         go to state 86
    primary           go to state 288
    primary_value     go to state 289
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 290
    keyword_variable  go to state 291
    var_ref           go to state 124
    backref           go to state 292
    operation         go to state 127


State 285

  361 primary: defn_head • f_arglist $@24 bodystmt k_end
  673 f_paren_args: • '(' f_args rparen
  674 f_arglist: • f_paren_args
  675 @50: ε •  ["local variable or method", "global variable", "instance variable", "constant", "class variable", "label", "**", "(...", "(", "*", "**arg", "&", '&', '*', ';', '\n']
  676 f_arglist: • @50 f_args term

    '('  shift, and go to state 321

    $default  reduce using rule 675 (@50)

    f_paren_args  go to state 498
    f_arglist     go to state 324
    @50           go to state 325


State 286

  363 primary: defs_head • f_arglist $@25 bodystmt k_end
  673 f_paren_args: • '(' f_args rparen
  674 f_arglist: • f_paren_args
  675 @50: ε •  ["local variable or method", "global variable", "instance variable", "constant", "class variable", "label", "**", "(...", "(", "*", "**arg", "&", '&', '*', ';', '\n']
  676 f_arglist: • @50 f_args term

    '('  shift, and go to state 321

    $default  reduce using rule 675 (@50)

    f_paren_args  go to state 498
    f_arglist     go to state 328
    @50           go to state 325


State 287

  102 mlhs_basic: "*" mlhs_node •  ["`in'", '=', ')', '\n']
  103           | "*" mlhs_node • ',' mlhs_post

    ','  shift, and go to state 499

    $default  reduce using rule 102 (mlhs_basic)


State 288

  368 primary_value: primary •

    $default  reduce using rule 368 (primary_value)


State 289

  114 mlhs_node: primary_value • '[' opt_call_args rbracket
  115          | primary_value • call_op "local variable or method"
  116          | primary_value • "::" "local variable or method"
  117          | primary_value • call_op "constant"
  118          | primary_value • "::" "constant"
  328 primary: primary_value • "::" "constant"
  463 method_call: primary_value • call_op operation2 opt_paren_args
  464            | primary_value • "::" operation2 paren_args
  465            | primary_value • "::" operation3
  466            | primary_value • call_op paren_args
  467            | primary_value • "::" paren_args
  470            | primary_value • '[' opt_call_args rbracket
  764 call_op: • '.'
  765        | • "&."

    '.'   shift, and go to state 374
    "&."  shift, and go to state 375
    "::"  shift, and go to state 500
    '['   shift, and go to state 501

    call_op  go to state 502


State 290

  112 mlhs_node: user_variable •  ["`in'", '=', ',', ')', '\n']
  662 var_ref: user_variable •  ['.', "&.", "::", '[']

    '.'       reduce using rule 662 (var_ref)
    "&."      reduce using rule 662 (var_ref)
    "::"      reduce using rule 662 (var_ref)
    '['       reduce using rule 662 (var_ref)
    $default  reduce using rule 112 (mlhs_node)


State 291

  113 mlhs_node: keyword_variable •  ["`in'", '=', ',', ')', '\n']
  663 var_ref: keyword_variable •  ['.', "&.", "::", '[']

    '.'       reduce using rule 663 (var_ref)
    "&."      reduce using rule 663 (var_ref)
    "::"      reduce using rule 663 (var_ref)
    '['       reduce using rule 663 (var_ref)
    $default  reduce using rule 113 (mlhs_node)


State 292

  120 mlhs_node: backref •  ["`in'", '=', ',', ')', '\n']
  319 primary: backref •  ['.', "&.", "::", '[']

    '.'       reduce using rule 319 (primary)
    "&."      reduce using rule 319 (primary)
    "::"      reduce using rule 319 (primary)
    '['       reduce using rule 319 (primary)
    $default  reduce using rule 120 (mlhs_node)


State 293

  448 @28: ε •
  451 lambda: "->" @27 • @28 @29 f_larglist $@30 lambda_body

    $default  reduce using rule 448 (@28)

    @28  go to state 503


State 294

  640 sym: fname •

    $default  reduce using rule 640 (sym)


State 295

  619 string_contents: string_contents • string_content
  624 string_content: • "literal content"
  626               | • tSTRING_DVAR @43 string_dvar
  632               | • tSTRING_DBEG $@44 @45 @46 @47 @48 compstmt "'}'"
  642 dsym: "symbol literal" string_contents • "terminator"

    "literal content"  shift, and go to state 504
    "terminator"       shift, and go to state 505
    tSTRING_DBEG       shift, and go to state 506
    tSTRING_DVAR       shift, and go to state 507

    string_content  go to state 508


State 296

  639 ssym: "symbol literal" sym •

    $default  reduce using rule 639 (ssym)


State 297

  641 sym: nonlocal_var •

    $default  reduce using rule 641 (sym)


State 298

  601 string1: "string literal" string_contents • "terminator"
  619 string_contents: string_contents • string_content
  624 string_content: • "literal content"
  626               | • tSTRING_DVAR @43 string_dvar
  632               | • tSTRING_DBEG $@44 @45 @46 @47 @48 compstmt "'}'"

    "literal content"  shift, and go to state 504
    "terminator"       shift, and go to state 509
    tSTRING_DBEG       shift, and go to state 506
    tSTRING_DVAR       shift, and go to state 507

    string_content  go to state 508


State 299

  602 xstring: "backtick literal" xstring_contents • "terminator"
  621 xstring_contents: xstring_contents • string_content
  624 string_content: • "literal content"
  626               | • tSTRING_DVAR @43 string_dvar
  632               | • tSTRING_DBEG $@44 @45 @46 @47 @48 compstmt "'}'"

    "literal content"  shift, and go to state 504
    "terminator"       shift, and go to state 510
    tSTRING_DBEG       shift, and go to state 506
    tSTRING_DVAR       shift, and go to state 507

    string_content  go to state 511


State 300

  603 regexp: "regexp literal" regexp_contents • tREGEXP_END
  623 regexp_contents: regexp_contents • string_content
  624 string_content: • "literal content"
  626               | • tSTRING_DVAR @43 string_dvar
  632               | • tSTRING_DBEG $@44 @45 @46 @47 @48 compstmt "'}'"

    "literal content"  shift, and go to state 504
    tREGEXP_END        shift, and go to state 512
    tSTRING_DBEG       shift, and go to state 506
    tSTRING_DVAR       shift, and go to state 507

    string_content  go to state 513


State 301

  604 words: "word list" ' ' • word_list "terminator"
  605 word_list: ε •
  606          | • word_list word ' '

    $default  reduce using rule 605 (word_list)

    word_list  go to state 514


State 302

  612 qwords: "verbatim word list" ' ' • qword_list "terminator"
  614 qword_list: ε •
  615           | • qword_list "literal content" ' '

    $default  reduce using rule 614 (qword_list)

    qword_list  go to state 515


State 303

  609 symbols: "symbol list" ' ' • symbol_list "terminator"
  610 symbol_list: ε •
  611            | • symbol_list word ' '

    $default  reduce using rule 610 (symbol_list)

    symbol_list  go to state 516


State 304

  613 qsymbols: "verbatim symbol list" ' ' • qsym_list "terminator"
  616 qsym_list: ε •
  617          | • qsym_list "literal content" ' '

    $default  reduce using rule 616 (qsym_list)

    qsym_list  go to state 517


State 305

  237 arg: tUMINUS_NUM simple_numeric • "**" arg
  644 numeric: tUMINUS_NUM simple_numeric •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']

    "**"  shift, and go to state 518

    $default  reduce using rule 644 (numeric)

    Conflict between rule 644 and token "**" resolved as shift (tLOWEST < "**").


State 306

   58 expr: '!' command_call •

    $default  reduce using rule 58 (expr)


State 307

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  250    | '!' arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', ',', ')', ']', ';', '\n']
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    $default  reduce using rule 250 (arg)

    relop  go to state 372

    Conflict between rule 250 and token "**" resolved as reduce ("**" < '!').
    Conflict between rule 250 and token "<=>" resolved as reduce ("<=>" < '!').
    Conflict between rule 250 and token "==" resolved as reduce ("==" < '!').
    Conflict between rule 250 and token "===" resolved as reduce ("===" < '!').
    Conflict between rule 250 and token "!=" resolved as reduce ("!=" < '!').
    Conflict between rule 250 and token ">=" resolved as reduce (">=" < '!').
    Conflict between rule 250 and token "<=" resolved as reduce ("<=" < '!').
    Conflict between rule 250 and token "&&" resolved as reduce ("&&" < '!').
    Conflict between rule 250 and token "||" resolved as reduce ("||" < '!').
    Conflict between rule 250 and token "=~" resolved as reduce ("=~" < '!').
    Conflict between rule 250 and token "!~" resolved as reduce ("!~" < '!').
    Conflict between rule 250 and token ".." resolved as reduce (".." < '!').
    Conflict between rule 250 and token "..." resolved as reduce ("..." < '!').
    Conflict between rule 250 and token "<<" resolved as reduce ("<<" < '!').
    Conflict between rule 250 and token ">>" resolved as reduce (">>" < '!').
    Conflict between rule 250 and token '?' resolved as reduce ('?' < '!').
    Conflict between rule 250 and token '>' resolved as reduce ('>' < '!').
    Conflict between rule 250 and token '<' resolved as reduce ('<' < '!').
    Conflict between rule 250 and token '|' resolved as reduce ('|' < '!').
    Conflict between rule 250 and token '^' resolved as reduce ('^' < '!').
    Conflict between rule 250 and token '&' resolved as reduce ('&' < '!').
    Conflict between rule 250 and token '+' resolved as reduce ('+' < '!').
    Conflict between rule 250 and token '-' resolved as reduce ('-' < '!').
    Conflict between rule 250 and token '*' resolved as reduce ('*' < '!').
    Conflict between rule 250 and token '/' resolved as reduce ('/' < '!').
    Conflict between rule 250 and token '%' resolved as reduce ('%' < '!').


State 308

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  251    | '~' arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', ',', ')', ']', ';', '\n']
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    $default  reduce using rule 251 (arg)

    relop  go to state 372

    Conflict between rule 251 and token "**" resolved as reduce ("**" < '~').
    Conflict between rule 251 and token "<=>" resolved as reduce ("<=>" < '~').
    Conflict between rule 251 and token "==" resolved as reduce ("==" < '~').
    Conflict between rule 251 and token "===" resolved as reduce ("===" < '~').
    Conflict between rule 251 and token "!=" resolved as reduce ("!=" < '~').
    Conflict between rule 251 and token ">=" resolved as reduce (">=" < '~').
    Conflict between rule 251 and token "<=" resolved as reduce ("<=" < '~').
    Conflict between rule 251 and token "&&" resolved as reduce ("&&" < '~').
    Conflict between rule 251 and token "||" resolved as reduce ("||" < '~').
    Conflict between rule 251 and token "=~" resolved as reduce ("=~" < '~').
    Conflict between rule 251 and token "!~" resolved as reduce ("!~" < '~').
    Conflict between rule 251 and token ".." resolved as reduce (".." < '~').
    Conflict between rule 251 and token "..." resolved as reduce ("..." < '~').
    Conflict between rule 251 and token "<<" resolved as reduce ("<<" < '~').
    Conflict between rule 251 and token ">>" resolved as reduce (">>" < '~').
    Conflict between rule 251 and token '?' resolved as reduce ('?' < '~').
    Conflict between rule 251 and token '>' resolved as reduce ('>' < '~').
    Conflict between rule 251 and token '<' resolved as reduce ('<' < '~').
    Conflict between rule 251 and token '|' resolved as reduce ('|' < '~').
    Conflict between rule 251 and token '^' resolved as reduce ('^' < '~').
    Conflict between rule 251 and token '&' resolved as reduce ('&' < '~').
    Conflict between rule 251 and token '+' resolved as reduce ('+' < '~').
    Conflict between rule 251 and token '-' resolved as reduce ('-' < '~').
    Conflict between rule 251 and token '*' resolved as reduce ('*' < '~').
    Conflict between rule 251 and token '/' resolved as reduce ('/' < '~').
    Conflict between rule 251 and token '%' resolved as reduce ('%' < '~').


State 309

  777 term: ';' •

    $default  reduce using rule 777 (term)


State 310

  778 term: '\n' •

    $default  reduce using rule 778 (term)


State 311

    3 top_compstmt: top_stmts opt_terms •

    $default  reduce using rule 3 (top_compstmt)


State 312

  779 terms: term •

    $default  reduce using rule 779 (terms)


State 313

    6 top_stmts: top_stmts terms • top_stmt
    7 top_stmt: • stmt
    8         | • "`BEGIN'" begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  769 opt_terms: terms •  ["end-of-input", '}']
  780 terms: terms • ';'

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 30
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69
    ';'                         shift, and go to state 519

    "end-of-input"  reduce using rule 769 (opt_terms)
    '}'             reduce using rule 769 (opt_terms)

    top_stmt          go to state 520
    stmt              go to state 73
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127


State 314

   26 stmt: stmt "`if' modifier" • expr_value
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   70 expr_value: • expr
   71           | • error
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 380
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 381
    defn_head         go to state 218
    defs_head         go to state 219
    expr_value        go to state 521
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 315

   27 stmt: stmt "`unless' modifier" • expr_value
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   70 expr_value: • expr
   71           | • error
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 380
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 381
    defn_head         go to state 218
    defs_head         go to state 219
    expr_value        go to state 522
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 316

   28 stmt: stmt "`while' modifier" • expr_value
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   70 expr_value: • expr
   71           | • error
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 380
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 381
    defn_head         go to state 218
    defs_head         go to state 219
    expr_value        go to state 523
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 317

   29 stmt: stmt "`until' modifier" • expr_value
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   70 expr_value: • expr
   71           | • error
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 380
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 381
    defn_head         go to state 218
    defs_head         go to state 219
    expr_value        go to state 524
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 318

   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   30     | stmt "`rescue' modifier" • stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    stmt              go to state 525
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127


State 319

   54 expr: • command_call
   55     | • expr "`and'" expr
   55     | expr "`and'" • expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 526
    defn_head         go to state 218
    defs_head         go to state 219
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 320

   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   56     | expr "`or'" • expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 527
    defn_head         go to state 218
    defs_head         go to state 219
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 321

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  556 p_kwnorest: • kwrest_mark "`nil'"
  673 f_paren_args: '(' • f_args rparen
  677 args_tail: • f_kwarg ',' f_kwrest opt_f_block_arg
  678          | • f_kwarg opt_f_block_arg
  679          | • f_any_kwrest opt_f_block_arg
  680          | • f_block_arg
  681          | • args_forward
  684 f_args: • f_arg ',' f_optarg ',' f_rest_arg opt_args_tail
  685       | • f_arg ',' f_optarg ',' f_rest_arg ',' f_arg opt_args_tail
  686       | • f_arg ',' f_optarg opt_args_tail
  687       | • f_arg ',' f_optarg ',' f_arg opt_args_tail
  688       | • f_arg ',' f_rest_arg opt_args_tail
  689       | • f_arg ',' f_rest_arg ',' f_arg opt_args_tail
  690       | • f_arg opt_args_tail
  691       | • f_optarg ',' f_rest_arg opt_args_tail
  692       | • f_optarg ',' f_rest_arg ',' f_arg opt_args_tail
  693       | • f_optarg opt_args_tail
  694       | • f_optarg ',' f_arg opt_args_tail
  695       | • f_rest_arg opt_args_tail
  696       | • f_rest_arg ',' f_arg opt_args_tail
  697       | • args_tail
  698       | ε •  [')', '\n']
  699 args_forward: • "(..."
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  712 f_kw: • f_label arg_value
  713     | • f_label
  718 f_kwarg: • f_kw
  719        | • f_kwarg ',' f_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  725 f_opt: • f_arg_asgn f_eq arg_value
  729 f_optarg: • f_opt
  730         | • f_optarg ',' f_opt
  731 restarg_mark: • '*'
  732             | • "*"
  733 f_rest_arg: • restarg_mark "local variable or method"
  734           | • restarg_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "(..."                      shift, and go to state 535
    "("                         shift, and go to state 536
    "*"                         shift, and go to state 537
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540
    '*'                         shift, and go to state 541

    $default  reduce using rule 698 (f_args)

    f_any_kwrest  go to state 542
    p_kwnorest    go to state 543
    args_tail     go to state 544
    f_args        go to state 545
    args_forward  go to state 546
    f_bad_arg     go to state 547
    f_norm_arg    go to state 548
    f_arg_asgn    go to state 549
    f_arg_item    go to state 550
    f_arg         go to state 551
    f_label       go to state 552
    f_kw          go to state 553
    f_kwarg       go to state 554
    kwrest_mark   go to state 555
    f_no_kwarg    go to state 556
    f_kwrest      go to state 557
    f_opt         go to state 558
    f_optarg      go to state 559
    restarg_mark  go to state 560
    f_rest_arg    go to state 561
    blkarg_mark   go to state 562
    f_block_arg   go to state 563


State 322

   46 command_asgn: defn_head f_opt_paren_args • '=' command
   47             | defn_head f_opt_paren_args • '=' command "`rescue' modifier" arg
  259 arg: defn_head f_opt_paren_args • '=' arg
  260    | defn_head f_opt_paren_args • '=' arg "`rescue' modifier" arg

    '='  shift, and go to state 564


State 323

  671 f_opt_paren_args: f_paren_args •  ['=']
  674 f_arglist: f_paren_args •  [error, "`class'", "`module'", "`def'", "`undef'", "`begin'", "`rescue'", "`ensure'", "`end'", "`if'", "`unless'", "`else'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`alias'", "`defined?'", "`BEGIN'", "`END'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "dummy end", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', ';', '\n']

    '='       reduce using rule 671 (f_opt_paren_args)
    $default  reduce using rule 674 (f_arglist)


State 324

  360 $@24: ε •
  361 primary: defn_head f_arglist • $@24 bodystmt k_end

    $default  reduce using rule 360 ($@24)

    $@24  go to state 565


State 325

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  556 p_kwnorest: • kwrest_mark "`nil'"
  676 f_arglist: @50 • f_args term
  677 args_tail: • f_kwarg ',' f_kwrest opt_f_block_arg
  678          | • f_kwarg opt_f_block_arg
  679          | • f_any_kwrest opt_f_block_arg
  680          | • f_block_arg
  681          | • args_forward
  684 f_args: • f_arg ',' f_optarg ',' f_rest_arg opt_args_tail
  685       | • f_arg ',' f_optarg ',' f_rest_arg ',' f_arg opt_args_tail
  686       | • f_arg ',' f_optarg opt_args_tail
  687       | • f_arg ',' f_optarg ',' f_arg opt_args_tail
  688       | • f_arg ',' f_rest_arg opt_args_tail
  689       | • f_arg ',' f_rest_arg ',' f_arg opt_args_tail
  690       | • f_arg opt_args_tail
  691       | • f_optarg ',' f_rest_arg opt_args_tail
  692       | • f_optarg ',' f_rest_arg ',' f_arg opt_args_tail
  693       | • f_optarg opt_args_tail
  694       | • f_optarg ',' f_arg opt_args_tail
  695       | • f_rest_arg opt_args_tail
  696       | • f_rest_arg ',' f_arg opt_args_tail
  697       | • args_tail
  698       | ε •  [';', '\n']
  699 args_forward: • "(..."
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  712 f_kw: • f_label arg_value
  713     | • f_label
  718 f_kwarg: • f_kw
  719        | • f_kwarg ',' f_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  725 f_opt: • f_arg_asgn f_eq arg_value
  729 f_optarg: • f_opt
  730         | • f_optarg ',' f_opt
  731 restarg_mark: • '*'
  732             | • "*"
  733 f_rest_arg: • restarg_mark "local variable or method"
  734           | • restarg_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "(..."                      shift, and go to state 535
    "("                         shift, and go to state 536
    "*"                         shift, and go to state 537
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540
    '*'                         shift, and go to state 541

    $default  reduce using rule 698 (f_args)

    f_any_kwrest  go to state 542
    p_kwnorest    go to state 543
    args_tail     go to state 544
    f_args        go to state 566
    args_forward  go to state 546
    f_bad_arg     go to state 547
    f_norm_arg    go to state 548
    f_arg_asgn    go to state 549
    f_arg_item    go to state 550
    f_arg         go to state 551
    f_label       go to state 552
    f_kw          go to state 553
    f_kwarg       go to state 554
    kwrest_mark   go to state 555
    f_no_kwarg    go to state 556
    f_kwrest      go to state 557
    f_opt         go to state 558
    f_optarg      go to state 559
    restarg_mark  go to state 560
    f_rest_arg    go to state 561
    blkarg_mark   go to state 562
    f_block_arg   go to state 563


State 326

  672 f_opt_paren_args: none •

    $default  reduce using rule 672 (f_opt_paren_args)


State 327

   48 command_asgn: defs_head f_opt_paren_args • '=' command
   49             | defs_head f_opt_paren_args • '=' command "`rescue' modifier" arg
  261 arg: defs_head f_opt_paren_args • '=' arg
  262    | defs_head f_opt_paren_args • '=' arg "`rescue' modifier" arg

    '='  shift, and go to state 567


State 328

  362 $@25: ε •
  363 primary: defs_head f_arglist • $@25 bodystmt k_end

    $default  reduce using rule 362 ($@25)

    $@25  go to state 568


State 329

  379 k_do: "`do'" •

    $default  reduce using rule 379 (k_do)


State 330

  471 brace_block: '{' • brace_body '}'
  473 @32: ε •
  476 brace_body: • @32 @33 @34 opt_block_param compstmt

    $default  reduce using rule 473 (@32)

    brace_body  go to state 569
    @32         go to state 570


State 331

  462 method_call: fcall paren_args •

    $default  reduce using rule 462 (method_call)


State 332

   79 cmd_brace_block: • "{ arg" brace_body '}'
   81 command: fcall command_args •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ']', ';', '\n']
   82        | fcall command_args • cmd_brace_block

    "{ arg"  shift, and go to state 571

    $default  reduce using rule 81 (command)

    cmd_brace_block  go to state 572

    Conflict between rule 81 and token "{ arg" resolved as shift (tLOWEST < "{ arg").


State 333

  472 brace_block: k_do • do_body k_end
  477 @35: ε •
  480 do_body: • @35 @36 @37 opt_block_param bodystmt

    $default  reduce using rule 477 (@35)

    do_body  go to state 573
    @35      go to state 574


State 334

  340 primary: fcall brace_block •

    $default  reduce using rule 340 (primary)


State 335

  380 k_do_block: "`do' for block" •

    $default  reduce using rule 380 (k_do_block)


State 336

  457 do_block: k_do_block • do_body k_end
  477 @35: ε •
  480 do_body: • @35 @36 @37 opt_block_param bodystmt

    $default  reduce using rule 477 (@35)

    do_body  go to state 575
    @35      go to state 574


State 337

  458 block_call: command do_block •

    $default  reduce using rule 458 (block_call)


State 338

   33 stmt: mlhs '=' • lex_ctxt command_call
   35     | mlhs '=' • lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | mlhs '=' • lex_ctxt mrhs_arg
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 576
    none      go to state 577


State 339

  108 mlhs_head: mlhs_item ',' •

    $default  reduce using rule 108 (mlhs_head)


State 340

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   94 mlhs_inner: • mlhs_basic
   95           | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  107          | "(" • mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  327        | "(" • compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  [')', ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 263
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    ')'   reduce using rule 781 (none)
    ';'   reduce using rule 781 (none)
    '\n'  reduce using rule 781 (none)

    compstmt          go to state 264
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_inner        go to state 578
    mlhs_basic        go to state 269
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 341

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   98 mlhs_basic: mlhs_head "*" • mlhs_node
   99           | mlhs_head "*" • mlhs_node ',' mlhs_post
  100           | mlhs_head "*" •  ["`in'", '=', ')', '\n']
  101           | mlhs_head "*" • ',' mlhs_post
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 281
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    ":: at EXPR_BEG"            shift, and go to state 282
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 283
    ','                         shift, and go to state 579

    $default  reduce using rule 100 (mlhs_basic)

    defn_head         go to state 285
    defs_head         go to state 286
    fcall             go to state 254
    mlhs_node         go to state 580
    primary           go to state 288
    primary_value     go to state 289
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 290
    keyword_variable  go to state 291
    var_ref           go to state 124
    backref           go to state 292
    operation         go to state 127


State 342

   97 mlhs_basic: mlhs_head mlhs_item •  ["`in'", '=', ')', '\n']
  109 mlhs_head: mlhs_head mlhs_item • ','

    ','  shift, and go to state 581

    $default  reduce using rule 97 (mlhs_basic)


State 343

   34 stmt: lhs '=' • lex_ctxt mrhs
   39 command_asgn: lhs '=' • lex_ctxt command_rhs
  216 arg: lhs '=' • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 582
    none      go to state 577


State 344

   62 @7: ε •
   64 expr: arg "`in'" • @7 @8 p_top_expr_body

    $default  reduce using rule 62 (@7)

    @7  go to state 583


State 345

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  236    | arg "**" • arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 584
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 346

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  243    | arg "<=>" • arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 585
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 347

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  245    | arg "==" • arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 586
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 348

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  246    | arg "===" • arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 587
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 349

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  247    | arg "!=" • arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 588
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 350

  266 relop: ">=" •

    $default  reduce using rule 266 (relop)


State 351

  267 relop: "<=" •

    $default  reduce using rule 267 (relop)


State 352

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  254    | arg "&&" • arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 589
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 353

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  255    | arg "||" • arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 590
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 354

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  248    | arg "=~" • arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 591
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 355

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  249    | arg "!~" • arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 592
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 356

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  225    | arg ".." • arg
  226    | • arg "..." arg
  227    | • arg ".."
  227    | arg ".." •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', ',', ')', ']', ';', '\n']
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 227 (arg)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 593
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 357

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  226    | arg "..." • arg
  227    | • arg ".."
  228    | • arg "..."
  228    | arg "..." •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', ',', ')', ']', ';', '\n']
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 228 (arg)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 594
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 358

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  252    | arg "<<" • arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 595
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 359

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  253    | arg ">>" • arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 596
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 360

   59 @5: ε •
   61 expr: arg "=>" • @5 @6 p_top_expr_body

    $default  reduce using rule 59 (@5)

    @5  go to state 597


State 361

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  258    | arg '?' • arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 598
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 362

  264 relop: '>' •

    $default  reduce using rule 264 (relop)


State 363

  265 relop: '<' •

    $default  reduce using rule 265 (relop)


State 364

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  240    | arg '|' • arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 599
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 365

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  241    | arg '^' • arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 600
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 366

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  242    | arg '&' • arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 601
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 367

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  231    | arg '+' • arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 602
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 368

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  232    | arg '-' • arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 603
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 369

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  233    | arg '*' • arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 604
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 370

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  234    | arg '/' • arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 605
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 371

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  235    | arg '%' • arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 606
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 372

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  268         | arg relop • arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 607
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 373

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  269         | rel_expr relop • arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 608
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 374

  764 call_op: '.' •

    $default  reduce using rule 764 (call_op)


State 375

  765 call_op: "&." •

    $default  reduce using rule 765 (call_op)


State 376

   44 command_asgn: primary_value "::" • "constant" "operator-assignment" lex_ctxt command_rhs
   45             | primary_value "::" • "local variable or method" "operator-assignment" lex_ctxt command_rhs
   85 command: primary_value "::" • operation2 command_args
   86        | primary_value "::" • operation2 command_args cmd_brace_block
  116 mlhs_node: primary_value "::" • "local variable or method"
  118          | primary_value "::" • "constant"
  125 lhs: primary_value "::" • "local variable or method"
  127    | primary_value "::" • "constant"
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  221 arg: primary_value "::" • "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | primary_value "::" • "constant" "operator-assignment" lex_ctxt arg_rhs
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  328 primary: primary_value "::" • "constant"
  464 method_call: primary_value "::" • operation2 paren_args
  465            | primary_value "::" • operation3
  467            | primary_value "::" • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op
  759 operation3: • "local variable or method"
  760           | • "method"
  761           | • op

    "local variable or method"  shift, and go to state 609
    "method"                    shift, and go to state 610
    "constant"                  shift, and go to state 611
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 612
    paren_args  go to state 613
    operation   go to state 614
    operation2  go to state 615
    operation3  go to state 616


State 377

   41 command_asgn: primary_value '[' • opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  114 mlhs_node: primary_value '[' • opt_call_args rbracket
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  123    | primary_value '[' • opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  218    | primary_value '[' • opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  283 opt_call_args: • none
  284              | • call_args
  285              | • args ','
  286              | • args ',' assocs ','
  287              | • assocs ','
  288 call_args: • command
  289          | • args opt_block_arg
  290          | • assocs opt_block_arg
  291          | • args ',' assocs opt_block_arg
  292          | • block_arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  470            | primary_value '[' • opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  [']', '\n']

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 213
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 781 (none)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 80
    command           go to state 220
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 223
    opt_call_args     go to state 617
    call_args         go to state 458
    block_arg         go to state 225
    args              go to state 618
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 461
    assoc             go to state 233
    operation         go to state 127
    none              go to state 462


State 378

   42 command_asgn: primary_value call_op • "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | primary_value call_op • "constant" "operator-assignment" lex_ctxt command_rhs
   83 command: primary_value call_op • operation2 command_args
   84        | primary_value call_op • operation2 command_args cmd_brace_block
  115 mlhs_node: primary_value call_op • "local variable or method"
  117          | primary_value call_op • "constant"
  124 lhs: primary_value call_op • "local variable or method"
  126    | primary_value call_op • "constant"
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  219 arg: primary_value call_op • "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | primary_value call_op • "constant" "operator-assignment" lex_ctxt arg_rhs
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  463 method_call: primary_value call_op • operation2 opt_paren_args
  466            | primary_value call_op • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op

    "local variable or method"  shift, and go to state 619
    "method"                    shift, and go to state 620
    "constant"                  shift, and go to state 621
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 622
    paren_args  go to state 623
    operation   go to state 614
    operation2  go to state 624


State 379

   11 bodystmt: • compstmt opt_rescue k_else $@2 compstmt opt_ensure
   12         | • compstmt opt_rescue opt_ensure
   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  322        | k_begin $@15 • bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`rescue'", "`ensure'", "`end'", "`else'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`rescue'"   reduce using rule 781 (none)
    "`ensure'"   reduce using rule 781 (none)
    "`end'"      reduce using rule 781 (none)
    "`else'"     reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    bodystmt          go to state 625
    compstmt          go to state 626
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 380

   71 expr_value: error •

    $default  reduce using rule 71 (expr_value)


State 381

   55 expr: expr • "`and'" expr
   56     | expr • "`or'" expr
   70 expr_value: expr •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']

    "`and'"  shift, and go to state 319
    "`or'"   shift, and go to state 320

    $default  reduce using rule 70 (expr_value)


State 382

  344 primary: k_if expr_value • then compstmt if_tail k_end
  389 then: • term
  390     | • "`then'"
  391     | • term "`then'"
  777 term: • ';'
  778     | • '\n'

    "`then'"  shift, and go to state 627
    ';'       shift, and go to state 309
    '\n'      shift, and go to state 310

    then  go to state 628
    term  go to state 629


State 383

  345 primary: k_unless expr_value • then compstmt opt_else k_end
  389 then: • term
  390     | • "`then'"
  391     | • term "`then'"
  777 term: • ';'
  778     | • '\n'

    "`then'"  shift, and go to state 627
    ';'       shift, and go to state 309
    '\n'      shift, and go to state 310

    then  go to state 630
    term  go to state 629


State 384

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  346        | k_while expr_value_do • compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`end'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`end'"      reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    compstmt          go to state 631
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 385

   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   70 expr_value: • expr
   71           | • error
   74 expr_value_do: $@10 • expr_value do $@11
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 380
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 381
    defn_head         go to state 218
    defs_head         go to state 219
    expr_value        go to state 632
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 386

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  347        | k_until expr_value_do • compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`end'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`end'"      reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    compstmt          go to state 633
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 387

  349 primary: k_case expr_value • opt_terms @19 case_body k_end
  352        | k_case expr_value • opt_terms p_case_body k_end
  768 opt_terms: ε •  ["`when'", "`in'"]
  769          | • terms
  777 term: • ';'
  778     | • '\n'
  779 terms: • term
  780      | • terms ';'

    ';'   shift, and go to state 309
    '\n'  shift, and go to state 310

    $default  reduce using rule 768 (opt_terms)

    opt_terms  go to state 634
    term       go to state 312
    terms      go to state 389


State 388

  350 @20: ε •
  351 primary: k_case opt_terms • @20 case_body k_end

    $default  reduce using rule 350 (@20)

    @20  go to state 635


State 389

  769 opt_terms: terms •  ["`when'", "`in'"]
  780 terms: terms • ';'

    ';'  shift, and go to state 519

    $default  reduce using rule 769 (opt_terms)


State 390

  119 mlhs_node: ":: at EXPR_BEG" • "constant"
  128 lhs: ":: at EXPR_BEG" • "constant"
  329 primary: ":: at EXPR_BEG" • "constant"

    "constant"  shift, and go to state 636


State 391

  399 for_var: mlhs •

    $default  reduce using rule 399 (for_var)


State 392

  398 for_var: lhs •

    $default  reduce using rule 398 (for_var)


State 393

  114 mlhs_node: primary_value • '[' opt_call_args rbracket
  115          | primary_value • call_op "local variable or method"
  116          | primary_value • "::" "local variable or method"
  117          | primary_value • call_op "constant"
  118          | primary_value • "::" "constant"
  123 lhs: primary_value • '[' opt_call_args rbracket
  124    | primary_value • call_op "local variable or method"
  125    | primary_value • "::" "local variable or method"
  126    | primary_value • call_op "constant"
  127    | primary_value • "::" "constant"
  328 primary: primary_value • "::" "constant"
  463 method_call: primary_value • call_op operation2 opt_paren_args
  464            | primary_value • "::" operation2 paren_args
  465            | primary_value • "::" operation3
  466            | primary_value • call_op paren_args
  467            | primary_value • "::" paren_args
  470            | primary_value • '[' opt_call_args rbracket
  764 call_op: • '.'
  765        | • "&."

    '.'   shift, and go to state 374
    "&."  shift, and go to state 375
    "::"  shift, and go to state 637
    '['   shift, and go to state 638

    call_op  go to state 639


State 394

  353 primary: k_for for_var • "`in'" expr_value_do compstmt k_end

    "`in'"  shift, and go to state 640


State 395

  112 mlhs_node: user_variable •  [',']
  121 lhs: user_variable •  ["`in'"]
  662 var_ref: user_variable •  ['.', "&.", "::", '[']

    "`in'"    reduce using rule 121 (lhs)
    ','       reduce using rule 112 (mlhs_node)
    $default  reduce using rule 662 (var_ref)


State 396

  113 mlhs_node: keyword_variable •  [',']
  122 lhs: keyword_variable •  ["`in'"]
  663 var_ref: keyword_variable •  ['.', "&.", "::", '[']

    "`in'"    reduce using rule 122 (lhs)
    ','       reduce using rule 113 (mlhs_node)
    $default  reduce using rule 663 (var_ref)


State 397

  120 mlhs_node: backref •  [',']
  129 lhs: backref •  ["`in'"]
  319 primary: backref •  ['.', "&.", "::", '[']

    "`in'"    reduce using rule 129 (lhs)
    ','       reduce using rule 120 (mlhs_node)
    $default  reduce using rule 319 (primary)


State 398

  130 cname: "local variable or method" •  [error, "`class'", "`module'", "`def'", "`undef'", "`begin'", "`rescue'", "`ensure'", "`end'", "`if'", "`unless'", "`else'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`alias'", "`defined?'", "`BEGIN'", "`END'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "dummy end", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", '<', tUMINUS_NUM, '!', '~', ';', '\n']
  652 user_variable: "local variable or method" •  ['.', "&.", "::", '[']
  754 operation: "local variable or method" •  ["`do'", '{', '(']

    "`do'"    reduce using rule 754 (operation)
    '.'       reduce using rule 652 (user_variable)
    "&."      reduce using rule 652 (user_variable)
    "::"      reduce using rule 652 (user_variable)
    '{'       reduce using rule 754 (operation)
    '['       reduce using rule 652 (user_variable)
    '('       reduce using rule 754 (operation)
    $default  reduce using rule 130 (cname)


State 399

  131 cname: "constant" •  [error, "`class'", "`module'", "`def'", "`undef'", "`begin'", "`rescue'", "`ensure'", "`end'", "`if'", "`unless'", "`else'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`alias'", "`defined?'", "`BEGIN'", "`END'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "dummy end", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", '<', tUMINUS_NUM, '!', '~', ';', '\n']
  653 user_variable: "constant" •  ['.', "&.", "::", '[']
  755 operation: "constant" •  ["`do'", '{', '(']

    "`do'"    reduce using rule 755 (operation)
    '.'       reduce using rule 653 (user_variable)
    "&."      reduce using rule 653 (user_variable)
    "::"      reduce using rule 653 (user_variable)
    '{'       reduce using rule 755 (operation)
    '['       reduce using rule 653 (user_variable)
    '('       reduce using rule 755 (operation)
    $default  reduce using rule 131 (cname)


State 400

   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  357        | k_class "<<" • expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 641
    defn_head         go to state 218
    defs_head         go to state 219
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 401

  130 cname: • "local variable or method"
  131      | • "constant"
  132 cpath: ":: at EXPR_BEG" • cname
  329 primary: ":: at EXPR_BEG" • "constant"

    "local variable or method"  shift, and go to state 642
    "constant"                  shift, and go to state 643

    cname  go to state 644


State 402

  133 cpath: cname •

    $default  reduce using rule 133 (cpath)


State 403

  355 primary: k_class cpath • superclass $@21 bodystmt k_end
  669 superclass: • '<' $@49 expr_value term
  670           | ε •  [error, "`class'", "`module'", "`def'", "`undef'", "`begin'", "`rescue'", "`ensure'", "`end'", "`if'", "`unless'", "`else'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`alias'", "`defined?'", "`BEGIN'", "`END'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "dummy end", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', ';', '\n']

    '<'  shift, and go to state 645

    $default  reduce using rule 670 (superclass)

    superclass  go to state 646


State 404

  134 cpath: primary_value • "::" cname
  328 primary: primary_value • "::" "constant"
  463 method_call: primary_value • call_op operation2 opt_paren_args
  464            | primary_value • "::" operation2 paren_args
  465            | primary_value • "::" operation3
  466            | primary_value • call_op paren_args
  467            | primary_value • "::" paren_args
  470            | primary_value • '[' opt_call_args rbracket
  764 call_op: • '.'
  765        | • "&."

    '.'   shift, and go to state 374
    "&."  shift, and go to state 375
    "::"  shift, and go to state 647
    '['   shift, and go to state 648

    call_op  go to state 649


State 405

  662 var_ref: user_variable •

    $default  reduce using rule 662 (var_ref)


State 406

  663 var_ref: keyword_variable •

    $default  reduce using rule 663 (var_ref)


State 407

  319 primary: backref •

    $default  reduce using rule 319 (primary)


State 408

  358 $@23: ε •
  359 primary: k_module cpath • $@23 bodystmt k_end

    $default  reduce using rule 358 ($@23)

    $@23  go to state 650


State 409

  205 reswords: "`self'" •  ["local variable or method", "global variable", "instance variable", "constant", "class variable", "label", "**", "(...", "(", "*", "**arg", "&", '=', '&', '*', '(', ';', '\n']
  656 keyword_variable: "`self'" •  ['.', "::"]

    '.'       reduce using rule 656 (keyword_variable)
    "::"      reduce using rule 656 (keyword_variable)
    $default  reduce using rule 205 (reswords)


State 410

  198 reswords: "`nil'" •  ["local variable or method", "global variable", "instance variable", "constant", "class variable", "label", "**", "(...", "(", "*", "**arg", "&", '=', '&', '*', '(', ';', '\n']
  655 keyword_variable: "`nil'" •  ['.', "::"]

    '.'       reduce using rule 655 (keyword_variable)
    "::"      reduce using rule 655 (keyword_variable)
    $default  reduce using rule 198 (reswords)


State 411

  208 reswords: "`true'" •  ["local variable or method", "global variable", "instance variable", "constant", "class variable", "label", "**", "(...", "(", "*", "**arg", "&", '=', '&', '*', '(', ';', '\n']
  657 keyword_variable: "`true'" •  ['.', "::"]

    '.'       reduce using rule 657 (keyword_variable)
    "::"      reduce using rule 657 (keyword_variable)
    $default  reduce using rule 208 (reswords)


State 412

  193 reswords: "`false'" •  ["local variable or method", "global variable", "instance variable", "constant", "class variable", "label", "**", "(...", "(", "*", "**arg", "&", '=', '&', '*', '(', ';', '\n']
  658 keyword_variable: "`false'" •  ['.', "::"]

    '.'       reduce using rule 658 (keyword_variable)
    "::"      reduce using rule 658 (keyword_variable)
    $default  reduce using rule 193 (reswords)


State 413

  175 reswords: "`__LINE__'" •  ["local variable or method", "global variable", "instance variable", "constant", "class variable", "label", "**", "(...", "(", "*", "**arg", "&", '=', '&', '*', '(', ';', '\n']
  660 keyword_variable: "`__LINE__'" •  ['.', "::"]

    '.'       reduce using rule 660 (keyword_variable)
    "::"      reduce using rule 660 (keyword_variable)
    $default  reduce using rule 175 (reswords)


State 414

  176 reswords: "`__FILE__'" •  ["local variable or method", "global variable", "instance variable", "constant", "class variable", "label", "**", "(...", "(", "*", "**arg", "&", '=', '&', '*', '(', ';', '\n']
  659 keyword_variable: "`__FILE__'" •  ['.', "::"]

    '.'       reduce using rule 659 (keyword_variable)
    "::"      reduce using rule 659 (keyword_variable)
    $default  reduce using rule 176 (reswords)


State 415

  177 reswords: "`__ENCODING__'" •  ["local variable or method", "global variable", "instance variable", "constant", "class variable", "label", "**", "(...", "(", "*", "**arg", "&", '=', '&', '*', '(', ';', '\n']
  661 keyword_variable: "`__ENCODING__'" •  ['.', "::"]

    '.'       reduce using rule 661 (keyword_variable)
    "::"      reduce using rule 661 (keyword_variable)
    $default  reduce using rule 177 (reswords)


State 416

  135 fname: "local variable or method" •  ["local variable or method", "global variable", "instance variable", "constant", "class variable", "label", "**", "(...", "(", "*", "**arg", "&", '=', '&', '*', '(', ';', '\n']
  652 user_variable: "local variable or method" •  ['.', "::"]

    '.'       reduce using rule 652 (user_variable)
    "::"      reduce using rule 652 (user_variable)
    $default  reduce using rule 135 (fname)


State 417

  136 fname: "constant" •  ["local variable or method", "global variable", "instance variable", "constant", "class variable", "label", "**", "(...", "(", "*", "**arg", "&", '=', '&', '*', '(', ';', '\n']
  653 user_variable: "constant" •  ['.', "::"]

    '.'       reduce using rule 653 (user_variable)
    "::"      reduce using rule 653 (user_variable)
    $default  reduce using rule 136 (fname)


State 418

  742 $@51: ε •
  743 singleton: '(' • $@51 expr rparen

    $default  reduce using rule 742 ($@51)

    $@51  go to state 651


State 419

   67 defn_head: k_def def_name •

    $default  reduce using rule 67 (defn_head)


State 420

   66 def_name: fname •

    $default  reduce using rule 66 (def_name)


State 421

  741 singleton: var_ref •

    $default  reduce using rule 741 (singleton)


State 422

   69 defs_head: k_def singleton • dot_or_colon $@9 def_name
  762 dot_or_colon: • '.'
  763             | • "::"

    '.'   shift, and go to state 652
    "::"  shift, and go to state 653

    dot_or_colon  go to state 654


State 423

   89 command: k_return call_args •

    $default  reduce using rule 89 (command)


State 424

  767 call_op2: "::" •

    $default  reduce using rule 767 (call_op2)


State 425

  766 call_op2: call_op •

    $default  reduce using rule 766 (call_op2)


State 426

   78 block_command: block_call call_op2 • operation2 command_args
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  459 block_call: block_call call_op2 • operation2 opt_paren_args
  460           | block_call call_op2 • operation2 opt_paren_args brace_block
  461           | block_call call_op2 • operation2 command_args do_block
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op

    "local variable or method"  shift, and go to state 655
    "method"                    shift, and go to state 620
    "constant"                  shift, and go to state 656
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202

    op          go to state 622
    operation   go to state 614
    operation2  go to state 657


State 427

  342 primary: method_call brace_block •

    $default  reduce using rule 342 (primary)


State 428

  600 string: string string1 •

    $default  reduce using rule 600 (string)


State 429

   40 command_asgn: var_lhs "operator-assignment" • lex_ctxt command_rhs
  217 arg: var_lhs "operator-assignment" • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 658
    none      go to state 577


State 430

   50 command_asgn: backref "operator-assignment" • lex_ctxt command_rhs
  224 arg: backref "operator-assignment" • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 659
    none      go to state 577


State 431

  143 $@12: ε •
  144 undef_list: undef_list ',' • $@12 fitem

    $default  reduce using rule 143 ($@12)

    $@12  go to state 660


State 432

  749 assoc: "label" arg_value •

    $default  reduce using rule 749 (assoc)


State 433

  128 lhs: ":: at EXPR_BEG" "constant" •  ['=']
  223 arg: ":: at EXPR_BEG" "constant" • "operator-assignment" lex_ctxt arg_rhs
  329 primary: ":: at EXPR_BEG" "constant" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']

    "operator-assignment"  shift, and go to state 476

    '='       reduce using rule 128 (lhs)
    $default  reduce using rule 329 (primary)


State 434

  300 args: "*" arg_value •

    $default  reduce using rule 300 (args)


State 435

  752 assoc: "**arg" arg_value •

    $default  reduce using rule 752 (assoc)


State 436

  295 block_arg: "&" arg_value •

    $default  reduce using rule 295 (block_arg)


State 437

  601 string1: "string literal" string_contents • "terminator"
  619 string_contents: string_contents • string_content
  624 string_content: • "literal content"
  626               | • tSTRING_DVAR @43 string_dvar
  632               | • tSTRING_DBEG $@44 @45 @46 @47 @48 compstmt "'}'"
  751 assoc: "string literal" string_contents • tLABEL_END arg_value

    "literal content"  shift, and go to state 504
    "terminator"       shift, and go to state 509
    tSTRING_DBEG       shift, and go to state 506
    tSTRING_DVAR       shift, and go to state 507
    tLABEL_END         shift, and go to state 661

    string_content  go to state 508


State 438

  259 arg: defn_head f_opt_paren_args • '=' arg
  260    | defn_head f_opt_paren_args • '=' arg "`rescue' modifier" arg

    '='  shift, and go to state 662


State 439

  261 arg: defs_head f_opt_paren_args • '=' arg
  262    | defs_head f_opt_paren_args • '=' arg "`rescue' modifier" arg

    '='  shift, and go to state 663


State 440

  216 arg: lhs '=' • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 664
    none      go to state 577


State 441

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  748 assoc: arg_value "=>" • arg_value
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 665
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 442

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  291 call_args: args ',' • assocs opt_block_arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  297 opt_block_arg: ',' • block_arg
  302 args: args ',' • arg_value
  303     | args ',' • "*" arg_value
  304     | args ',' • "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 666
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 667
    block_arg         go to state 668
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 669
    assoc             go to state 233
    operation         go to state 127


State 443

  289 call_args: args opt_block_arg •

    $default  reduce using rule 289 (call_args)


State 444

  298 opt_block_arg: none •

    $default  reduce using rule 298 (opt_block_arg)


State 445

   85 command: primary_value "::" • operation2 command_args
   86        | primary_value "::" • operation2 command_args cmd_brace_block
  125 lhs: primary_value "::" • "local variable or method"
  127    | primary_value "::" • "constant"
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  221 arg: primary_value "::" • "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | primary_value "::" • "constant" "operator-assignment" lex_ctxt arg_rhs
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  328 primary: primary_value "::" • "constant"
  464 method_call: primary_value "::" • operation2 paren_args
  465            | primary_value "::" • operation3
  467            | primary_value "::" • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op
  759 operation3: • "local variable or method"
  760           | • "method"
  761           | • op

    "local variable or method"  shift, and go to state 670
    "method"                    shift, and go to state 610
    "constant"                  shift, and go to state 671
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 612
    paren_args  go to state 613
    operation   go to state 614
    operation2  go to state 615
    operation3  go to state 616


State 446

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  123    | primary_value '[' • opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  218    | primary_value '[' • opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  283 opt_call_args: • none
  284              | • call_args
  285              | • args ','
  286              | • args ',' assocs ','
  287              | • assocs ','
  288 call_args: • command
  289          | • args opt_block_arg
  290          | • assocs opt_block_arg
  291          | • args ',' assocs opt_block_arg
  292          | • block_arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  470            | primary_value '[' • opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  [']', '\n']

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 213
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 781 (none)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 80
    command           go to state 220
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 223
    opt_call_args     go to state 672
    call_args         go to state 458
    block_arg         go to state 225
    args              go to state 618
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 461
    assoc             go to state 233
    operation         go to state 127
    none              go to state 462


State 447

   83 command: primary_value call_op • operation2 command_args
   84        | primary_value call_op • operation2 command_args cmd_brace_block
  124 lhs: primary_value call_op • "local variable or method"
  126    | primary_value call_op • "constant"
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  219 arg: primary_value call_op • "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | primary_value call_op • "constant" "operator-assignment" lex_ctxt arg_rhs
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  463 method_call: primary_value call_op • operation2 opt_paren_args
  466            | primary_value call_op • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op

    "local variable or method"  shift, and go to state 673
    "method"                    shift, and go to state 620
    "constant"                  shift, and go to state 674
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 622
    paren_args  go to state 623
    operation   go to state 614
    operation2  go to state 624


State 448

  217 arg: var_lhs "operator-assignment" • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 675
    none      go to state 577


State 449

  224 arg: backref "operator-assignment" • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 676
    none      go to state 577


State 450

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  297 opt_block_arg: ',' • block_arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  747 assocs: assocs ',' • assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 277
    block_arg         go to state 668
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assoc             go to state 677
    operation         go to state 127


State 451

  290 call_args: assocs opt_block_arg •

    $default  reduce using rule 290 (call_args)


State 452

  333 primary: "`yield'" '(' call_args • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 678


State 453

  772 rparen: opt_nl • ')'

    ')'  shift, and go to state 679


State 454

  334 primary: "`yield'" '(' rparen •

    $default  reduce using rule 334 (primary)


State 455

  294 command_args: $@14 call_args •

    $default  reduce using rule 294 (command_args)


State 456

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  230    | "(..." • arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  699 args_forward: "(..." •  [')', '\n']
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 699 (args_forward)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 260
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 457

  278 paren_args: '(' opt_call_args • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 680


State 458

  284 opt_call_args: call_args •

    $default  reduce using rule 284 (opt_call_args)


State 459

  279 paren_args: '(' args • ',' args_forward rparen
  285 opt_call_args: args • ','
  286              | args • ',' assocs ','
  289 call_args: args • opt_block_arg
  291          | args • ',' assocs opt_block_arg
  297 opt_block_arg: • ',' block_arg
  298              | • none
  302 args: args • ',' arg_value
  303     | args • ',' "*" arg_value
  304     | args • ',' "*"
  781 none: ε •  [')', '\n']

    ','  shift, and go to state 681

    $default  reduce using rule 781 (none)

    opt_block_arg  go to state 443
    none           go to state 444


State 460

  280 paren_args: '(' args_forward • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 682


State 461

  287 opt_call_args: assocs • ','
  290 call_args: assocs • opt_block_arg
  297 opt_block_arg: • ',' block_arg
  298              | • none
  747 assocs: assocs • ',' assoc
  781 none: ε •  [')', ']', '\n']

    ','  shift, and go to state 683

    $default  reduce using rule 781 (none)

    opt_block_arg  go to state 451
    none           go to state 444


State 462

  283 opt_call_args: none •

    $default  reduce using rule 283 (opt_call_args)


State 463

   55 expr: expr • "`and'" expr
   56     | expr • "`or'" expr
  338 primary: "`not'" '(' expr • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    "`and'"  shift, and go to state 319
    "`or'"   shift, and go to state 320
    '\n'     shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 684


State 464

  339 primary: "`not'" '(' rparen •

    $default  reduce using rule 339 (primary)


State 465

   55 expr: expr • "`and'" expr
   56     | expr • "`or'" expr
   57     | "`not'" opt_nl expr •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']

    $default  reduce using rule 57 (expr)

    Conflict between rule 57 and token "`and'" resolved as reduce ("`and'" < "`not'").
    Conflict between rule 57 and token "`or'" resolved as reduce ("`or'" < "`not'").


State 466

   22 stmt: "`alias'" "global variable" "global variable" •

    $default  reduce using rule 22 (stmt)


State 467

   24 stmt: "`alias'" "global variable" "numbered reference" •

    $default  reduce using rule 24 (stmt)


State 468

   23 stmt: "`alias'" "global variable" "back reference" •

    $default  reduce using rule 23 (stmt)


State 469

   21 stmt: "`alias'" fitem $@4 • fitem
  135 fname: • "local variable or method"
  136      | • "constant"
  137      | • "method"
  138      | • op
  139      | • reswords
  140 fitem: • fname
  141      | • symbol
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  175 reswords: • "`__LINE__'"
  176         | • "`__FILE__'"
  177         | • "`__ENCODING__'"
  178         | • "`BEGIN'"
  179         | • "`END'"
  180         | • "`alias'"
  181         | • "`and'"
  182         | • "`begin'"
  183         | • "`break'"
  184         | • "`case'"
  185         | • "`class'"
  186         | • "`def'"
  187         | • "`defined?'"
  188         | • "`do'"
  189         | • "`else'"
  190         | • "`elsif'"
  191         | • "`end'"
  192         | • "`ensure'"
  193         | • "`false'"
  194         | • "`for'"
  195         | • "`in'"
  196         | • "`module'"
  197         | • "`next'"
  198         | • "`nil'"
  199         | • "`not'"
  200         | • "`or'"
  201         | • "`redo'"
  202         | • "`rescue'"
  203         | • "`retry'"
  204         | • "`return'"
  205         | • "`self'"
  206         | • "`super'"
  207         | • "`then'"
  208         | • "`true'"
  209         | • "`undef'"
  210         | • "`when'"
  211         | • "`yield'"
  212         | • "`if'"
  213         | • "`unless'"
  214         | • "`while'"
  215         | • "`until'"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"

    "`class'"                   shift, and go to state 129
    "`module'"                  shift, and go to state 130
    "`def'"                     shift, and go to state 131
    "`undef'"                   shift, and go to state 132
    "`begin'"                   shift, and go to state 133
    "`rescue'"                  shift, and go to state 134
    "`ensure'"                  shift, and go to state 135
    "`end'"                     shift, and go to state 136
    "`if'"                      shift, and go to state 137
    "`unless'"                  shift, and go to state 138
    "`then'"                    shift, and go to state 139
    "`elsif'"                   shift, and go to state 140
    "`else'"                    shift, and go to state 141
    "`case'"                    shift, and go to state 142
    "`when'"                    shift, and go to state 143
    "`while'"                   shift, and go to state 144
    "`until'"                   shift, and go to state 145
    "`for'"                     shift, and go to state 146
    "`break'"                   shift, and go to state 147
    "`next'"                    shift, and go to state 148
    "`redo'"                    shift, and go to state 149
    "`retry'"                   shift, and go to state 150
    "`in'"                      shift, and go to state 151
    "`do'"                      shift, and go to state 152
    "`return'"                  shift, and go to state 153
    "`yield'"                   shift, and go to state 154
    "`super'"                   shift, and go to state 155
    "`self'"                    shift, and go to state 156
    "`nil'"                     shift, and go to state 157
    "`true'"                    shift, and go to state 158
    "`false'"                   shift, and go to state 159
    "`and'"                     shift, and go to state 160
    "`or'"                      shift, and go to state 161
    "`not'"                     shift, and go to state 162
    "`alias'"                   shift, and go to state 163
    "`defined?'"                shift, and go to state 164
    "`BEGIN'"                   shift, and go to state 165
    "`END'"                     shift, and go to state 166
    "`__LINE__'"                shift, and go to state 167
    "`__FILE__'"                shift, and go to state 168
    "`__ENCODING__'"            shift, and go to state 169
    "local variable or method"  shift, and go to state 170
    "method"                    shift, and go to state 171
    "constant"                  shift, and go to state 172
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    "symbol literal"            shift, and go to state 59
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202

    fname     go to state 203
    fitem     go to state 685
    op        go to state 206
    reswords  go to state 207
    symbol    go to state 208
    ssym      go to state 117
    dsym      go to state 118


State 470

  336 $@18: ε •
  337 primary: "`defined?'" opt_nl '(' • $@18 expr rparen

    $default  reduce using rule 336 ($@18)

    $@18  go to state 686


State 471

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  257    | "`defined?'" opt_nl $@13 • arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 687
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 472

    9 begin_block: '{' top_compstmt • '}'

    '}'  shift, and go to state 688


State 473

   31 stmt: "`END'" '{' compstmt • '}'

    '}'  shift, and go to state 689


State 474

  125 lhs: primary_value "::" • "local variable or method"
  127    | primary_value "::" • "constant"
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  221 arg: primary_value "::" • "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | primary_value "::" • "constant" "operator-assignment" lex_ctxt arg_rhs
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  328 primary: primary_value "::" • "constant"
  464 method_call: primary_value "::" • operation2 paren_args
  465            | primary_value "::" • operation3
  467            | primary_value "::" • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op
  759 operation3: • "local variable or method"
  760           | • "method"
  761           | • op

    "local variable or method"  shift, and go to state 670
    "method"                    shift, and go to state 610
    "constant"                  shift, and go to state 671
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 612
    paren_args  go to state 613
    operation   go to state 614
    operation2  go to state 690
    operation3  go to state 616


State 475

  124 lhs: primary_value call_op • "local variable or method"
  126    | primary_value call_op • "constant"
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  219 arg: primary_value call_op • "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | primary_value call_op • "constant" "operator-assignment" lex_ctxt arg_rhs
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  463 method_call: primary_value call_op • operation2 opt_paren_args
  466            | primary_value call_op • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op

    "local variable or method"  shift, and go to state 673
    "method"                    shift, and go to state 620
    "constant"                  shift, and go to state 674
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 622
    paren_args  go to state 623
    operation   go to state 614
    operation2  go to state 691


State 476

  223 arg: ":: at EXPR_BEG" "constant" "operator-assignment" • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 692
    none      go to state 577


State 477

    9 begin_block: • '{' top_compstmt '}'
   19 stmt_or_begin: "`BEGIN'" $@3 • begin_block

    '{'  shift, and go to state 247

    begin_block  go to state 693


State 478

   93 mlhs: "(" mlhs_inner • rparen
   95 mlhs_inner: "(" mlhs_inner • rparen
  107 mlhs_item: "(" mlhs_inner • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 694


State 479

  327 primary: "(" compstmt ')' •

    $default  reduce using rule 327 (primary)


State 480

   13 compstmt: stmts opt_terms •

    $default  reduce using rule 13 (compstmt)


State 481

   16 stmts: stmts terms • stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  769 opt_terms: terms •  ["`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "dummy end", "'}'", '}', ')']
  780 terms: terms • ';'

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69
    ';'                         shift, and go to state 519

    "`rescue'"   reduce using rule 769 (opt_terms)
    "`ensure'"   reduce using rule 769 (opt_terms)
    "`end'"      reduce using rule 769 (opt_terms)
    "`elsif'"    reduce using rule 769 (opt_terms)
    "`else'"     reduce using rule 769 (opt_terms)
    "`when'"     reduce using rule 769 (opt_terms)
    "`in'"       reduce using rule 769 (opt_terms)
    "dummy end"  reduce using rule 769 (opt_terms)
    "'}'"        reduce using rule 769 (opt_terms)
    '}'          reduce using rule 769 (opt_terms)
    ')'          reduce using rule 769 (opt_terms)

    stmt_or_begin     go to state 695
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127


State 482

   93 mlhs: "(" mlhs_inner rparen •  ["`in'", '=']
  107 mlhs_item: "(" mlhs_inner rparen •  [',']

    ','       reduce using rule 107 (mlhs_item)
    $default  reduce using rule 93 (mlhs)


State 483

  326 primary: "( arg" stmt $@17 • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 696


State 484

  324 primary: "( arg" $@16 rparen •

    $default  reduce using rule 324 (primary)


State 485

  330 primary: "[" aref_args ']' •

    $default  reduce using rule 330 (primary)


State 486

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  274 aref_args: args ',' • assocs trailer
  302 args: args ',' • arg_value
  303     | args ',' • "*" arg_value
  304     | args ',' • "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  776 trailer: ',' •  [']']

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 666
    "**arg"                     shift, and go to state 214
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 776 (trailer)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 667
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 697
    assoc             go to state 233
    operation         go to state 127


State 487

  775 trailer: opt_nl •

    $default  reduce using rule 775 (trailer)


State 488

  273 aref_args: args trailer •

    $default  reduce using rule 273 (aref_args)


State 489

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  747 assocs: assocs ',' • assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  776 trailer: ',' •  ['}', ']']

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "**arg"                     shift, and go to state 214
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 776 (trailer)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 277
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assoc             go to state 677
    operation         go to state 127


State 490

  275 aref_args: assocs trailer •

    $default  reduce using rule 275 (aref_args)


State 491

  331 primary: "{" assoc_list '}' •

    $default  reduce using rule 331 (primary)


State 492

  745 assoc_list: assocs trailer •

    $default  reduce using rule 745 (assoc_list)


State 493

  337 primary: "`defined?'" opt_nl • '(' $@18 expr rparen

    '('  shift, and go to state 470


State 494

  119 mlhs_node: ":: at EXPR_BEG" "constant" •  ["`in'", '=', ',', ')', '\n']
  329 primary: ":: at EXPR_BEG" "constant" •  ['.', "&.", "::", '[']

    '.'       reduce using rule 329 (primary)
    "&."      reduce using rule 329 (primary)
    "::"      reduce using rule 329 (primary)
    '['       reduce using rule 329 (primary)
    $default  reduce using rule 119 (mlhs_node)


State 495

  644 numeric: tUMINUS_NUM simple_numeric •

    $default  reduce using rule 644 (numeric)


State 496

  110 mlhs_post: mlhs_item •

    $default  reduce using rule 110 (mlhs_post)


State 497

  105 mlhs_basic: "*" ',' mlhs_post •  ["`in'", '=', ')', '\n']
  111 mlhs_post: mlhs_post • ',' mlhs_item

    ','  shift, and go to state 698

    $default  reduce using rule 105 (mlhs_basic)


State 498

  674 f_arglist: f_paren_args •

    $default  reduce using rule 674 (f_arglist)


State 499

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  103 mlhs_basic: "*" mlhs_node ',' • mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  110 mlhs_post: • mlhs_item
  111          | • mlhs_post ',' mlhs_item
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 281
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    ":: at EXPR_BEG"            shift, and go to state 282
    "("                         shift, and go to state 340
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 283

    defn_head         go to state 285
    defs_head         go to state 286
    fcall             go to state 254
    mlhs_item         go to state 496
    mlhs_post         go to state 699
    mlhs_node         go to state 86
    primary           go to state 288
    primary_value     go to state 289
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 290
    keyword_variable  go to state 291
    var_ref           go to state 124
    backref           go to state 292
    operation         go to state 127


State 500

  116 mlhs_node: primary_value "::" • "local variable or method"
  118          | primary_value "::" • "constant"
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  328 primary: primary_value "::" • "constant"
  464 method_call: primary_value "::" • operation2 paren_args
  465            | primary_value "::" • operation3
  467            | primary_value "::" • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op
  759 operation3: • "local variable or method"
  760           | • "method"
  761           | • op

    "local variable or method"  shift, and go to state 700
    "method"                    shift, and go to state 610
    "constant"                  shift, and go to state 701
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 612
    paren_args  go to state 613
    operation   go to state 614
    operation2  go to state 690
    operation3  go to state 616


State 501

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  114 mlhs_node: primary_value '[' • opt_call_args rbracket
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  283 opt_call_args: • none
  284              | • call_args
  285              | • args ','
  286              | • args ',' assocs ','
  287              | • assocs ','
  288 call_args: • command
  289          | • args opt_block_arg
  290          | • assocs opt_block_arg
  291          | • args ',' assocs opt_block_arg
  292          | • block_arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  470            | primary_value '[' • opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  [']', '\n']

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 213
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 781 (none)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 80
    command           go to state 220
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 223
    opt_call_args     go to state 702
    call_args         go to state 458
    block_arg         go to state 225
    args              go to state 618
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 461
    assoc             go to state 233
    operation         go to state 127
    none              go to state 462


State 502

  115 mlhs_node: primary_value call_op • "local variable or method"
  117          | primary_value call_op • "constant"
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  463 method_call: primary_value call_op • operation2 opt_paren_args
  466            | primary_value call_op • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op

    "local variable or method"  shift, and go to state 703
    "method"                    shift, and go to state 620
    "constant"                  shift, and go to state 704
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 622
    paren_args  go to state 623
    operation   go to state 614
    operation2  go to state 691


State 503

  449 @29: ε •
  451 lambda: "->" @27 @28 • @29 f_larglist $@30 lambda_body

    $default  reduce using rule 449 (@29)

    @29  go to state 705


State 504

  624 string_content: "literal content" •

    $default  reduce using rule 624 (string_content)


State 505

  642 dsym: "symbol literal" string_contents "terminator" •

    $default  reduce using rule 642 (dsym)


State 506

  627 $@44: ε •
  632 string_content: tSTRING_DBEG • $@44 @45 @46 @47 @48 compstmt "'}'"

    $default  reduce using rule 627 ($@44)

    $@44  go to state 706


State 507

  625 @43: ε •
  626 string_content: tSTRING_DVAR • @43 string_dvar

    $default  reduce using rule 625 (@43)

    @43  go to state 707


State 508

  619 string_contents: string_contents string_content •

    $default  reduce using rule 619 (string_contents)


State 509

  601 string1: "string literal" string_contents "terminator" •

    $default  reduce using rule 601 (string1)


State 510

  602 xstring: "backtick literal" xstring_contents "terminator" •

    $default  reduce using rule 602 (xstring)


State 511

  621 xstring_contents: xstring_contents string_content •

    $default  reduce using rule 621 (xstring_contents)


State 512

  603 regexp: "regexp literal" regexp_contents tREGEXP_END •

    $default  reduce using rule 603 (regexp)


State 513

  623 regexp_contents: regexp_contents string_content •

    $default  reduce using rule 623 (regexp_contents)


State 514

  604 words: "word list" ' ' word_list • "terminator"
  606 word_list: word_list • word ' '
  607 word: • string_content
  608     | • word string_content
  624 string_content: • "literal content"
  626               | • tSTRING_DVAR @43 string_dvar
  632               | • tSTRING_DBEG $@44 @45 @46 @47 @48 compstmt "'}'"

    "literal content"  shift, and go to state 504
    "terminator"       shift, and go to state 708
    tSTRING_DBEG       shift, and go to state 506
    tSTRING_DVAR       shift, and go to state 507

    word            go to state 709
    string_content  go to state 710


State 515

  612 qwords: "verbatim word list" ' ' qword_list • "terminator"
  615 qword_list: qword_list • "literal content" ' '

    "literal content"  shift, and go to state 711
    "terminator"       shift, and go to state 712


State 516

  607 word: • string_content
  608     | • word string_content
  609 symbols: "symbol list" ' ' symbol_list • "terminator"
  611 symbol_list: symbol_list • word ' '
  624 string_content: • "literal content"
  626               | • tSTRING_DVAR @43 string_dvar
  632               | • tSTRING_DBEG $@44 @45 @46 @47 @48 compstmt "'}'"

    "literal content"  shift, and go to state 504
    "terminator"       shift, and go to state 713
    tSTRING_DBEG       shift, and go to state 506
    tSTRING_DVAR       shift, and go to state 507

    word            go to state 714
    string_content  go to state 710


State 517

  613 qsymbols: "verbatim symbol list" ' ' qsym_list • "terminator"
  617 qsym_list: qsym_list • "literal content" ' '

    "literal content"  shift, and go to state 715
    "terminator"       shift, and go to state 716


State 518

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  237    | tUMINUS_NUM simple_numeric "**" • arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 717
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 519

  780 terms: terms ';' •

    $default  reduce using rule 780 (terms)


State 520

    6 top_stmts: top_stmts terms top_stmt •

    $default  reduce using rule 6 (top_stmts)


State 521

   26 stmt: stmt "`if' modifier" expr_value •

    $default  reduce using rule 26 (stmt)


State 522

   27 stmt: stmt "`unless' modifier" expr_value •

    $default  reduce using rule 27 (stmt)


State 523

   28 stmt: stmt "`while' modifier" expr_value •

    $default  reduce using rule 28 (stmt)


State 524

   29 stmt: stmt "`until' modifier" expr_value •

    $default  reduce using rule 29 (stmt)


State 525

   26 stmt: stmt • "`if' modifier" expr_value
   27     | stmt • "`unless' modifier" expr_value
   28     | stmt • "`while' modifier" expr_value
   29     | stmt • "`until' modifier" expr_value
   30     | stmt • "`rescue' modifier" stmt
   30     | stmt "`rescue' modifier" stmt •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']

    $default  reduce using rule 30 (stmt)

    Conflict between rule 30 and token "`if' modifier" resolved as reduce ("`if' modifier" < "`rescue' modifier").
    Conflict between rule 30 and token "`unless' modifier" resolved as reduce ("`unless' modifier" < "`rescue' modifier").
    Conflict between rule 30 and token "`while' modifier" resolved as reduce ("`while' modifier" < "`rescue' modifier").
    Conflict between rule 30 and token "`until' modifier" resolved as reduce ("`until' modifier" < "`rescue' modifier").
    Conflict between rule 30 and token "`rescue' modifier" resolved as reduce (%left "`rescue' modifier").


State 526

   55 expr: expr • "`and'" expr
   55     | expr "`and'" expr •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
   56     | expr • "`or'" expr

    $default  reduce using rule 55 (expr)

    Conflict between rule 55 and token "`and'" resolved as reduce (%left "`and'").
    Conflict between rule 55 and token "`or'" resolved as reduce (%left "`or'").


State 527

   55 expr: expr • "`and'" expr
   56     | expr • "`or'" expr
   56     | expr "`or'" expr •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']

    $default  reduce using rule 56 (expr)

    Conflict between rule 56 and token "`and'" resolved as reduce (%left "`and'").
    Conflict between rule 56 and token "`or'" resolved as reduce (%left "`or'").


State 528

  705 f_norm_arg: "local variable or method" •

    $default  reduce using rule 705 (f_norm_arg)


State 529

  702 f_bad_arg: "global variable" •

    $default  reduce using rule 702 (f_bad_arg)


State 530

  701 f_bad_arg: "instance variable" •

    $default  reduce using rule 701 (f_bad_arg)


State 531

  700 f_bad_arg: "constant" •

    $default  reduce using rule 700 (f_bad_arg)


State 532

  703 f_bad_arg: "class variable" •

    $default  reduce using rule 703 (f_bad_arg)


State 533

  711 f_label: "label" •

    $default  reduce using rule 711 (f_label)


State 534

  720 kwrest_mark: "**" •

    $default  reduce using rule 720 (kwrest_mark)


State 535

  699 args_forward: "(..." •

    $default  reduce using rule 699 (args_forward)


State 536

  400 f_marg: • f_norm_arg
  401       | • "(" f_margs rparen
  402 f_marg_list: • f_marg
  403            | • f_marg_list ',' f_marg
  404 f_margs: • f_marg_list
  405        | • f_marg_list ',' f_rest_marg
  406        | • f_marg_list ',' f_rest_marg ',' f_marg_list
  407        | • f_rest_marg
  408        | • f_rest_marg ',' f_marg_list
  409 f_rest_marg: • "*" f_norm_arg
  410            | • "*"
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  708 f_arg_item: "(" • f_margs rparen

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "("                         shift, and go to state 718
    "*"                         shift, and go to state 719

    f_marg       go to state 720
    f_marg_list  go to state 721
    f_margs      go to state 722
    f_rest_marg  go to state 723
    f_bad_arg    go to state 547
    f_norm_arg   go to state 724


State 537

  732 restarg_mark: "*" •

    $default  reduce using rule 732 (restarg_mark)


State 538

  721 kwrest_mark: "**arg" •

    $default  reduce using rule 721 (kwrest_mark)


State 539

  736 blkarg_mark: "&" •

    $default  reduce using rule 736 (blkarg_mark)


State 540

  735 blkarg_mark: '&' •

    $default  reduce using rule 735 (blkarg_mark)


State 541

  731 restarg_mark: '*' •

    $default  reduce using rule 731 (restarg_mark)


State 542

  679 args_tail: f_any_kwrest • opt_f_block_arg
  739 opt_f_block_arg: • ',' f_block_arg
  740                | • none
  781 none: ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']

    ','  shift, and go to state 725

    $default  reduce using rule 781 (none)

    opt_f_block_arg  go to state 726
    none             go to state 727


State 543

  722 f_no_kwarg: p_kwnorest •

    $default  reduce using rule 722 (f_no_kwarg)


State 544

  697 f_args: args_tail •

    $default  reduce using rule 697 (f_args)


State 545

  673 f_paren_args: '(' f_args • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 728


State 546

  681 args_tail: args_forward •

    $default  reduce using rule 681 (args_tail)


State 547

  704 f_norm_arg: f_bad_arg •

    $default  reduce using rule 704 (f_norm_arg)


State 548

  706 f_arg_asgn: f_norm_arg •

    $default  reduce using rule 706 (f_arg_asgn)


State 549

  413 $@26: ε •  ['=']
  414 f_eq: • $@26 '='
  707 f_arg_item: f_arg_asgn •  ["`do' for lambda", tLAMBEG, ',', ')', ';', '\n']
  725 f_opt: f_arg_asgn • f_eq arg_value

    '='       reduce using rule 413 ($@26)
    $default  reduce using rule 707 (f_arg_item)

    f_eq  go to state 729
    $@26  go to state 730


State 550

  709 f_arg: f_arg_item •

    $default  reduce using rule 709 (f_arg)


State 551

  682 opt_args_tail: • ',' args_tail
  683              | ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']
  684 f_args: f_arg • ',' f_optarg ',' f_rest_arg opt_args_tail
  685       | f_arg • ',' f_optarg ',' f_rest_arg ',' f_arg opt_args_tail
  686       | f_arg • ',' f_optarg opt_args_tail
  687       | f_arg • ',' f_optarg ',' f_arg opt_args_tail
  688       | f_arg • ',' f_rest_arg opt_args_tail
  689       | f_arg • ',' f_rest_arg ',' f_arg opt_args_tail
  690       | f_arg • opt_args_tail
  710 f_arg: f_arg • ',' f_arg_item

    ','  shift, and go to state 731

    $default  reduce using rule 683 (opt_args_tail)

    opt_args_tail  go to state 732


State 552

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  712 f_kw: f_label • arg_value
  713     | f_label •  ["`do' for lambda", tLAMBEG, ',', ')', ';', '\n']
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 713 (f_kw)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 733
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 553

  718 f_kwarg: f_kw •

    $default  reduce using rule 718 (f_kwarg)


State 554

  677 args_tail: f_kwarg • ',' f_kwrest opt_f_block_arg
  678          | f_kwarg • opt_f_block_arg
  719 f_kwarg: f_kwarg • ',' f_kw
  739 opt_f_block_arg: • ',' f_block_arg
  740                | • none
  781 none: ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']

    ','  shift, and go to state 734

    $default  reduce using rule 781 (none)

    opt_f_block_arg  go to state 735
    none             go to state 727


State 555

  556 p_kwnorest: kwrest_mark • "`nil'"
  723 f_kwrest: kwrest_mark • "local variable or method"
  724         | kwrest_mark •  ["`do' for lambda", tLAMBEG, '|', ',', ')', ';', '\n']

    "`nil'"                     shift, and go to state 736
    "local variable or method"  shift, and go to state 737

    $default  reduce using rule 724 (f_kwrest)


State 556

  412 f_any_kwrest: f_no_kwarg •

    $default  reduce using rule 412 (f_any_kwrest)


State 557

  411 f_any_kwrest: f_kwrest •

    $default  reduce using rule 411 (f_any_kwrest)


State 558

  729 f_optarg: f_opt •

    $default  reduce using rule 729 (f_optarg)


State 559

  682 opt_args_tail: • ',' args_tail
  683              | ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']
  691 f_args: f_optarg • ',' f_rest_arg opt_args_tail
  692       | f_optarg • ',' f_rest_arg ',' f_arg opt_args_tail
  693       | f_optarg • opt_args_tail
  694       | f_optarg • ',' f_arg opt_args_tail
  730 f_optarg: f_optarg • ',' f_opt

    ','  shift, and go to state 738

    $default  reduce using rule 683 (opt_args_tail)

    opt_args_tail  go to state 739


State 560

  733 f_rest_arg: restarg_mark • "local variable or method"
  734           | restarg_mark •  ["`do' for lambda", tLAMBEG, '|', ',', ')', ';', '\n']

    "local variable or method"  shift, and go to state 740

    $default  reduce using rule 734 (f_rest_arg)


State 561

  682 opt_args_tail: • ',' args_tail
  683              | ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']
  695 f_args: f_rest_arg • opt_args_tail
  696       | f_rest_arg • ',' f_arg opt_args_tail

    ','  shift, and go to state 741

    $default  reduce using rule 683 (opt_args_tail)

    opt_args_tail  go to state 742


State 562

  737 f_block_arg: blkarg_mark • "local variable or method"
  738            | blkarg_mark •  ["`do' for lambda", tLAMBEG, '|', ')', ';', '\n']

    "local variable or method"  shift, and go to state 743

    $default  reduce using rule 738 (f_block_arg)


State 563

  680 args_tail: f_block_arg •

    $default  reduce using rule 680 (args_tail)


State 564

   46 command_asgn: defn_head f_opt_paren_args '=' • command
   47             | defn_head f_opt_paren_args '=' • command "`rescue' modifier" arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  259    | defn_head f_opt_paren_args '=' • arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  260    | defn_head f_opt_paren_args '=' • arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 80
    command           go to state 744
    lhs               go to state 221
    arg               go to state 745
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 565

   11 bodystmt: • compstmt opt_rescue k_else $@2 compstmt opt_ensure
   12         | • compstmt opt_rescue opt_ensure
   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  361        | defn_head f_arglist $@24 • bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`rescue'", "`ensure'", "`end'", "`else'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`rescue'"   reduce using rule 781 (none)
    "`ensure'"   reduce using rule 781 (none)
    "`end'"      reduce using rule 781 (none)
    "`else'"     reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    bodystmt          go to state 746
    compstmt          go to state 626
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 566

  676 f_arglist: @50 f_args • term
  777 term: • ';'
  778     | • '\n'

    ';'   shift, and go to state 309
    '\n'  shift, and go to state 310

    term  go to state 747


State 567

   48 command_asgn: defs_head f_opt_paren_args '=' • command
   49             | defs_head f_opt_paren_args '=' • command "`rescue' modifier" arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  261    | defs_head f_opt_paren_args '=' • arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  262    | defs_head f_opt_paren_args '=' • arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 80
    command           go to state 748
    lhs               go to state 221
    arg               go to state 749
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 568

   11 bodystmt: • compstmt opt_rescue k_else $@2 compstmt opt_ensure
   12         | • compstmt opt_rescue opt_ensure
   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  363        | defs_head f_arglist $@25 • bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`rescue'", "`ensure'", "`end'", "`else'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`rescue'"   reduce using rule 781 (none)
    "`ensure'"   reduce using rule 781 (none)
    "`end'"      reduce using rule 781 (none)
    "`else'"     reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    bodystmt          go to state 750
    compstmt          go to state 626
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 569

  471 brace_block: '{' brace_body • '}'

    '}'  shift, and go to state 751


State 570

  474 @33: ε •
  476 brace_body: @32 • @33 @34 opt_block_param compstmt

    $default  reduce using rule 474 (@33)

    @33  go to state 752


State 571

   79 cmd_brace_block: "{ arg" • brace_body '}'
  473 @32: ε •
  476 brace_body: • @32 @33 @34 opt_block_param compstmt

    $default  reduce using rule 473 (@32)

    brace_body  go to state 753
    @32         go to state 570


State 572

   82 command: fcall command_args cmd_brace_block •

    $default  reduce using rule 82 (command)


State 573

  386 k_end: • "`end'"
  387      | • "dummy end"
  472 brace_block: k_do do_body • k_end

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 756


State 574

  478 @36: ε •
  480 do_body: @35 • @36 @37 opt_block_param bodystmt

    $default  reduce using rule 478 (@36)

    @36  go to state 757


State 575

  386 k_end: • "`end'"
  387      | • "dummy end"
  457 do_block: k_do_block do_body • k_end

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 758


State 576

   33 stmt: mlhs '=' lex_ctxt • command_call
   35     | mlhs '=' lex_ctxt • mrhs_arg "`rescue' modifier" stmt
   36     | mlhs '=' lex_ctxt • mrhs_arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  305 mrhs_arg: • mrhs
  306         | • arg_value
  307 mrhs: • args ',' arg_value
  308     | • args ',' "*" arg_value
  309     | • "*" arg_value
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 759
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    command_call      go to state 760
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 761
    args              go to state 762
    mrhs_arg          go to state 763
    mrhs              go to state 764
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 577

  270 lex_ctxt: none •

    $default  reduce using rule 270 (lex_ctxt)


State 578

  107 mlhs_item: "(" mlhs_inner • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 765


State 579

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  101 mlhs_basic: mlhs_head "*" ',' • mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  110 mlhs_post: • mlhs_item
  111          | • mlhs_post ',' mlhs_item
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 281
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    ":: at EXPR_BEG"            shift, and go to state 282
    "("                         shift, and go to state 340
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 283

    defn_head         go to state 285
    defs_head         go to state 286
    fcall             go to state 254
    mlhs_item         go to state 496
    mlhs_post         go to state 766
    mlhs_node         go to state 86
    primary           go to state 288
    primary_value     go to state 289
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 290
    keyword_variable  go to state 291
    var_ref           go to state 124
    backref           go to state 292
    operation         go to state 127


State 580

   98 mlhs_basic: mlhs_head "*" mlhs_node •  ["`in'", '=', ')', '\n']
   99           | mlhs_head "*" mlhs_node • ',' mlhs_post

    ','  shift, and go to state 767

    $default  reduce using rule 98 (mlhs_basic)


State 581

  109 mlhs_head: mlhs_head mlhs_item ',' •

    $default  reduce using rule 109 (mlhs_head)


State 582

   34 stmt: lhs '=' lex_ctxt • mrhs
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   39             | lhs '=' lex_ctxt • command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   51 command_rhs: • command_call
   52            | • command_call "`rescue' modifier" stmt
   53            | • command_asgn
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  216    | lhs '=' lex_ctxt • arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  307 mrhs: • args ',' arg_value
  308     | • args ',' "*" arg_value
  309     | • "*" arg_value
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 759
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    command_asgn      go to state 768
    command_rhs       go to state 769
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 770
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 771
    arg               go to state 772
    rel_expr          go to state 89
    arg_value         go to state 773
    arg_rhs           go to state 774
    args              go to state 762
    mrhs              go to state 775
    primary           go to state 90
    primary_value     go to state 776
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 777
    operation         go to state 127


State 583

   63 @8: ε •
   64 expr: arg "`in'" @7 • @8 p_top_expr_body

    $default  reduce using rule 63 (@8)

    @8  go to state 778


State 584

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  236    | arg "**" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', ',', ')', ']', ';', '\n']
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345

    $default  reduce using rule 236 (arg)

    relop  go to state 372

    Conflict between rule 236 and token "**" resolved as shift (%right "**").
    Conflict between rule 236 and token "<=>" resolved as reduce ("<=>" < "**").
    Conflict between rule 236 and token "==" resolved as reduce ("==" < "**").
    Conflict between rule 236 and token "===" resolved as reduce ("===" < "**").
    Conflict between rule 236 and token "!=" resolved as reduce ("!=" < "**").
    Conflict between rule 236 and token ">=" resolved as reduce (">=" < "**").
    Conflict between rule 236 and token "<=" resolved as reduce ("<=" < "**").
    Conflict between rule 236 and token "&&" resolved as reduce ("&&" < "**").
    Conflict between rule 236 and token "||" resolved as reduce ("||" < "**").
    Conflict between rule 236 and token "=~" resolved as reduce ("=~" < "**").
    Conflict between rule 236 and token "!~" resolved as reduce ("!~" < "**").
    Conflict between rule 236 and token ".." resolved as reduce (".." < "**").
    Conflict between rule 236 and token "..." resolved as reduce ("..." < "**").
    Conflict between rule 236 and token "<<" resolved as reduce ("<<" < "**").
    Conflict between rule 236 and token ">>" resolved as reduce (">>" < "**").
    Conflict between rule 236 and token '?' resolved as reduce ('?' < "**").
    Conflict between rule 236 and token '>' resolved as reduce ('>' < "**").
    Conflict between rule 236 and token '<' resolved as reduce ('<' < "**").
    Conflict between rule 236 and token '|' resolved as reduce ('|' < "**").
    Conflict between rule 236 and token '^' resolved as reduce ('^' < "**").
    Conflict between rule 236 and token '&' resolved as reduce ('&' < "**").
    Conflict between rule 236 and token '+' resolved as reduce ('+' < "**").
    Conflict between rule 236 and token '-' resolved as reduce ('-' < "**").
    Conflict between rule 236 and token '*' resolved as reduce ('*' < "**").
    Conflict between rule 236 and token '/' resolved as reduce ('/' < "**").
    Conflict between rule 236 and token '%' resolved as reduce ('%' < "**").


State 585

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  243    | arg "<=>" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "&&", "||", "..", "...", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '}', ',', ')', ']', ';', '\n']
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345
    ">="  shift, and go to state 350
    "<="  shift, and go to state 351
    "<<"  shift, and go to state 358
    ">>"  shift, and go to state 359
    '>'   shift, and go to state 362
    '<'   shift, and go to state 363
    '|'   shift, and go to state 364
    '^'   shift, and go to state 365
    '&'   shift, and go to state 366
    '+'   shift, and go to state 367
    '-'   shift, and go to state 368
    '*'   shift, and go to state 369
    '/'   shift, and go to state 370
    '%'   shift, and go to state 371

    "<=>"  error (nonassociative)
    "=="   error (nonassociative)
    "==="  error (nonassociative)
    "!="   error (nonassociative)
    "=~"   error (nonassociative)
    "!~"   error (nonassociative)

    $default  reduce using rule 243 (arg)

    relop  go to state 372

    Conflict between rule 243 and token "**" resolved as shift ("<=>" < "**").
    Conflict between rule 243 and token "<=>" resolved as an error (%nonassoc "<=>").
    Conflict between rule 243 and token "==" resolved as an error (%nonassoc "==").
    Conflict between rule 243 and token "===" resolved as an error (%nonassoc "===").
    Conflict between rule 243 and token "!=" resolved as an error (%nonassoc "!=").
    Conflict between rule 243 and token ">=" resolved as shift ("<=>" < ">=").
    Conflict between rule 243 and token "<=" resolved as shift ("<=>" < "<=").
    Conflict between rule 243 and token "&&" resolved as reduce ("&&" < "<=>").
    Conflict between rule 243 and token "||" resolved as reduce ("||" < "<=>").
    Conflict between rule 243 and token "=~" resolved as an error (%nonassoc "=~").
    Conflict between rule 243 and token "!~" resolved as an error (%nonassoc "!~").
    Conflict between rule 243 and token ".." resolved as reduce (".." < "<=>").
    Conflict between rule 243 and token "..." resolved as reduce ("..." < "<=>").
    Conflict between rule 243 and token "<<" resolved as shift ("<=>" < "<<").
    Conflict between rule 243 and token ">>" resolved as shift ("<=>" < ">>").
    Conflict between rule 243 and token '?' resolved as reduce ('?' < "<=>").
    Conflict between rule 243 and token '>' resolved as shift ("<=>" < '>').
    Conflict between rule 243 and token '<' resolved as shift ("<=>" < '<').
    Conflict between rule 243 and token '|' resolved as shift ("<=>" < '|').
    Conflict between rule 243 and token '^' resolved as shift ("<=>" < '^').
    Conflict between rule 243 and token '&' resolved as shift ("<=>" < '&').
    Conflict between rule 243 and token '+' resolved as shift ("<=>" < '+').
    Conflict between rule 243 and token '-' resolved as shift ("<=>" < '-').
    Conflict between rule 243 and token '*' resolved as shift ("<=>" < '*').
    Conflict between rule 243 and token '/' resolved as shift ("<=>" < '/').
    Conflict between rule 243 and token '%' resolved as shift ("<=>" < '%').


State 586

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  245    | arg "==" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "&&", "||", "..", "...", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '}', ',', ')', ']', ';', '\n']
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345
    ">="  shift, and go to state 350
    "<="  shift, and go to state 351
    "<<"  shift, and go to state 358
    ">>"  shift, and go to state 359
    '>'   shift, and go to state 362
    '<'   shift, and go to state 363
    '|'   shift, and go to state 364
    '^'   shift, and go to state 365
    '&'   shift, and go to state 366
    '+'   shift, and go to state 367
    '-'   shift, and go to state 368
    '*'   shift, and go to state 369
    '/'   shift, and go to state 370
    '%'   shift, and go to state 371

    "<=>"  error (nonassociative)
    "=="   error (nonassociative)
    "==="  error (nonassociative)
    "!="   error (nonassociative)
    "=~"   error (nonassociative)
    "!~"   error (nonassociative)

    $default  reduce using rule 245 (arg)

    relop  go to state 372

    Conflict between rule 245 and token "**" resolved as shift ("==" < "**").
    Conflict between rule 245 and token "<=>" resolved as an error (%nonassoc "<=>").
    Conflict between rule 245 and token "==" resolved as an error (%nonassoc "==").
    Conflict between rule 245 and token "===" resolved as an error (%nonassoc "===").
    Conflict between rule 245 and token "!=" resolved as an error (%nonassoc "!=").
    Conflict between rule 245 and token ">=" resolved as shift ("==" < ">=").
    Conflict between rule 245 and token "<=" resolved as shift ("==" < "<=").
    Conflict between rule 245 and token "&&" resolved as reduce ("&&" < "==").
    Conflict between rule 245 and token "||" resolved as reduce ("||" < "==").
    Conflict between rule 245 and token "=~" resolved as an error (%nonassoc "=~").
    Conflict between rule 245 and token "!~" resolved as an error (%nonassoc "!~").
    Conflict between rule 245 and token ".." resolved as reduce (".." < "==").
    Conflict between rule 245 and token "..." resolved as reduce ("..." < "==").
    Conflict between rule 245 and token "<<" resolved as shift ("==" < "<<").
    Conflict between rule 245 and token ">>" resolved as shift ("==" < ">>").
    Conflict between rule 245 and token '?' resolved as reduce ('?' < "==").
    Conflict between rule 245 and token '>' resolved as shift ("==" < '>').
    Conflict between rule 245 and token '<' resolved as shift ("==" < '<').
    Conflict between rule 245 and token '|' resolved as shift ("==" < '|').
    Conflict between rule 245 and token '^' resolved as shift ("==" < '^').
    Conflict between rule 245 and token '&' resolved as shift ("==" < '&').
    Conflict between rule 245 and token '+' resolved as shift ("==" < '+').
    Conflict between rule 245 and token '-' resolved as shift ("==" < '-').
    Conflict between rule 245 and token '*' resolved as shift ("==" < '*').
    Conflict between rule 245 and token '/' resolved as shift ("==" < '/').
    Conflict between rule 245 and token '%' resolved as shift ("==" < '%').


State 587

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  246    | arg "===" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "&&", "||", "..", "...", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '}', ',', ')', ']', ';', '\n']
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345
    ">="  shift, and go to state 350
    "<="  shift, and go to state 351
    "<<"  shift, and go to state 358
    ">>"  shift, and go to state 359
    '>'   shift, and go to state 362
    '<'   shift, and go to state 363
    '|'   shift, and go to state 364
    '^'   shift, and go to state 365
    '&'   shift, and go to state 366
    '+'   shift, and go to state 367
    '-'   shift, and go to state 368
    '*'   shift, and go to state 369
    '/'   shift, and go to state 370
    '%'   shift, and go to state 371

    "<=>"  error (nonassociative)
    "=="   error (nonassociative)
    "==="  error (nonassociative)
    "!="   error (nonassociative)
    "=~"   error (nonassociative)
    "!~"   error (nonassociative)

    $default  reduce using rule 246 (arg)

    relop  go to state 372

    Conflict between rule 246 and token "**" resolved as shift ("===" < "**").
    Conflict between rule 246 and token "<=>" resolved as an error (%nonassoc "<=>").
    Conflict between rule 246 and token "==" resolved as an error (%nonassoc "==").
    Conflict between rule 246 and token "===" resolved as an error (%nonassoc "===").
    Conflict between rule 246 and token "!=" resolved as an error (%nonassoc "!=").
    Conflict between rule 246 and token ">=" resolved as shift ("===" < ">=").
    Conflict between rule 246 and token "<=" resolved as shift ("===" < "<=").
    Conflict between rule 246 and token "&&" resolved as reduce ("&&" < "===").
    Conflict between rule 246 and token "||" resolved as reduce ("||" < "===").
    Conflict between rule 246 and token "=~" resolved as an error (%nonassoc "=~").
    Conflict between rule 246 and token "!~" resolved as an error (%nonassoc "!~").
    Conflict between rule 246 and token ".." resolved as reduce (".." < "===").
    Conflict between rule 246 and token "..." resolved as reduce ("..." < "===").
    Conflict between rule 246 and token "<<" resolved as shift ("===" < "<<").
    Conflict between rule 246 and token ">>" resolved as shift ("===" < ">>").
    Conflict between rule 246 and token '?' resolved as reduce ('?' < "===").
    Conflict between rule 246 and token '>' resolved as shift ("===" < '>').
    Conflict between rule 246 and token '<' resolved as shift ("===" < '<').
    Conflict between rule 246 and token '|' resolved as shift ("===" < '|').
    Conflict between rule 246 and token '^' resolved as shift ("===" < '^').
    Conflict between rule 246 and token '&' resolved as shift ("===" < '&').
    Conflict between rule 246 and token '+' resolved as shift ("===" < '+').
    Conflict between rule 246 and token '-' resolved as shift ("===" < '-').
    Conflict between rule 246 and token '*' resolved as shift ("===" < '*').
    Conflict between rule 246 and token '/' resolved as shift ("===" < '/').
    Conflict between rule 246 and token '%' resolved as shift ("===" < '%').


State 588

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  247    | arg "!=" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "&&", "||", "..", "...", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '}', ',', ')', ']', ';', '\n']
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345
    ">="  shift, and go to state 350
    "<="  shift, and go to state 351
    "<<"  shift, and go to state 358
    ">>"  shift, and go to state 359
    '>'   shift, and go to state 362
    '<'   shift, and go to state 363
    '|'   shift, and go to state 364
    '^'   shift, and go to state 365
    '&'   shift, and go to state 366
    '+'   shift, and go to state 367
    '-'   shift, and go to state 368
    '*'   shift, and go to state 369
    '/'   shift, and go to state 370
    '%'   shift, and go to state 371

    "<=>"  error (nonassociative)
    "=="   error (nonassociative)
    "==="  error (nonassociative)
    "!="   error (nonassociative)
    "=~"   error (nonassociative)
    "!~"   error (nonassociative)

    $default  reduce using rule 247 (arg)

    relop  go to state 372

    Conflict between rule 247 and token "**" resolved as shift ("!=" < "**").
    Conflict between rule 247 and token "<=>" resolved as an error (%nonassoc "<=>").
    Conflict between rule 247 and token "==" resolved as an error (%nonassoc "==").
    Conflict between rule 247 and token "===" resolved as an error (%nonassoc "===").
    Conflict between rule 247 and token "!=" resolved as an error (%nonassoc "!=").
    Conflict between rule 247 and token ">=" resolved as shift ("!=" < ">=").
    Conflict between rule 247 and token "<=" resolved as shift ("!=" < "<=").
    Conflict between rule 247 and token "&&" resolved as reduce ("&&" < "!=").
    Conflict between rule 247 and token "||" resolved as reduce ("||" < "!=").
    Conflict between rule 247 and token "=~" resolved as an error (%nonassoc "=~").
    Conflict between rule 247 and token "!~" resolved as an error (%nonassoc "!~").
    Conflict between rule 247 and token ".." resolved as reduce (".." < "!=").
    Conflict between rule 247 and token "..." resolved as reduce ("..." < "!=").
    Conflict between rule 247 and token "<<" resolved as shift ("!=" < "<<").
    Conflict between rule 247 and token ">>" resolved as shift ("!=" < ">>").
    Conflict between rule 247 and token '?' resolved as reduce ('?' < "!=").
    Conflict between rule 247 and token '>' resolved as shift ("!=" < '>').
    Conflict between rule 247 and token '<' resolved as shift ("!=" < '<').
    Conflict between rule 247 and token '|' resolved as shift ("!=" < '|').
    Conflict between rule 247 and token '^' resolved as shift ("!=" < '^').
    Conflict between rule 247 and token '&' resolved as shift ("!=" < '&').
    Conflict between rule 247 and token '+' resolved as shift ("!=" < '+').
    Conflict between rule 247 and token '-' resolved as shift ("!=" < '-').
    Conflict between rule 247 and token '*' resolved as shift ("!=" < '*').
    Conflict between rule 247 and token '/' resolved as shift ("!=" < '/').
    Conflict between rule 247 and token '%' resolved as shift ("!=" < '%').


State 589

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  254    | arg "&&" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "&&", "||", "..", "...", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '}', ',', ')', ']', ';', '\n']
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"   shift, and go to state 345
    "<=>"  shift, and go to state 346
    "=="   shift, and go to state 347
    "==="  shift, and go to state 348
    "!="   shift, and go to state 349
    ">="   shift, and go to state 350
    "<="   shift, and go to state 351
    "=~"   shift, and go to state 354
    "!~"   shift, and go to state 355
    "<<"   shift, and go to state 358
    ">>"   shift, and go to state 359
    '>'    shift, and go to state 362
    '<'    shift, and go to state 363
    '|'    shift, and go to state 364
    '^'    shift, and go to state 365
    '&'    shift, and go to state 366
    '+'    shift, and go to state 367
    '-'    shift, and go to state 368
    '*'    shift, and go to state 369
    '/'    shift, and go to state 370
    '%'    shift, and go to state 371

    $default  reduce using rule 254 (arg)

    relop  go to state 372

    Conflict between rule 254 and token "**" resolved as shift ("&&" < "**").
    Conflict between rule 254 and token "<=>" resolved as shift ("&&" < "<=>").
    Conflict between rule 254 and token "==" resolved as shift ("&&" < "==").
    Conflict between rule 254 and token "===" resolved as shift ("&&" < "===").
    Conflict between rule 254 and token "!=" resolved as shift ("&&" < "!=").
    Conflict between rule 254 and token ">=" resolved as shift ("&&" < ">=").
    Conflict between rule 254 and token "<=" resolved as shift ("&&" < "<=").
    Conflict between rule 254 and token "&&" resolved as reduce (%left "&&").
    Conflict between rule 254 and token "||" resolved as reduce ("||" < "&&").
    Conflict between rule 254 and token "=~" resolved as shift ("&&" < "=~").
    Conflict between rule 254 and token "!~" resolved as shift ("&&" < "!~").
    Conflict between rule 254 and token ".." resolved as reduce (".." < "&&").
    Conflict between rule 254 and token "..." resolved as reduce ("..." < "&&").
    Conflict between rule 254 and token "<<" resolved as shift ("&&" < "<<").
    Conflict between rule 254 and token ">>" resolved as shift ("&&" < ">>").
    Conflict between rule 254 and token '?' resolved as reduce ('?' < "&&").
    Conflict between rule 254 and token '>' resolved as shift ("&&" < '>').
    Conflict between rule 254 and token '<' resolved as shift ("&&" < '<').
    Conflict between rule 254 and token '|' resolved as shift ("&&" < '|').
    Conflict between rule 254 and token '^' resolved as shift ("&&" < '^').
    Conflict between rule 254 and token '&' resolved as shift ("&&" < '&').
    Conflict between rule 254 and token '+' resolved as shift ("&&" < '+').
    Conflict between rule 254 and token '-' resolved as shift ("&&" < '-').
    Conflict between rule 254 and token '*' resolved as shift ("&&" < '*').
    Conflict between rule 254 and token '/' resolved as shift ("&&" < '/').
    Conflict between rule 254 and token '%' resolved as shift ("&&" < '%').


State 590

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  255    | arg "||" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "||", "..", "...", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '}', ',', ')', ']', ';', '\n']
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"   shift, and go to state 345
    "<=>"  shift, and go to state 346
    "=="   shift, and go to state 347
    "==="  shift, and go to state 348
    "!="   shift, and go to state 349
    ">="   shift, and go to state 350
    "<="   shift, and go to state 351
    "&&"   shift, and go to state 352
    "=~"   shift, and go to state 354
    "!~"   shift, and go to state 355
    "<<"   shift, and go to state 358
    ">>"   shift, and go to state 359
    '>'    shift, and go to state 362
    '<'    shift, and go to state 363
    '|'    shift, and go to state 364
    '^'    shift, and go to state 365
    '&'    shift, and go to state 366
    '+'    shift, and go to state 367
    '-'    shift, and go to state 368
    '*'    shift, and go to state 369
    '/'    shift, and go to state 370
    '%'    shift, and go to state 371

    $default  reduce using rule 255 (arg)

    relop  go to state 372

    Conflict between rule 255 and token "**" resolved as shift ("||" < "**").
    Conflict between rule 255 and token "<=>" resolved as shift ("||" < "<=>").
    Conflict between rule 255 and token "==" resolved as shift ("||" < "==").
    Conflict between rule 255 and token "===" resolved as shift ("||" < "===").
    Conflict between rule 255 and token "!=" resolved as shift ("||" < "!=").
    Conflict between rule 255 and token ">=" resolved as shift ("||" < ">=").
    Conflict between rule 255 and token "<=" resolved as shift ("||" < "<=").
    Conflict between rule 255 and token "&&" resolved as shift ("||" < "&&").
    Conflict between rule 255 and token "||" resolved as reduce (%left "||").
    Conflict between rule 255 and token "=~" resolved as shift ("||" < "=~").
    Conflict between rule 255 and token "!~" resolved as shift ("||" < "!~").
    Conflict between rule 255 and token ".." resolved as reduce (".." < "||").
    Conflict between rule 255 and token "..." resolved as reduce ("..." < "||").
    Conflict between rule 255 and token "<<" resolved as shift ("||" < "<<").
    Conflict between rule 255 and token ">>" resolved as shift ("||" < ">>").
    Conflict between rule 255 and token '?' resolved as reduce ('?' < "||").
    Conflict between rule 255 and token '>' resolved as shift ("||" < '>').
    Conflict between rule 255 and token '<' resolved as shift ("||" < '<').
    Conflict between rule 255 and token '|' resolved as shift ("||" < '|').
    Conflict between rule 255 and token '^' resolved as shift ("||" < '^').
    Conflict between rule 255 and token '&' resolved as shift ("||" < '&').
    Conflict between rule 255 and token '+' resolved as shift ("||" < '+').
    Conflict between rule 255 and token '-' resolved as shift ("||" < '-').
    Conflict between rule 255 and token '*' resolved as shift ("||" < '*').
    Conflict between rule 255 and token '/' resolved as shift ("||" < '/').
    Conflict between rule 255 and token '%' resolved as shift ("||" < '%').


State 591

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  248    | arg "=~" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "&&", "||", "..", "...", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '}', ',', ')', ']', ';', '\n']
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345
    ">="  shift, and go to state 350
    "<="  shift, and go to state 351
    "<<"  shift, and go to state 358
    ">>"  shift, and go to state 359
    '>'   shift, and go to state 362
    '<'   shift, and go to state 363
    '|'   shift, and go to state 364
    '^'   shift, and go to state 365
    '&'   shift, and go to state 366
    '+'   shift, and go to state 367
    '-'   shift, and go to state 368
    '*'   shift, and go to state 369
    '/'   shift, and go to state 370
    '%'   shift, and go to state 371

    "<=>"  error (nonassociative)
    "=="   error (nonassociative)
    "==="  error (nonassociative)
    "!="   error (nonassociative)
    "=~"   error (nonassociative)
    "!~"   error (nonassociative)

    $default  reduce using rule 248 (arg)

    relop  go to state 372

    Conflict between rule 248 and token "**" resolved as shift ("=~" < "**").
    Conflict between rule 248 and token "<=>" resolved as an error (%nonassoc "<=>").
    Conflict between rule 248 and token "==" resolved as an error (%nonassoc "==").
    Conflict between rule 248 and token "===" resolved as an error (%nonassoc "===").
    Conflict between rule 248 and token "!=" resolved as an error (%nonassoc "!=").
    Conflict between rule 248 and token ">=" resolved as shift ("=~" < ">=").
    Conflict between rule 248 and token "<=" resolved as shift ("=~" < "<=").
    Conflict between rule 248 and token "&&" resolved as reduce ("&&" < "=~").
    Conflict between rule 248 and token "||" resolved as reduce ("||" < "=~").
    Conflict between rule 248 and token "=~" resolved as an error (%nonassoc "=~").
    Conflict between rule 248 and token "!~" resolved as an error (%nonassoc "!~").
    Conflict between rule 248 and token ".." resolved as reduce (".." < "=~").
    Conflict between rule 248 and token "..." resolved as reduce ("..." < "=~").
    Conflict between rule 248 and token "<<" resolved as shift ("=~" < "<<").
    Conflict between rule 248 and token ">>" resolved as shift ("=~" < ">>").
    Conflict between rule 248 and token '?' resolved as reduce ('?' < "=~").
    Conflict between rule 248 and token '>' resolved as shift ("=~" < '>').
    Conflict between rule 248 and token '<' resolved as shift ("=~" < '<').
    Conflict between rule 248 and token '|' resolved as shift ("=~" < '|').
    Conflict between rule 248 and token '^' resolved as shift ("=~" < '^').
    Conflict between rule 248 and token '&' resolved as shift ("=~" < '&').
    Conflict between rule 248 and token '+' resolved as shift ("=~" < '+').
    Conflict between rule 248 and token '-' resolved as shift ("=~" < '-').
    Conflict between rule 248 and token '*' resolved as shift ("=~" < '*').
    Conflict between rule 248 and token '/' resolved as shift ("=~" < '/').
    Conflict between rule 248 and token '%' resolved as shift ("=~" < '%').


State 592

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  249    | arg "!~" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "&&", "||", "..", "...", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '}', ',', ')', ']', ';', '\n']
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345
    ">="  shift, and go to state 350
    "<="  shift, and go to state 351
    "<<"  shift, and go to state 358
    ">>"  shift, and go to state 359
    '>'   shift, and go to state 362
    '<'   shift, and go to state 363
    '|'   shift, and go to state 364
    '^'   shift, and go to state 365
    '&'   shift, and go to state 366
    '+'   shift, and go to state 367
    '-'   shift, and go to state 368
    '*'   shift, and go to state 369
    '/'   shift, and go to state 370
    '%'   shift, and go to state 371

    "<=>"  error (nonassociative)
    "=="   error (nonassociative)
    "==="  error (nonassociative)
    "!="   error (nonassociative)
    "=~"   error (nonassociative)
    "!~"   error (nonassociative)

    $default  reduce using rule 249 (arg)

    relop  go to state 372

    Conflict between rule 249 and token "**" resolved as shift ("!~" < "**").
    Conflict between rule 249 and token "<=>" resolved as an error (%nonassoc "<=>").
    Conflict between rule 249 and token "==" resolved as an error (%nonassoc "==").
    Conflict between rule 249 and token "===" resolved as an error (%nonassoc "===").
    Conflict between rule 249 and token "!=" resolved as an error (%nonassoc "!=").
    Conflict between rule 249 and token ">=" resolved as shift ("!~" < ">=").
    Conflict between rule 249 and token "<=" resolved as shift ("!~" < "<=").
    Conflict between rule 249 and token "&&" resolved as reduce ("&&" < "!~").
    Conflict between rule 249 and token "||" resolved as reduce ("||" < "!~").
    Conflict between rule 249 and token "=~" resolved as an error (%nonassoc "=~").
    Conflict between rule 249 and token "!~" resolved as an error (%nonassoc "!~").
    Conflict between rule 249 and token ".." resolved as reduce (".." < "!~").
    Conflict between rule 249 and token "..." resolved as reduce ("..." < "!~").
    Conflict between rule 249 and token "<<" resolved as shift ("!~" < "<<").
    Conflict between rule 249 and token ">>" resolved as shift ("!~" < ">>").
    Conflict between rule 249 and token '?' resolved as reduce ('?' < "!~").
    Conflict between rule 249 and token '>' resolved as shift ("!~" < '>').
    Conflict between rule 249 and token '<' resolved as shift ("!~" < '<').
    Conflict between rule 249 and token '|' resolved as shift ("!~" < '|').
    Conflict between rule 249 and token '^' resolved as shift ("!~" < '^').
    Conflict between rule 249 and token '&' resolved as shift ("!~" < '&').
    Conflict between rule 249 and token '+' resolved as shift ("!~" < '+').
    Conflict between rule 249 and token '-' resolved as shift ("!~" < '-').
    Conflict between rule 249 and token '*' resolved as shift ("!~" < '*').
    Conflict between rule 249 and token '/' resolved as shift ("!~" < '/').
    Conflict between rule 249 and token '%' resolved as shift ("!~" < '%').


State 593

  225 arg: arg • ".." arg
  225    | arg ".." arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '}', ',', ')', ']', ';', '\n']
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"   shift, and go to state 345
    "<=>"  shift, and go to state 346
    "=="   shift, and go to state 347
    "==="  shift, and go to state 348
    "!="   shift, and go to state 349
    ">="   shift, and go to state 350
    "<="   shift, and go to state 351
    "&&"   shift, and go to state 352
    "||"   shift, and go to state 353
    "=~"   shift, and go to state 354
    "!~"   shift, and go to state 355
    "<<"   shift, and go to state 358
    ">>"   shift, and go to state 359
    '>'    shift, and go to state 362
    '<'    shift, and go to state 363
    '|'    shift, and go to state 364
    '^'    shift, and go to state 365
    '&'    shift, and go to state 366
    '+'    shift, and go to state 367
    '-'    shift, and go to state 368
    '*'    shift, and go to state 369
    '/'    shift, and go to state 370
    '%'    shift, and go to state 371

    ".."   error (nonassociative)
    "..."  error (nonassociative)

    $default  reduce using rule 225 (arg)

    relop  go to state 372

    Conflict between rule 225 and token "**" resolved as shift (".." < "**").
    Conflict between rule 225 and token "<=>" resolved as shift (".." < "<=>").
    Conflict between rule 225 and token "==" resolved as shift (".." < "==").
    Conflict between rule 225 and token "===" resolved as shift (".." < "===").
    Conflict between rule 225 and token "!=" resolved as shift (".." < "!=").
    Conflict between rule 225 and token ">=" resolved as shift (".." < ">=").
    Conflict between rule 225 and token "<=" resolved as shift (".." < "<=").
    Conflict between rule 225 and token "&&" resolved as shift (".." < "&&").
    Conflict between rule 225 and token "||" resolved as shift (".." < "||").
    Conflict between rule 225 and token "=~" resolved as shift (".." < "=~").
    Conflict between rule 225 and token "!~" resolved as shift (".." < "!~").
    Conflict between rule 225 and token ".." resolved as an error (%nonassoc "..").
    Conflict between rule 225 and token "..." resolved as an error (%nonassoc "...").
    Conflict between rule 225 and token "<<" resolved as shift (".." < "<<").
    Conflict between rule 225 and token ">>" resolved as shift (".." < ">>").
    Conflict between rule 225 and token '?' resolved as reduce ('?' < "..").
    Conflict between rule 225 and token '>' resolved as shift (".." < '>').
    Conflict between rule 225 and token '<' resolved as shift (".." < '<').
    Conflict between rule 225 and token '|' resolved as shift (".." < '|').
    Conflict between rule 225 and token '^' resolved as shift (".." < '^').
    Conflict between rule 225 and token '&' resolved as shift (".." < '&').
    Conflict between rule 225 and token '+' resolved as shift (".." < '+').
    Conflict between rule 225 and token '-' resolved as shift (".." < '-').
    Conflict between rule 225 and token '*' resolved as shift (".." < '*').
    Conflict between rule 225 and token '/' resolved as shift (".." < '/').
    Conflict between rule 225 and token '%' resolved as shift (".." < '%').


State 594

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  226    | arg "..." arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '}', ',', ')', ']', ';', '\n']
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"   shift, and go to state 345
    "<=>"  shift, and go to state 346
    "=="   shift, and go to state 347
    "==="  shift, and go to state 348
    "!="   shift, and go to state 349
    ">="   shift, and go to state 350
    "<="   shift, and go to state 351
    "&&"   shift, and go to state 352
    "||"   shift, and go to state 353
    "=~"   shift, and go to state 354
    "!~"   shift, and go to state 355
    "<<"   shift, and go to state 358
    ">>"   shift, and go to state 359
    '>'    shift, and go to state 362
    '<'    shift, and go to state 363
    '|'    shift, and go to state 364
    '^'    shift, and go to state 365
    '&'    shift, and go to state 366
    '+'    shift, and go to state 367
    '-'    shift, and go to state 368
    '*'    shift, and go to state 369
    '/'    shift, and go to state 370
    '%'    shift, and go to state 371

    ".."   error (nonassociative)
    "..."  error (nonassociative)

    $default  reduce using rule 226 (arg)

    relop  go to state 372

    Conflict between rule 226 and token "**" resolved as shift ("..." < "**").
    Conflict between rule 226 and token "<=>" resolved as shift ("..." < "<=>").
    Conflict between rule 226 and token "==" resolved as shift ("..." < "==").
    Conflict between rule 226 and token "===" resolved as shift ("..." < "===").
    Conflict between rule 226 and token "!=" resolved as shift ("..." < "!=").
    Conflict between rule 226 and token ">=" resolved as shift ("..." < ">=").
    Conflict between rule 226 and token "<=" resolved as shift ("..." < "<=").
    Conflict between rule 226 and token "&&" resolved as shift ("..." < "&&").
    Conflict between rule 226 and token "||" resolved as shift ("..." < "||").
    Conflict between rule 226 and token "=~" resolved as shift ("..." < "=~").
    Conflict between rule 226 and token "!~" resolved as shift ("..." < "!~").
    Conflict between rule 226 and token ".." resolved as an error (%nonassoc "..").
    Conflict between rule 226 and token "..." resolved as an error (%nonassoc "...").
    Conflict between rule 226 and token "<<" resolved as shift ("..." < "<<").
    Conflict between rule 226 and token ">>" resolved as shift ("..." < ">>").
    Conflict between rule 226 and token '?' resolved as reduce ('?' < "...").
    Conflict between rule 226 and token '>' resolved as shift ("..." < '>').
    Conflict between rule 226 and token '<' resolved as shift ("..." < '<').
    Conflict between rule 226 and token '|' resolved as shift ("..." < '|').
    Conflict between rule 226 and token '^' resolved as shift ("..." < '^').
    Conflict between rule 226 and token '&' resolved as shift ("..." < '&').
    Conflict between rule 226 and token '+' resolved as shift ("..." < '+').
    Conflict between rule 226 and token '-' resolved as shift ("..." < '-').
    Conflict between rule 226 and token '*' resolved as shift ("..." < '*').
    Conflict between rule 226 and token '/' resolved as shift ("..." < '/').
    Conflict between rule 226 and token '%' resolved as shift ("..." < '%').


State 595

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  252    | arg "<<" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '}', ',', ')', ']', ';', '\n']
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345
    '+'   shift, and go to state 367
    '-'   shift, and go to state 368
    '*'   shift, and go to state 369
    '/'   shift, and go to state 370
    '%'   shift, and go to state 371

    $default  reduce using rule 252 (arg)

    relop  go to state 372

    Conflict between rule 252 and token "**" resolved as shift ("<<" < "**").
    Conflict between rule 252 and token "<=>" resolved as reduce ("<=>" < "<<").
    Conflict between rule 252 and token "==" resolved as reduce ("==" < "<<").
    Conflict between rule 252 and token "===" resolved as reduce ("===" < "<<").
    Conflict between rule 252 and token "!=" resolved as reduce ("!=" < "<<").
    Conflict between rule 252 and token ">=" resolved as reduce (">=" < "<<").
    Conflict between rule 252 and token "<=" resolved as reduce ("<=" < "<<").
    Conflict between rule 252 and token "&&" resolved as reduce ("&&" < "<<").
    Conflict between rule 252 and token "||" resolved as reduce ("||" < "<<").
    Conflict between rule 252 and token "=~" resolved as reduce ("=~" < "<<").
    Conflict between rule 252 and token "!~" resolved as reduce ("!~" < "<<").
    Conflict between rule 252 and token ".." resolved as reduce (".." < "<<").
    Conflict between rule 252 and token "..." resolved as reduce ("..." < "<<").
    Conflict between rule 252 and token "<<" resolved as reduce (%left "<<").
    Conflict between rule 252 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 252 and token '?' resolved as reduce ('?' < "<<").
    Conflict between rule 252 and token '>' resolved as reduce ('>' < "<<").
    Conflict between rule 252 and token '<' resolved as reduce ('<' < "<<").
    Conflict between rule 252 and token '|' resolved as reduce ('|' < "<<").
    Conflict between rule 252 and token '^' resolved as reduce ('^' < "<<").
    Conflict between rule 252 and token '&' resolved as reduce ('&' < "<<").
    Conflict between rule 252 and token '+' resolved as shift ("<<" < '+').
    Conflict between rule 252 and token '-' resolved as shift ("<<" < '-').
    Conflict between rule 252 and token '*' resolved as shift ("<<" < '*').
    Conflict between rule 252 and token '/' resolved as shift ("<<" < '/').
    Conflict between rule 252 and token '%' resolved as shift ("<<" < '%').


State 596

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  253    | arg ">>" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '}', ',', ')', ']', ';', '\n']
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345
    '+'   shift, and go to state 367
    '-'   shift, and go to state 368
    '*'   shift, and go to state 369
    '/'   shift, and go to state 370
    '%'   shift, and go to state 371

    $default  reduce using rule 253 (arg)

    relop  go to state 372

    Conflict between rule 253 and token "**" resolved as shift (">>" < "**").
    Conflict between rule 253 and token "<=>" resolved as reduce ("<=>" < ">>").
    Conflict between rule 253 and token "==" resolved as reduce ("==" < ">>").
    Conflict between rule 253 and token "===" resolved as reduce ("===" < ">>").
    Conflict between rule 253 and token "!=" resolved as reduce ("!=" < ">>").
    Conflict between rule 253 and token ">=" resolved as reduce (">=" < ">>").
    Conflict between rule 253 and token "<=" resolved as reduce ("<=" < ">>").
    Conflict between rule 253 and token "&&" resolved as reduce ("&&" < ">>").
    Conflict between rule 253 and token "||" resolved as reduce ("||" < ">>").
    Conflict between rule 253 and token "=~" resolved as reduce ("=~" < ">>").
    Conflict between rule 253 and token "!~" resolved as reduce ("!~" < ">>").
    Conflict between rule 253 and token ".." resolved as reduce (".." < ">>").
    Conflict between rule 253 and token "..." resolved as reduce ("..." < ">>").
    Conflict between rule 253 and token "<<" resolved as reduce (%left "<<").
    Conflict between rule 253 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 253 and token '?' resolved as reduce ('?' < ">>").
    Conflict between rule 253 and token '>' resolved as reduce ('>' < ">>").
    Conflict between rule 253 and token '<' resolved as reduce ('<' < ">>").
    Conflict between rule 253 and token '|' resolved as reduce ('|' < ">>").
    Conflict between rule 253 and token '^' resolved as reduce ('^' < ">>").
    Conflict between rule 253 and token '&' resolved as reduce ('&' < ">>").
    Conflict between rule 253 and token '+' resolved as shift (">>" < '+').
    Conflict between rule 253 and token '-' resolved as shift (">>" < '-').
    Conflict between rule 253 and token '*' resolved as shift (">>" < '*').
    Conflict between rule 253 and token '/' resolved as shift (">>" < '/').
    Conflict between rule 253 and token '%' resolved as shift (">>" < '%').


State 597

   60 @6: ε •
   61 expr: arg "=>" @5 • @6 p_top_expr_body

    $default  reduce using rule 60 (@6)

    @6  go to state 779


State 598

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  258    | arg '?' arg • opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg
  770 opt_nl: ε •  [':']
  771       | • '\n'

    "**"   shift, and go to state 345
    "<=>"  shift, and go to state 346
    "=="   shift, and go to state 347
    "==="  shift, and go to state 348
    "!="   shift, and go to state 349
    ">="   shift, and go to state 350
    "<="   shift, and go to state 351
    "&&"   shift, and go to state 352
    "||"   shift, and go to state 353
    "=~"   shift, and go to state 354
    "!~"   shift, and go to state 355
    ".."   shift, and go to state 356
    "..."  shift, and go to state 357
    "<<"   shift, and go to state 358
    ">>"   shift, and go to state 359
    '?'    shift, and go to state 361
    '>'    shift, and go to state 362
    '<'    shift, and go to state 363
    '|'    shift, and go to state 364
    '^'    shift, and go to state 365
    '&'    shift, and go to state 366
    '+'    shift, and go to state 367
    '-'    shift, and go to state 368
    '*'    shift, and go to state 369
    '/'    shift, and go to state 370
    '%'    shift, and go to state 371
    '\n'   shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    relop   go to state 372
    opt_nl  go to state 780


State 599

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  240    | arg '|' arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '}', ',', ')', ']', ';', '\n']
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345
    "<<"  shift, and go to state 358
    ">>"  shift, and go to state 359
    '&'   shift, and go to state 366
    '+'   shift, and go to state 367
    '-'   shift, and go to state 368
    '*'   shift, and go to state 369
    '/'   shift, and go to state 370
    '%'   shift, and go to state 371

    $default  reduce using rule 240 (arg)

    relop  go to state 372

    Conflict between rule 240 and token "**" resolved as shift ('|' < "**").
    Conflict between rule 240 and token "<=>" resolved as reduce ("<=>" < '|').
    Conflict between rule 240 and token "==" resolved as reduce ("==" < '|').
    Conflict between rule 240 and token "===" resolved as reduce ("===" < '|').
    Conflict between rule 240 and token "!=" resolved as reduce ("!=" < '|').
    Conflict between rule 240 and token ">=" resolved as reduce (">=" < '|').
    Conflict between rule 240 and token "<=" resolved as reduce ("<=" < '|').
    Conflict between rule 240 and token "&&" resolved as reduce ("&&" < '|').
    Conflict between rule 240 and token "||" resolved as reduce ("||" < '|').
    Conflict between rule 240 and token "=~" resolved as reduce ("=~" < '|').
    Conflict between rule 240 and token "!~" resolved as reduce ("!~" < '|').
    Conflict between rule 240 and token ".." resolved as reduce (".." < '|').
    Conflict between rule 240 and token "..." resolved as reduce ("..." < '|').
    Conflict between rule 240 and token "<<" resolved as shift ('|' < "<<").
    Conflict between rule 240 and token ">>" resolved as shift ('|' < ">>").
    Conflict between rule 240 and token '?' resolved as reduce ('?' < '|').
    Conflict between rule 240 and token '>' resolved as reduce ('>' < '|').
    Conflict between rule 240 and token '<' resolved as reduce ('<' < '|').
    Conflict between rule 240 and token '|' resolved as reduce (%left '|').
    Conflict between rule 240 and token '^' resolved as reduce (%left '^').
    Conflict between rule 240 and token '&' resolved as shift ('|' < '&').
    Conflict between rule 240 and token '+' resolved as shift ('|' < '+').
    Conflict between rule 240 and token '-' resolved as shift ('|' < '-').
    Conflict between rule 240 and token '*' resolved as shift ('|' < '*').
    Conflict between rule 240 and token '/' resolved as shift ('|' < '/').
    Conflict between rule 240 and token '%' resolved as shift ('|' < '%').


State 600

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  241    | arg '^' arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '}', ',', ')', ']', ';', '\n']
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345
    "<<"  shift, and go to state 358
    ">>"  shift, and go to state 359
    '&'   shift, and go to state 366
    '+'   shift, and go to state 367
    '-'   shift, and go to state 368
    '*'   shift, and go to state 369
    '/'   shift, and go to state 370
    '%'   shift, and go to state 371

    $default  reduce using rule 241 (arg)

    relop  go to state 372

    Conflict between rule 241 and token "**" resolved as shift ('^' < "**").
    Conflict between rule 241 and token "<=>" resolved as reduce ("<=>" < '^').
    Conflict between rule 241 and token "==" resolved as reduce ("==" < '^').
    Conflict between rule 241 and token "===" resolved as reduce ("===" < '^').
    Conflict between rule 241 and token "!=" resolved as reduce ("!=" < '^').
    Conflict between rule 241 and token ">=" resolved as reduce (">=" < '^').
    Conflict between rule 241 and token "<=" resolved as reduce ("<=" < '^').
    Conflict between rule 241 and token "&&" resolved as reduce ("&&" < '^').
    Conflict between rule 241 and token "||" resolved as reduce ("||" < '^').
    Conflict between rule 241 and token "=~" resolved as reduce ("=~" < '^').
    Conflict between rule 241 and token "!~" resolved as reduce ("!~" < '^').
    Conflict between rule 241 and token ".." resolved as reduce (".." < '^').
    Conflict between rule 241 and token "..." resolved as reduce ("..." < '^').
    Conflict between rule 241 and token "<<" resolved as shift ('^' < "<<").
    Conflict between rule 241 and token ">>" resolved as shift ('^' < ">>").
    Conflict between rule 241 and token '?' resolved as reduce ('?' < '^').
    Conflict between rule 241 and token '>' resolved as reduce ('>' < '^').
    Conflict between rule 241 and token '<' resolved as reduce ('<' < '^').
    Conflict between rule 241 and token '|' resolved as reduce (%left '|').
    Conflict between rule 241 and token '^' resolved as reduce (%left '^').
    Conflict between rule 241 and token '&' resolved as shift ('^' < '&').
    Conflict between rule 241 and token '+' resolved as shift ('^' < '+').
    Conflict between rule 241 and token '-' resolved as shift ('^' < '-').
    Conflict between rule 241 and token '*' resolved as shift ('^' < '*').
    Conflict between rule 241 and token '/' resolved as shift ('^' < '/').
    Conflict between rule 241 and token '%' resolved as shift ('^' < '%').


State 601

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  242    | arg '&' arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '}', ',', ')', ']', ';', '\n']
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345
    "<<"  shift, and go to state 358
    ">>"  shift, and go to state 359
    '+'   shift, and go to state 367
    '-'   shift, and go to state 368
    '*'   shift, and go to state 369
    '/'   shift, and go to state 370
    '%'   shift, and go to state 371

    $default  reduce using rule 242 (arg)

    relop  go to state 372

    Conflict between rule 242 and token "**" resolved as shift ('&' < "**").
    Conflict between rule 242 and token "<=>" resolved as reduce ("<=>" < '&').
    Conflict between rule 242 and token "==" resolved as reduce ("==" < '&').
    Conflict between rule 242 and token "===" resolved as reduce ("===" < '&').
    Conflict between rule 242 and token "!=" resolved as reduce ("!=" < '&').
    Conflict between rule 242 and token ">=" resolved as reduce (">=" < '&').
    Conflict between rule 242 and token "<=" resolved as reduce ("<=" < '&').
    Conflict between rule 242 and token "&&" resolved as reduce ("&&" < '&').
    Conflict between rule 242 and token "||" resolved as reduce ("||" < '&').
    Conflict between rule 242 and token "=~" resolved as reduce ("=~" < '&').
    Conflict between rule 242 and token "!~" resolved as reduce ("!~" < '&').
    Conflict between rule 242 and token ".." resolved as reduce (".." < '&').
    Conflict between rule 242 and token "..." resolved as reduce ("..." < '&').
    Conflict between rule 242 and token "<<" resolved as shift ('&' < "<<").
    Conflict between rule 242 and token ">>" resolved as shift ('&' < ">>").
    Conflict between rule 242 and token '?' resolved as reduce ('?' < '&').
    Conflict between rule 242 and token '>' resolved as reduce ('>' < '&').
    Conflict between rule 242 and token '<' resolved as reduce ('<' < '&').
    Conflict between rule 242 and token '|' resolved as reduce ('|' < '&').
    Conflict between rule 242 and token '^' resolved as reduce ('^' < '&').
    Conflict between rule 242 and token '&' resolved as reduce (%left '&').
    Conflict between rule 242 and token '+' resolved as shift ('&' < '+').
    Conflict between rule 242 and token '-' resolved as shift ('&' < '-').
    Conflict between rule 242 and token '*' resolved as shift ('&' < '*').
    Conflict between rule 242 and token '/' resolved as shift ('&' < '/').
    Conflict between rule 242 and token '%' resolved as shift ('&' < '%').


State 602

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  231    | arg '+' arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '}', ',', ')', ']', ';', '\n']
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345
    '*'   shift, and go to state 369
    '/'   shift, and go to state 370
    '%'   shift, and go to state 371

    $default  reduce using rule 231 (arg)

    relop  go to state 372

    Conflict between rule 231 and token "**" resolved as shift ('+' < "**").
    Conflict between rule 231 and token "<=>" resolved as reduce ("<=>" < '+').
    Conflict between rule 231 and token "==" resolved as reduce ("==" < '+').
    Conflict between rule 231 and token "===" resolved as reduce ("===" < '+').
    Conflict between rule 231 and token "!=" resolved as reduce ("!=" < '+').
    Conflict between rule 231 and token ">=" resolved as reduce (">=" < '+').
    Conflict between rule 231 and token "<=" resolved as reduce ("<=" < '+').
    Conflict between rule 231 and token "&&" resolved as reduce ("&&" < '+').
    Conflict between rule 231 and token "||" resolved as reduce ("||" < '+').
    Conflict between rule 231 and token "=~" resolved as reduce ("=~" < '+').
    Conflict between rule 231 and token "!~" resolved as reduce ("!~" < '+').
    Conflict between rule 231 and token ".." resolved as reduce (".." < '+').
    Conflict between rule 231 and token "..." resolved as reduce ("..." < '+').
    Conflict between rule 231 and token "<<" resolved as reduce ("<<" < '+').
    Conflict between rule 231 and token ">>" resolved as reduce (">>" < '+').
    Conflict between rule 231 and token '?' resolved as reduce ('?' < '+').
    Conflict between rule 231 and token '>' resolved as reduce ('>' < '+').
    Conflict between rule 231 and token '<' resolved as reduce ('<' < '+').
    Conflict between rule 231 and token '|' resolved as reduce ('|' < '+').
    Conflict between rule 231 and token '^' resolved as reduce ('^' < '+').
    Conflict between rule 231 and token '&' resolved as reduce ('&' < '+').
    Conflict between rule 231 and token '+' resolved as reduce (%left '+').
    Conflict between rule 231 and token '-' resolved as reduce (%left '-').
    Conflict between rule 231 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 231 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 231 and token '%' resolved as shift ('+' < '%').


State 603

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  232    | arg '-' arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '}', ',', ')', ']', ';', '\n']
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345
    '*'   shift, and go to state 369
    '/'   shift, and go to state 370
    '%'   shift, and go to state 371

    $default  reduce using rule 232 (arg)

    relop  go to state 372

    Conflict between rule 232 and token "**" resolved as shift ('-' < "**").
    Conflict between rule 232 and token "<=>" resolved as reduce ("<=>" < '-').
    Conflict between rule 232 and token "==" resolved as reduce ("==" < '-').
    Conflict between rule 232 and token "===" resolved as reduce ("===" < '-').
    Conflict between rule 232 and token "!=" resolved as reduce ("!=" < '-').
    Conflict between rule 232 and token ">=" resolved as reduce (">=" < '-').
    Conflict between rule 232 and token "<=" resolved as reduce ("<=" < '-').
    Conflict between rule 232 and token "&&" resolved as reduce ("&&" < '-').
    Conflict between rule 232 and token "||" resolved as reduce ("||" < '-').
    Conflict between rule 232 and token "=~" resolved as reduce ("=~" < '-').
    Conflict between rule 232 and token "!~" resolved as reduce ("!~" < '-').
    Conflict between rule 232 and token ".." resolved as reduce (".." < '-').
    Conflict between rule 232 and token "..." resolved as reduce ("..." < '-').
    Conflict between rule 232 and token "<<" resolved as reduce ("<<" < '-').
    Conflict between rule 232 and token ">>" resolved as reduce (">>" < '-').
    Conflict between rule 232 and token '?' resolved as reduce ('?' < '-').
    Conflict between rule 232 and token '>' resolved as reduce ('>' < '-').
    Conflict between rule 232 and token '<' resolved as reduce ('<' < '-').
    Conflict between rule 232 and token '|' resolved as reduce ('|' < '-').
    Conflict between rule 232 and token '^' resolved as reduce ('^' < '-').
    Conflict between rule 232 and token '&' resolved as reduce ('&' < '-').
    Conflict between rule 232 and token '+' resolved as reduce (%left '+').
    Conflict between rule 232 and token '-' resolved as reduce (%left '-').
    Conflict between rule 232 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 232 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 232 and token '%' resolved as shift ('-' < '%').


State 604

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  233    | arg '*' arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', ',', ')', ']', ';', '\n']
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345

    $default  reduce using rule 233 (arg)

    relop  go to state 372

    Conflict between rule 233 and token "**" resolved as shift ('*' < "**").
    Conflict between rule 233 and token "<=>" resolved as reduce ("<=>" < '*').
    Conflict between rule 233 and token "==" resolved as reduce ("==" < '*').
    Conflict between rule 233 and token "===" resolved as reduce ("===" < '*').
    Conflict between rule 233 and token "!=" resolved as reduce ("!=" < '*').
    Conflict between rule 233 and token ">=" resolved as reduce (">=" < '*').
    Conflict between rule 233 and token "<=" resolved as reduce ("<=" < '*').
    Conflict between rule 233 and token "&&" resolved as reduce ("&&" < '*').
    Conflict between rule 233 and token "||" resolved as reduce ("||" < '*').
    Conflict between rule 233 and token "=~" resolved as reduce ("=~" < '*').
    Conflict between rule 233 and token "!~" resolved as reduce ("!~" < '*').
    Conflict between rule 233 and token ".." resolved as reduce (".." < '*').
    Conflict between rule 233 and token "..." resolved as reduce ("..." < '*').
    Conflict between rule 233 and token "<<" resolved as reduce ("<<" < '*').
    Conflict between rule 233 and token ">>" resolved as reduce (">>" < '*').
    Conflict between rule 233 and token '?' resolved as reduce ('?' < '*').
    Conflict between rule 233 and token '>' resolved as reduce ('>' < '*').
    Conflict between rule 233 and token '<' resolved as reduce ('<' < '*').
    Conflict between rule 233 and token '|' resolved as reduce ('|' < '*').
    Conflict between rule 233 and token '^' resolved as reduce ('^' < '*').
    Conflict between rule 233 and token '&' resolved as reduce ('&' < '*').
    Conflict between rule 233 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 233 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 233 and token '*' resolved as reduce (%left '*').
    Conflict between rule 233 and token '/' resolved as reduce (%left '/').
    Conflict between rule 233 and token '%' resolved as reduce (%left '%').


State 605

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  234    | arg '/' arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', ',', ')', ']', ';', '\n']
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345

    $default  reduce using rule 234 (arg)

    relop  go to state 372

    Conflict between rule 234 and token "**" resolved as shift ('/' < "**").
    Conflict between rule 234 and token "<=>" resolved as reduce ("<=>" < '/').
    Conflict between rule 234 and token "==" resolved as reduce ("==" < '/').
    Conflict between rule 234 and token "===" resolved as reduce ("===" < '/').
    Conflict between rule 234 and token "!=" resolved as reduce ("!=" < '/').
    Conflict between rule 234 and token ">=" resolved as reduce (">=" < '/').
    Conflict between rule 234 and token "<=" resolved as reduce ("<=" < '/').
    Conflict between rule 234 and token "&&" resolved as reduce ("&&" < '/').
    Conflict between rule 234 and token "||" resolved as reduce ("||" < '/').
    Conflict between rule 234 and token "=~" resolved as reduce ("=~" < '/').
    Conflict between rule 234 and token "!~" resolved as reduce ("!~" < '/').
    Conflict between rule 234 and token ".." resolved as reduce (".." < '/').
    Conflict between rule 234 and token "..." resolved as reduce ("..." < '/').
    Conflict between rule 234 and token "<<" resolved as reduce ("<<" < '/').
    Conflict between rule 234 and token ">>" resolved as reduce (">>" < '/').
    Conflict between rule 234 and token '?' resolved as reduce ('?' < '/').
    Conflict between rule 234 and token '>' resolved as reduce ('>' < '/').
    Conflict between rule 234 and token '<' resolved as reduce ('<' < '/').
    Conflict between rule 234 and token '|' resolved as reduce ('|' < '/').
    Conflict between rule 234 and token '^' resolved as reduce ('^' < '/').
    Conflict between rule 234 and token '&' resolved as reduce ('&' < '/').
    Conflict between rule 234 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 234 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 234 and token '*' resolved as reduce (%left '*').
    Conflict between rule 234 and token '/' resolved as reduce (%left '/').
    Conflict between rule 234 and token '%' resolved as reduce (%left '%').


State 606

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  235    | arg '%' arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', ',', ')', ']', ';', '\n']
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345

    $default  reduce using rule 235 (arg)

    relop  go to state 372

    Conflict between rule 235 and token "**" resolved as shift ('%' < "**").
    Conflict between rule 235 and token "<=>" resolved as reduce ("<=>" < '%').
    Conflict between rule 235 and token "==" resolved as reduce ("==" < '%').
    Conflict between rule 235 and token "===" resolved as reduce ("===" < '%').
    Conflict between rule 235 and token "!=" resolved as reduce ("!=" < '%').
    Conflict between rule 235 and token ">=" resolved as reduce (">=" < '%').
    Conflict between rule 235 and token "<=" resolved as reduce ("<=" < '%').
    Conflict between rule 235 and token "&&" resolved as reduce ("&&" < '%').
    Conflict between rule 235 and token "||" resolved as reduce ("||" < '%').
    Conflict between rule 235 and token "=~" resolved as reduce ("=~" < '%').
    Conflict between rule 235 and token "!~" resolved as reduce ("!~" < '%').
    Conflict between rule 235 and token ".." resolved as reduce (".." < '%').
    Conflict between rule 235 and token "..." resolved as reduce ("..." < '%').
    Conflict between rule 235 and token "<<" resolved as reduce ("<<" < '%').
    Conflict between rule 235 and token ">>" resolved as reduce (">>" < '%').
    Conflict between rule 235 and token '?' resolved as reduce ('?' < '%').
    Conflict between rule 235 and token '>' resolved as reduce ('>' < '%').
    Conflict between rule 235 and token '<' resolved as reduce ('<' < '%').
    Conflict between rule 235 and token '|' resolved as reduce ('|' < '%').
    Conflict between rule 235 and token '^' resolved as reduce ('^' < '%').
    Conflict between rule 235 and token '&' resolved as reduce ('&' < '%').
    Conflict between rule 235 and token '+' resolved as reduce ('+' < '%').
    Conflict between rule 235 and token '-' resolved as reduce ('-' < '%').
    Conflict between rule 235 and token '*' resolved as reduce (%left '*').
    Conflict between rule 235 and token '/' resolved as reduce (%left '/').
    Conflict between rule 235 and token '%' resolved as reduce (%left '%').


State 607

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg
  268         | arg relop arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '}', ',', ')', ']', ';', '\n']

    "**"  shift, and go to state 345
    "<<"  shift, and go to state 358
    ">>"  shift, and go to state 359
    '|'   shift, and go to state 364
    '^'   shift, and go to state 365
    '&'   shift, and go to state 366
    '+'   shift, and go to state 367
    '-'   shift, and go to state 368
    '*'   shift, and go to state 369
    '/'   shift, and go to state 370
    '%'   shift, and go to state 371

    $default  reduce using rule 268 (rel_expr)

    relop  go to state 372

    Conflict between rule 268 and token "**" resolved as shift ('>' < "**").
    Conflict between rule 268 and token "<=>" resolved as reduce ("<=>" < '>').
    Conflict between rule 268 and token "==" resolved as reduce ("==" < '>').
    Conflict between rule 268 and token "===" resolved as reduce ("===" < '>').
    Conflict between rule 268 and token "!=" resolved as reduce ("!=" < '>').
    Conflict between rule 268 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 268 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 268 and token "&&" resolved as reduce ("&&" < '>').
    Conflict between rule 268 and token "||" resolved as reduce ("||" < '>').
    Conflict between rule 268 and token "=~" resolved as reduce ("=~" < '>').
    Conflict between rule 268 and token "!~" resolved as reduce ("!~" < '>').
    Conflict between rule 268 and token ".." resolved as reduce (".." < '>').
    Conflict between rule 268 and token "..." resolved as reduce ("..." < '>').
    Conflict between rule 268 and token "<<" resolved as shift ('>' < "<<").
    Conflict between rule 268 and token ">>" resolved as shift ('>' < ">>").
    Conflict between rule 268 and token '?' resolved as reduce ('?' < '>').
    Conflict between rule 268 and token '>' resolved as reduce (%left '>').
    Conflict between rule 268 and token '<' resolved as reduce (%left '<').
    Conflict between rule 268 and token '|' resolved as shift ('>' < '|').
    Conflict between rule 268 and token '^' resolved as shift ('>' < '^').
    Conflict between rule 268 and token '&' resolved as shift ('>' < '&').
    Conflict between rule 268 and token '+' resolved as shift ('>' < '+').
    Conflict between rule 268 and token '-' resolved as shift ('>' < '-').
    Conflict between rule 268 and token '*' resolved as shift ('>' < '*').
    Conflict between rule 268 and token '/' resolved as shift ('>' < '/').
    Conflict between rule 268 and token '%' resolved as shift ('>' < '%').


State 608

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg
  269         | rel_expr relop arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '}', ',', ')', ']', ';', '\n']

    "**"  shift, and go to state 345
    "<<"  shift, and go to state 358
    ">>"  shift, and go to state 359
    '|'   shift, and go to state 364
    '^'   shift, and go to state 365
    '&'   shift, and go to state 366
    '+'   shift, and go to state 367
    '-'   shift, and go to state 368
    '*'   shift, and go to state 369
    '/'   shift, and go to state 370
    '%'   shift, and go to state 371

    $default  reduce using rule 269 (rel_expr)

    relop  go to state 372

    Conflict between rule 269 and token "**" resolved as shift ('>' < "**").
    Conflict between rule 269 and token "<=>" resolved as reduce ("<=>" < '>').
    Conflict between rule 269 and token "==" resolved as reduce ("==" < '>').
    Conflict between rule 269 and token "===" resolved as reduce ("===" < '>').
    Conflict between rule 269 and token "!=" resolved as reduce ("!=" < '>').
    Conflict between rule 269 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 269 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 269 and token "&&" resolved as reduce ("&&" < '>').
    Conflict between rule 269 and token "||" resolved as reduce ("||" < '>').
    Conflict between rule 269 and token "=~" resolved as reduce ("=~" < '>').
    Conflict between rule 269 and token "!~" resolved as reduce ("!~" < '>').
    Conflict between rule 269 and token ".." resolved as reduce (".." < '>').
    Conflict between rule 269 and token "..." resolved as reduce ("..." < '>').
    Conflict between rule 269 and token "<<" resolved as shift ('>' < "<<").
    Conflict between rule 269 and token ">>" resolved as shift ('>' < ">>").
    Conflict between rule 269 and token '?' resolved as reduce ('?' < '>').
    Conflict between rule 269 and token '>' resolved as reduce (%left '>').
    Conflict between rule 269 and token '<' resolved as reduce (%left '<').
    Conflict between rule 269 and token '|' resolved as shift ('>' < '|').
    Conflict between rule 269 and token '^' resolved as shift ('>' < '^').
    Conflict between rule 269 and token '&' resolved as shift ('>' < '&').
    Conflict between rule 269 and token '+' resolved as shift ('>' < '+').
    Conflict between rule 269 and token '-' resolved as shift ('>' < '-').
    Conflict between rule 269 and token '*' resolved as shift ('>' < '*').
    Conflict between rule 269 and token '/' resolved as shift ('>' < '/').
    Conflict between rule 269 and token '%' resolved as shift ('>' < '%').


State 609

   45 command_asgn: primary_value "::" "local variable or method" • "operator-assignment" lex_ctxt command_rhs
  116 mlhs_node: primary_value "::" "local variable or method" •  [',']
  125 lhs: primary_value "::" "local variable or method" •  ['=']
  221 arg: primary_value "::" "local variable or method" • "operator-assignment" lex_ctxt arg_rhs
  754 operation: "local variable or method" •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', '(']
  759 operation3: "local variable or method" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`do'", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '{', '}', '[', ')', ';', '\n']

    "operator-assignment"  shift, and go to state 781

    "end-of-input"       reduce using rule 759 (operation3)
    "`rescue'"           reduce using rule 759 (operation3)
    "`ensure'"           reduce using rule 759 (operation3)
    "`end'"              reduce using rule 759 (operation3)
    "`elsif'"            reduce using rule 759 (operation3)
    "`else'"             reduce using rule 759 (operation3)
    "`when'"             reduce using rule 759 (operation3)
    "`in'"               reduce using rule 759 (operation3)
    "`do'"               reduce using rule 759 (operation3)
    "`and'"              reduce using rule 759 (operation3)
    "`or'"               reduce using rule 759 (operation3)
    "`if' modifier"      reduce using rule 759 (operation3)
    "`unless' modifier"  reduce using rule 759 (operation3)
    "`while' modifier"   reduce using rule 759 (operation3)
    "`until' modifier"   reduce using rule 759 (operation3)
    "`rescue' modifier"  reduce using rule 759 (operation3)
    "dummy end"          reduce using rule 759 (operation3)
    '.'                  reduce using rule 759 (operation3)
    "**"                 reduce using rule 759 (operation3)
    "<=>"                reduce using rule 759 (operation3)
    "=="                 reduce using rule 759 (operation3)
    "==="                reduce using rule 759 (operation3)
    "!="                 reduce using rule 759 (operation3)
    ">="                 reduce using rule 759 (operation3)
    "<="                 reduce using rule 759 (operation3)
    "&&"                 reduce using rule 759 (operation3)
    "||"                 reduce using rule 759 (operation3)
    "=~"                 reduce using rule 759 (operation3)
    "!~"                 reduce using rule 759 (operation3)
    ".."                 reduce using rule 759 (operation3)
    "..."                reduce using rule 759 (operation3)
    "<<"                 reduce using rule 759 (operation3)
    ">>"                 reduce using rule 759 (operation3)
    "&."                 reduce using rule 759 (operation3)
    "::"                 reduce using rule 759 (operation3)
    "=>"                 reduce using rule 759 (operation3)
    "'}'"                reduce using rule 759 (operation3)
    '='                  reduce using rule 125 (lhs)
    '?'                  reduce using rule 759 (operation3)
    '>'                  reduce using rule 759 (operation3)
    '<'                  reduce using rule 759 (operation3)
    '|'                  reduce using rule 759 (operation3)
    '^'                  reduce using rule 759 (operation3)
    '&'                  reduce using rule 759 (operation3)
    '+'                  reduce using rule 759 (operation3)
    '-'                  reduce using rule 759 (operation3)
    '*'                  reduce using rule 759 (operation3)
    '/'                  reduce using rule 759 (operation3)
    '%'                  reduce using rule 759 (operation3)
    '{'                  reduce using rule 759 (operation3)
    '}'                  reduce using rule 759 (operation3)
    '['                  reduce using rule 759 (operation3)
    ','                  reduce using rule 116 (mlhs_node)
    ')'                  reduce using rule 759 (operation3)
    ';'                  reduce using rule 759 (operation3)
    '\n'                 reduce using rule 759 (operation3)
    $default             reduce using rule 754 (operation)


State 610

  756 operation: "method" •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', '(']
  760 operation3: "method" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '{', '}', '[', ',', ')', ']', ';', '\n']

    "end-of-input"        reduce using rule 760 (operation3)
    "`rescue'"            reduce using rule 760 (operation3)
    "`ensure'"            reduce using rule 760 (operation3)
    "`end'"               reduce using rule 760 (operation3)
    "`then'"              reduce using rule 760 (operation3)
    "`elsif'"             reduce using rule 760 (operation3)
    "`else'"              reduce using rule 760 (operation3)
    "`when'"              reduce using rule 760 (operation3)
    "`in'"                reduce using rule 760 (operation3)
    "`do'"                reduce using rule 760 (operation3)
    "`do' for condition"  reduce using rule 760 (operation3)
    "`do' for block"      reduce using rule 760 (operation3)
    "`do' for lambda"     reduce using rule 760 (operation3)
    "`and'"               reduce using rule 760 (operation3)
    "`or'"                reduce using rule 760 (operation3)
    "`if' modifier"       reduce using rule 760 (operation3)
    "`unless' modifier"   reduce using rule 760 (operation3)
    "`while' modifier"    reduce using rule 760 (operation3)
    "`until' modifier"    reduce using rule 760 (operation3)
    "`rescue' modifier"   reduce using rule 760 (operation3)
    "dummy end"           reduce using rule 760 (operation3)
    '.'                   reduce using rule 760 (operation3)
    "**"                  reduce using rule 760 (operation3)
    "<=>"                 reduce using rule 760 (operation3)
    "=="                  reduce using rule 760 (operation3)
    "==="                 reduce using rule 760 (operation3)
    "!="                  reduce using rule 760 (operation3)
    ">="                  reduce using rule 760 (operation3)
    "<="                  reduce using rule 760 (operation3)
    "&&"                  reduce using rule 760 (operation3)
    "||"                  reduce using rule 760 (operation3)
    "=~"                  reduce using rule 760 (operation3)
    "!~"                  reduce using rule 760 (operation3)
    ".."                  reduce using rule 760 (operation3)
    "..."                 reduce using rule 760 (operation3)
    "<<"                  reduce using rule 760 (operation3)
    ">>"                  reduce using rule 760 (operation3)
    "&."                  reduce using rule 760 (operation3)
    "::"                  reduce using rule 760 (operation3)
    "=>"                  reduce using rule 760 (operation3)
    "{ arg"               reduce using rule 760 (operation3)
    "'}'"                 reduce using rule 760 (operation3)
    tLAMBEG               reduce using rule 760 (operation3)
    '?'                   reduce using rule 760 (operation3)
    ':'                   reduce using rule 760 (operation3)
    '>'                   reduce using rule 760 (operation3)
    '<'                   reduce using rule 760 (operation3)
    '|'                   reduce using rule 760 (operation3)
    '^'                   reduce using rule 760 (operation3)
    '&'                   reduce using rule 760 (operation3)
    '+'                   reduce using rule 760 (operation3)
    '-'                   reduce using rule 760 (operation3)
    '*'                   reduce using rule 760 (operation3)
    '/'                   reduce using rule 760 (operation3)
    '%'                   reduce using rule 760 (operation3)
    '{'                   reduce using rule 760 (operation3)
    '}'                   reduce using rule 760 (operation3)
    '['                   reduce using rule 760 (operation3)
    ','                   reduce using rule 760 (operation3)
    ')'                   reduce using rule 760 (operation3)
    ']'                   reduce using rule 760 (operation3)
    ';'                   reduce using rule 760 (operation3)
    '\n'                  reduce using rule 760 (operation3)
    $default              reduce using rule 756 (operation)


State 611

   44 command_asgn: primary_value "::" "constant" • "operator-assignment" lex_ctxt command_rhs
  118 mlhs_node: primary_value "::" "constant" •  [',']
  127 lhs: primary_value "::" "constant" •  ['=']
  222 arg: primary_value "::" "constant" • "operator-assignment" lex_ctxt arg_rhs
  328 primary: primary_value "::" "constant" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ')', ';', '\n']
  755 operation: "constant" •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', '(']

    "operator-assignment"  shift, and go to state 782

    "end-of-input"       reduce using rule 328 (primary)
    "`rescue'"           reduce using rule 328 (primary)
    "`ensure'"           reduce using rule 328 (primary)
    "`end'"              reduce using rule 328 (primary)
    "`elsif'"            reduce using rule 328 (primary)
    "`else'"             reduce using rule 328 (primary)
    "`when'"             reduce using rule 328 (primary)
    "`in'"               reduce using rule 328 (primary)
    "`and'"              reduce using rule 328 (primary)
    "`or'"               reduce using rule 328 (primary)
    "`if' modifier"      reduce using rule 328 (primary)
    "`unless' modifier"  reduce using rule 328 (primary)
    "`while' modifier"   reduce using rule 328 (primary)
    "`until' modifier"   reduce using rule 328 (primary)
    "`rescue' modifier"  reduce using rule 328 (primary)
    "dummy end"          reduce using rule 328 (primary)
    '.'                  reduce using rule 328 (primary)
    "**"                 reduce using rule 328 (primary)
    "<=>"                reduce using rule 328 (primary)
    "=="                 reduce using rule 328 (primary)
    "==="                reduce using rule 328 (primary)
    "!="                 reduce using rule 328 (primary)
    ">="                 reduce using rule 328 (primary)
    "<="                 reduce using rule 328 (primary)
    "&&"                 reduce using rule 328 (primary)
    "||"                 reduce using rule 328 (primary)
    "=~"                 reduce using rule 328 (primary)
    "!~"                 reduce using rule 328 (primary)
    ".."                 reduce using rule 328 (primary)
    "..."                reduce using rule 328 (primary)
    "<<"                 reduce using rule 328 (primary)
    ">>"                 reduce using rule 328 (primary)
    "&."                 reduce using rule 328 (primary)
    "::"                 reduce using rule 328 (primary)
    "=>"                 reduce using rule 328 (primary)
    "'}'"                reduce using rule 328 (primary)
    '='                  reduce using rule 127 (lhs)
    '?'                  reduce using rule 328 (primary)
    '>'                  reduce using rule 328 (primary)
    '<'                  reduce using rule 328 (primary)
    '|'                  reduce using rule 328 (primary)
    '^'                  reduce using rule 328 (primary)
    '&'                  reduce using rule 328 (primary)
    '+'                  reduce using rule 328 (primary)
    '-'                  reduce using rule 328 (primary)
    '*'                  reduce using rule 328 (primary)
    '/'                  reduce using rule 328 (primary)
    '%'                  reduce using rule 328 (primary)
    '}'                  reduce using rule 328 (primary)
    '['                  reduce using rule 328 (primary)
    ','                  reduce using rule 118 (mlhs_node)
    ')'                  reduce using rule 328 (primary)
    ';'                  reduce using rule 328 (primary)
    '\n'                 reduce using rule 328 (primary)
    $default             reduce using rule 755 (operation)


State 612

  758 operation2: op •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', '(']
  761 operation3: op •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '{', '}', '[', ',', ')', ']', ';', '\n']

    "end-of-input"        reduce using rule 761 (operation3)
    "`rescue'"            reduce using rule 761 (operation3)
    "`ensure'"            reduce using rule 761 (operation3)
    "`end'"               reduce using rule 761 (operation3)
    "`then'"              reduce using rule 761 (operation3)
    "`elsif'"             reduce using rule 761 (operation3)
    "`else'"              reduce using rule 761 (operation3)
    "`when'"              reduce using rule 761 (operation3)
    "`in'"                reduce using rule 761 (operation3)
    "`do'"                reduce using rule 761 (operation3)
    "`do' for condition"  reduce using rule 761 (operation3)
    "`do' for block"      reduce using rule 761 (operation3)
    "`do' for lambda"     reduce using rule 761 (operation3)
    "`and'"               reduce using rule 761 (operation3)
    "`or'"                reduce using rule 761 (operation3)
    "`if' modifier"       reduce using rule 761 (operation3)
    "`unless' modifier"   reduce using rule 761 (operation3)
    "`while' modifier"    reduce using rule 761 (operation3)
    "`until' modifier"    reduce using rule 761 (operation3)
    "`rescue' modifier"   reduce using rule 761 (operation3)
    "dummy end"           reduce using rule 761 (operation3)
    '.'                   reduce using rule 761 (operation3)
    "**"                  reduce using rule 761 (operation3)
    "<=>"                 reduce using rule 761 (operation3)
    "=="                  reduce using rule 761 (operation3)
    "==="                 reduce using rule 761 (operation3)
    "!="                  reduce using rule 761 (operation3)
    ">="                  reduce using rule 761 (operation3)
    "<="                  reduce using rule 761 (operation3)
    "&&"                  reduce using rule 761 (operation3)
    "||"                  reduce using rule 761 (operation3)
    "=~"                  reduce using rule 761 (operation3)
    "!~"                  reduce using rule 761 (operation3)
    ".."                  reduce using rule 761 (operation3)
    "..."                 reduce using rule 761 (operation3)
    "<<"                  reduce using rule 761 (operation3)
    ">>"                  reduce using rule 761 (operation3)
    "&."                  reduce using rule 761 (operation3)
    "::"                  reduce using rule 761 (operation3)
    "=>"                  reduce using rule 761 (operation3)
    "{ arg"               reduce using rule 761 (operation3)
    "'}'"                 reduce using rule 761 (operation3)
    tLAMBEG               reduce using rule 761 (operation3)
    '?'                   reduce using rule 761 (operation3)
    ':'                   reduce using rule 761 (operation3)
    '>'                   reduce using rule 761 (operation3)
    '<'                   reduce using rule 761 (operation3)
    '|'                   reduce using rule 761 (operation3)
    '^'                   reduce using rule 761 (operation3)
    '&'                   reduce using rule 761 (operation3)
    '+'                   reduce using rule 761 (operation3)
    '-'                   reduce using rule 761 (operation3)
    '*'                   reduce using rule 761 (operation3)
    '/'                   reduce using rule 761 (operation3)
    '%'                   reduce using rule 761 (operation3)
    '{'                   reduce using rule 761 (operation3)
    '}'                   reduce using rule 761 (operation3)
    '['                   reduce using rule 761 (operation3)
    ','                   reduce using rule 761 (operation3)
    ')'                   reduce using rule 761 (operation3)
    ']'                   reduce using rule 761 (operation3)
    ';'                   reduce using rule 761 (operation3)
    '\n'                  reduce using rule 761 (operation3)
    $default              reduce using rule 758 (operation2)


State 613

  467 method_call: primary_value "::" paren_args •

    $default  reduce using rule 467 (method_call)


State 614

  757 operation2: operation •

    $default  reduce using rule 757 (operation2)


State 615

   85 command: primary_value "::" operation2 • command_args
   86        | primary_value "::" operation2 • command_args cmd_brace_block
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  293 $@14: ε •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~']
  294 command_args: • $@14 call_args
  464 method_call: primary_value "::" operation2 • paren_args

    '('  shift, and go to state 238

    $default  reduce using rule 293 ($@14)

    paren_args    go to state 783
    command_args  go to state 784
    $@14          go to state 237


State 616

  465 method_call: primary_value "::" operation3 •

    $default  reduce using rule 465 (method_call)


State 617

   41 command_asgn: primary_value '[' opt_call_args • rbracket "operator-assignment" lex_ctxt command_rhs
  114 mlhs_node: primary_value '[' opt_call_args • rbracket
  123 lhs: primary_value '[' opt_call_args • rbracket
  218 arg: primary_value '[' opt_call_args • rbracket "operator-assignment" lex_ctxt arg_rhs
  470 method_call: primary_value '[' opt_call_args • rbracket
  770 opt_nl: ε •  [']']
  771       | • '\n'
  773 rbracket: • opt_nl ']'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl    go to state 785
    rbracket  go to state 786


State 618

  285 opt_call_args: args • ','
  286              | args • ',' assocs ','
  289 call_args: args • opt_block_arg
  291          | args • ',' assocs opt_block_arg
  297 opt_block_arg: • ',' block_arg
  298              | • none
  302 args: args • ',' arg_value
  303     | args • ',' "*" arg_value
  304     | args • ',' "*"
  781 none: ε •  [']', '\n']

    ','  shift, and go to state 787

    $default  reduce using rule 781 (none)

    opt_block_arg  go to state 443
    none           go to state 444


State 619

   42 command_asgn: primary_value call_op "local variable or method" • "operator-assignment" lex_ctxt command_rhs
  115 mlhs_node: primary_value call_op "local variable or method" •  [',']
  124 lhs: primary_value call_op "local variable or method" •  ['=']
  219 arg: primary_value call_op "local variable or method" • "operator-assignment" lex_ctxt arg_rhs
  754 operation: "local variable or method" •  ["end-of-input", "`class'", "`module'", "`def'", "`begin'", "`rescue'", "`ensure'", "`end'", "`if'", "`unless'", "`elsif'", "`else'", "`case'", "`when'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`in'", "`do'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`and'", "`or'", "`not'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "dummy end", '.', "unary+", "unary-", "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "(..", "(...", "<<", ">>", "&.", "::", ":: at EXPR_BEG", "=>", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', tUMINUS_NUM, '!', '~', '{', '}', '[', '(', ')', ';', '\n']

    "operator-assignment"  shift, and go to state 788

    '='       reduce using rule 124 (lhs)
    ','       reduce using rule 115 (mlhs_node)
    $default  reduce using rule 754 (operation)


State 620

  756 operation: "method" •

    $default  reduce using rule 756 (operation)


State 621

   43 command_asgn: primary_value call_op "constant" • "operator-assignment" lex_ctxt command_rhs
  117 mlhs_node: primary_value call_op "constant" •  [',']
  126 lhs: primary_value call_op "constant" •  ['=']
  220 arg: primary_value call_op "constant" • "operator-assignment" lex_ctxt arg_rhs
  755 operation: "constant" •  ["end-of-input", "`class'", "`module'", "`def'", "`begin'", "`rescue'", "`ensure'", "`end'", "`if'", "`unless'", "`elsif'", "`else'", "`case'", "`when'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`in'", "`do'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`and'", "`or'", "`not'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "dummy end", '.', "unary+", "unary-", "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "(..", "(...", "<<", ">>", "&.", "::", ":: at EXPR_BEG", "=>", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', tUMINUS_NUM, '!', '~', '{', '}', '[', '(', ')', ';', '\n']

    "operator-assignment"  shift, and go to state 789

    '='       reduce using rule 126 (lhs)
    ','       reduce using rule 117 (mlhs_node)
    $default  reduce using rule 755 (operation)


State 622

  758 operation2: op •

    $default  reduce using rule 758 (operation2)


State 623

  466 method_call: primary_value call_op paren_args •

    $default  reduce using rule 466 (method_call)


State 624

   83 command: primary_value call_op operation2 • command_args
   84        | primary_value call_op operation2 • command_args cmd_brace_block
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  281 opt_paren_args: • none
  282               | • paren_args
  293 $@14: ε •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~']
  294 command_args: • $@14 call_args
  463 method_call: primary_value call_op operation2 • opt_paren_args
  781 none: ε •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '{', '}', '[', ',', ')', ']', ';', '\n']

    '('  shift, and go to state 238

    "end-of-input"        reduce using rule 781 (none)
    "`rescue'"            reduce using rule 781 (none)
    "`ensure'"            reduce using rule 781 (none)
    "`end'"               reduce using rule 781 (none)
    "`then'"              reduce using rule 781 (none)
    "`elsif'"             reduce using rule 781 (none)
    "`else'"              reduce using rule 781 (none)
    "`when'"              reduce using rule 781 (none)
    "`in'"                reduce using rule 781 (none)
    "`do'"                reduce using rule 781 (none)
    "`do' for condition"  reduce using rule 781 (none)
    "`do' for block"      reduce using rule 781 (none)
    "`and'"               reduce using rule 781 (none)
    "`or'"                reduce using rule 781 (none)
    "`if' modifier"       reduce using rule 781 (none)
    "`unless' modifier"   reduce using rule 781 (none)
    "`while' modifier"    reduce using rule 781 (none)
    "`until' modifier"    reduce using rule 781 (none)
    "`rescue' modifier"   reduce using rule 781 (none)
    "dummy end"           reduce using rule 781 (none)
    '.'                   reduce using rule 781 (none)
    "**"                  reduce using rule 781 (none)
    "<=>"                 reduce using rule 781 (none)
    "=="                  reduce using rule 781 (none)
    "==="                 reduce using rule 781 (none)
    "!="                  reduce using rule 781 (none)
    ">="                  reduce using rule 781 (none)
    "<="                  reduce using rule 781 (none)
    "&&"                  reduce using rule 781 (none)
    "||"                  reduce using rule 781 (none)
    "=~"                  reduce using rule 781 (none)
    "!~"                  reduce using rule 781 (none)
    ".."                  reduce using rule 781 (none)
    "..."                 reduce using rule 781 (none)
    "<<"                  reduce using rule 781 (none)
    ">>"                  reduce using rule 781 (none)
    "&."                  reduce using rule 781 (none)
    "::"                  reduce using rule 781 (none)
    "=>"                  reduce using rule 781 (none)
    "{ arg"               reduce using rule 781 (none)
    "'}'"                 reduce using rule 781 (none)
    '?'                   reduce using rule 781 (none)
    '>'                   reduce using rule 781 (none)
    '<'                   reduce using rule 781 (none)
    '|'                   reduce using rule 781 (none)
    '^'                   reduce using rule 781 (none)
    '&'                   reduce using rule 781 (none)
    '+'                   reduce using rule 781 (none)
    '-'                   reduce using rule 781 (none)
    '*'                   reduce using rule 781 (none)
    '/'                   reduce using rule 781 (none)
    '%'                   reduce using rule 781 (none)
    '{'                   reduce using rule 781 (none)
    '}'                   reduce using rule 781 (none)
    '['                   reduce using rule 781 (none)
    ','                   reduce using rule 781 (none)
    ')'                   reduce using rule 781 (none)
    ']'                   reduce using rule 781 (none)
    ';'                   reduce using rule 781 (none)
    '\n'                  reduce using rule 781 (none)
    $default              reduce using rule 293 ($@14)

    paren_args      go to state 790
    opt_paren_args  go to state 791
    command_args    go to state 792
    $@14            go to state 237
    none            go to state 793


State 625

  322 primary: k_begin $@15 bodystmt • k_end
  386 k_end: • "`end'"
  387      | • "dummy end"

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 794


State 626

   11 bodystmt: compstmt • opt_rescue k_else $@2 compstmt opt_ensure
   12         | compstmt • opt_rescue opt_ensure
  381 k_rescue: • "`rescue'"
  586 opt_rescue: • k_rescue exc_list exc_var then compstmt opt_rescue
  587           | • none
  781 none: ε •  ["`ensure'", "`end'", "`else'", "dummy end"]

    "`rescue'"  shift, and go to state 795

    $default  reduce using rule 781 (none)

    k_rescue    go to state 796
    opt_rescue  go to state 797
    none        go to state 798


State 627

  390 then: "`then'" •

    $default  reduce using rule 390 (then)


State 628

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  344        | k_if expr_value then • compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`end'", "`elsif'", "`else'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`end'"      reduce using rule 781 (none)
    "`elsif'"    reduce using rule 781 (none)
    "`else'"     reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    compstmt          go to state 799
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 629

  389 then: term •  [error, "`class'", "`module'", "`def'", "`undef'", "`begin'", "`rescue'", "`ensure'", "`end'", "`if'", "`unless'", "`elsif'", "`else'", "`case'", "`when'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`in'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`alias'", "`defined?'", "`BEGIN'", "`END'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "dummy end", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', ';', '\n']
  391     | term • "`then'"

    "`then'"  shift, and go to state 800

    $default  reduce using rule 389 (then)


State 630

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  345        | k_unless expr_value then • compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`end'", "`else'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`end'"      reduce using rule 781 (none)
    "`else'"     reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    compstmt          go to state 801
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 631

  346 primary: k_while expr_value_do compstmt • k_end
  386 k_end: • "`end'"
  387      | • "dummy end"

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 802


State 632

   74 expr_value_do: $@10 expr_value • do $@11
  392 do: • term
  393   | • "`do' for condition"
  777 term: • ';'
  778     | • '\n'

    "`do' for condition"  shift, and go to state 803
    ';'                   shift, and go to state 309
    '\n'                  shift, and go to state 310

    do    go to state 804
    term  go to state 805


State 633

  347 primary: k_until expr_value_do compstmt • k_end
  386 k_end: • "`end'"
  387      | • "dummy end"

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 806


State 634

  348 @19: ε •  ["`when'"]
  349 primary: k_case expr_value opt_terms • @19 case_body k_end
  352        | k_case expr_value opt_terms • p_case_body k_end
  491 p_case_body: • "`in'" @38 @39 p_top_expr then $@40 compstmt p_cases

    "`in'"  shift, and go to state 807

    $default  reduce using rule 348 (@19)

    @19          go to state 808
    p_case_body  go to state 809


State 635

  351 primary: k_case opt_terms @20 • case_body k_end
  383 k_when: • "`when'"
  485 case_body: • k_when case_args then compstmt cases

    "`when'"  shift, and go to state 810

    k_when     go to state 811
    case_body  go to state 812


State 636

  119 mlhs_node: ":: at EXPR_BEG" "constant" •  [',']
  128 lhs: ":: at EXPR_BEG" "constant" •  ["`in'"]
  329 primary: ":: at EXPR_BEG" "constant" •  ['.', "&.", "::", '[']

    "`in'"    reduce using rule 128 (lhs)
    ','       reduce using rule 119 (mlhs_node)
    $default  reduce using rule 329 (primary)


State 637

  116 mlhs_node: primary_value "::" • "local variable or method"
  118          | primary_value "::" • "constant"
  125 lhs: primary_value "::" • "local variable or method"
  127    | primary_value "::" • "constant"
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  328 primary: primary_value "::" • "constant"
  464 method_call: primary_value "::" • operation2 paren_args
  465            | primary_value "::" • operation3
  467            | primary_value "::" • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op
  759 operation3: • "local variable or method"
  760           | • "method"
  761           | • op

    "local variable or method"  shift, and go to state 813
    "method"                    shift, and go to state 610
    "constant"                  shift, and go to state 814
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 612
    paren_args  go to state 613
    operation   go to state 614
    operation2  go to state 690
    operation3  go to state 616


State 638

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  114 mlhs_node: primary_value '[' • opt_call_args rbracket
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  123    | primary_value '[' • opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  283 opt_call_args: • none
  284              | • call_args
  285              | • args ','
  286              | • args ',' assocs ','
  287              | • assocs ','
  288 call_args: • command
  289          | • args opt_block_arg
  290          | • assocs opt_block_arg
  291          | • args ',' assocs opt_block_arg
  292          | • block_arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  470            | primary_value '[' • opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  [']', '\n']

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 213
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 781 (none)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 80
    command           go to state 220
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 223
    opt_call_args     go to state 815
    call_args         go to state 458
    block_arg         go to state 225
    args              go to state 618
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 461
    assoc             go to state 233
    operation         go to state 127
    none              go to state 462


State 639

  115 mlhs_node: primary_value call_op • "local variable or method"
  117          | primary_value call_op • "constant"
  124 lhs: primary_value call_op • "local variable or method"
  126    | primary_value call_op • "constant"
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  463 method_call: primary_value call_op • operation2 opt_paren_args
  466            | primary_value call_op • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op

    "local variable or method"  shift, and go to state 816
    "method"                    shift, and go to state 620
    "constant"                  shift, and go to state 817
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 622
    paren_args  go to state 623
    operation   go to state 614
    operation2  go to state 691


State 640

   72 $@10: ε •
   74 expr_value_do: • $@10 expr_value do $@11
  353 primary: k_for for_var "`in'" • expr_value_do compstmt k_end

    $default  reduce using rule 72 ($@10)

    expr_value_do  go to state 818
    $@10           go to state 385


State 641

   55 expr: expr • "`and'" expr
   56     | expr • "`or'" expr
  356 $@22: ε •  [';', '\n']
  357 primary: k_class "<<" expr • $@22 term bodystmt k_end

    "`and'"  shift, and go to state 319
    "`or'"   shift, and go to state 320

    $default  reduce using rule 356 ($@22)

    $@22  go to state 819


State 642

  130 cname: "local variable or method" •

    $default  reduce using rule 130 (cname)


State 643

  131 cname: "constant" •  [error, "`class'", "`module'", "`def'", "`undef'", "`begin'", "`rescue'", "`ensure'", "`end'", "`if'", "`unless'", "`else'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`alias'", "`defined?'", "`BEGIN'", "`END'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "dummy end", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", '<', tUMINUS_NUM, '!', '~', ';', '\n']
  329 primary: ":: at EXPR_BEG" "constant" •  ['.', "&.", "::", '[']

    '.'       reduce using rule 329 (primary)
    "&."      reduce using rule 329 (primary)
    "::"      reduce using rule 329 (primary)
    '['       reduce using rule 329 (primary)
    $default  reduce using rule 131 (cname)


State 644

  132 cpath: ":: at EXPR_BEG" cname •

    $default  reduce using rule 132 (cpath)


State 645

  668 $@49: ε •
  669 superclass: '<' • $@49 expr_value term

    $default  reduce using rule 668 ($@49)

    $@49  go to state 820


State 646

  354 $@21: ε •
  355 primary: k_class cpath superclass • $@21 bodystmt k_end

    $default  reduce using rule 354 ($@21)

    $@21  go to state 821


State 647

  130 cname: • "local variable or method"
  131      | • "constant"
  134 cpath: primary_value "::" • cname
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  328 primary: primary_value "::" • "constant"
  464 method_call: primary_value "::" • operation2 paren_args
  465            | primary_value "::" • operation3
  467            | primary_value "::" • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op
  759 operation3: • "local variable or method"
  760           | • "method"
  761           | • op

    "local variable or method"  shift, and go to state 822
    "method"                    shift, and go to state 610
    "constant"                  shift, and go to state 823
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    cname       go to state 824
    op          go to state 612
    paren_args  go to state 613
    operation   go to state 614
    operation2  go to state 690
    operation3  go to state 616


State 648

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  283 opt_call_args: • none
  284              | • call_args
  285              | • args ','
  286              | • args ',' assocs ','
  287              | • assocs ','
  288 call_args: • command
  289          | • args opt_block_arg
  290          | • assocs opt_block_arg
  291          | • args ',' assocs opt_block_arg
  292          | • block_arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  470            | primary_value '[' • opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  [']', '\n']

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 213
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 781 (none)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 80
    command           go to state 220
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 223
    opt_call_args     go to state 825
    call_args         go to state 458
    block_arg         go to state 225
    args              go to state 618
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 461
    assoc             go to state 233
    operation         go to state 127
    none              go to state 462


State 649

  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  463 method_call: primary_value call_op • operation2 opt_paren_args
  466            | primary_value call_op • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op

    "local variable or method"  shift, and go to state 655
    "method"                    shift, and go to state 620
    "constant"                  shift, and go to state 656
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 622
    paren_args  go to state 623
    operation   go to state 614
    operation2  go to state 691


State 650

   11 bodystmt: • compstmt opt_rescue k_else $@2 compstmt opt_ensure
   12         | • compstmt opt_rescue opt_ensure
   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  359        | k_module cpath $@23 • bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`rescue'", "`ensure'", "`end'", "`else'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`rescue'"   reduce using rule 781 (none)
    "`ensure'"   reduce using rule 781 (none)
    "`end'"      reduce using rule 781 (none)
    "`else'"     reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    bodystmt          go to state 826
    compstmt          go to state 626
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 651

   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  743 singleton: '(' $@51 • expr rparen
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 827
    defn_head         go to state 218
    defs_head         go to state 219
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 652

  762 dot_or_colon: '.' •

    $default  reduce using rule 762 (dot_or_colon)


State 653

  763 dot_or_colon: "::" •

    $default  reduce using rule 763 (dot_or_colon)


State 654

   68 $@9: ε •
   69 defs_head: k_def singleton dot_or_colon • $@9 def_name

    $default  reduce using rule 68 ($@9)

    $@9  go to state 828


State 655

  754 operation: "local variable or method" •

    $default  reduce using rule 754 (operation)


State 656

  755 operation: "constant" •

    $default  reduce using rule 755 (operation)


State 657

   78 block_command: block_call call_op2 operation2 • command_args
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  281 opt_paren_args: • none
  282               | • paren_args
  293 $@14: ε •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~']
  294 command_args: • $@14 call_args
  459 block_call: block_call call_op2 operation2 • opt_paren_args
  460           | block_call call_op2 operation2 • opt_paren_args brace_block
  461           | block_call call_op2 operation2 • command_args do_block
  781 none: ε •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "&.", "::", "'}'", '{', '}', ')', ';', '\n']

    '('  shift, and go to state 238

    "end-of-input"        reduce using rule 781 (none)
    "`rescue'"            reduce using rule 781 (none)
    "`ensure'"            reduce using rule 781 (none)
    "`end'"               reduce using rule 781 (none)
    "`then'"              reduce using rule 781 (none)
    "`elsif'"             reduce using rule 781 (none)
    "`else'"              reduce using rule 781 (none)
    "`when'"              reduce using rule 781 (none)
    "`in'"                reduce using rule 781 (none)
    "`do'"                reduce using rule 781 (none)
    "`do' for condition"  reduce using rule 781 (none)
    "`and'"               reduce using rule 781 (none)
    "`or'"                reduce using rule 781 (none)
    "`if' modifier"       reduce using rule 781 (none)
    "`unless' modifier"   reduce using rule 781 (none)
    "`while' modifier"    reduce using rule 781 (none)
    "`until' modifier"    reduce using rule 781 (none)
    "`rescue' modifier"   reduce using rule 781 (none)
    "dummy end"           reduce using rule 781 (none)
    '.'                   reduce using rule 781 (none)
    "&."                  reduce using rule 781 (none)
    "::"                  reduce using rule 781 (none)
    "'}'"                 reduce using rule 781 (none)
    '{'                   reduce using rule 781 (none)
    '}'                   reduce using rule 781 (none)
    ')'                   reduce using rule 781 (none)
    ';'                   reduce using rule 781 (none)
    '\n'                  reduce using rule 781 (none)
    $default              reduce using rule 293 ($@14)

    paren_args      go to state 790
    opt_paren_args  go to state 829
    command_args    go to state 830
    $@14            go to state 237
    none            go to state 793


State 658

   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   40             | var_lhs "operator-assignment" lex_ctxt • command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   51 command_rhs: • command_call
   52            | • command_call "`rescue' modifier" stmt
   53            | • command_asgn
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  217    | var_lhs "operator-assignment" lex_ctxt • arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    command_asgn      go to state 768
    command_rhs       go to state 831
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 770
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 771
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 833
    primary           go to state 90
    primary_value     go to state 776
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 777
    operation         go to state 127


State 659

   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   50             | backref "operator-assignment" lex_ctxt • command_rhs
   51 command_rhs: • command_call
   52            | • command_call "`rescue' modifier" stmt
   53            | • command_asgn
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  224    | backref "operator-assignment" lex_ctxt • arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    command_asgn      go to state 768
    command_rhs       go to state 834
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 770
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 771
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 835
    primary           go to state 90
    primary_value     go to state 776
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 777
    operation         go to state 127


State 660

  135 fname: • "local variable or method"
  136      | • "constant"
  137      | • "method"
  138      | • op
  139      | • reswords
  140 fitem: • fname
  141      | • symbol
  144 undef_list: undef_list ',' $@12 • fitem
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  175 reswords: • "`__LINE__'"
  176         | • "`__FILE__'"
  177         | • "`__ENCODING__'"
  178         | • "`BEGIN'"
  179         | • "`END'"
  180         | • "`alias'"
  181         | • "`and'"
  182         | • "`begin'"
  183         | • "`break'"
  184         | • "`case'"
  185         | • "`class'"
  186         | • "`def'"
  187         | • "`defined?'"
  188         | • "`do'"
  189         | • "`else'"
  190         | • "`elsif'"
  191         | • "`end'"
  192         | • "`ensure'"
  193         | • "`false'"
  194         | • "`for'"
  195         | • "`in'"
  196         | • "`module'"
  197         | • "`next'"
  198         | • "`nil'"
  199         | • "`not'"
  200         | • "`or'"
  201         | • "`redo'"
  202         | • "`rescue'"
  203         | • "`retry'"
  204         | • "`return'"
  205         | • "`self'"
  206         | • "`super'"
  207         | • "`then'"
  208         | • "`true'"
  209         | • "`undef'"
  210         | • "`when'"
  211         | • "`yield'"
  212         | • "`if'"
  213         | • "`unless'"
  214         | • "`while'"
  215         | • "`until'"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"

    "`class'"                   shift, and go to state 129
    "`module'"                  shift, and go to state 130
    "`def'"                     shift, and go to state 131
    "`undef'"                   shift, and go to state 132
    "`begin'"                   shift, and go to state 133
    "`rescue'"                  shift, and go to state 134
    "`ensure'"                  shift, and go to state 135
    "`end'"                     shift, and go to state 136
    "`if'"                      shift, and go to state 137
    "`unless'"                  shift, and go to state 138
    "`then'"                    shift, and go to state 139
    "`elsif'"                   shift, and go to state 140
    "`else'"                    shift, and go to state 141
    "`case'"                    shift, and go to state 142
    "`when'"                    shift, and go to state 143
    "`while'"                   shift, and go to state 144
    "`until'"                   shift, and go to state 145
    "`for'"                     shift, and go to state 146
    "`break'"                   shift, and go to state 147
    "`next'"                    shift, and go to state 148
    "`redo'"                    shift, and go to state 149
    "`retry'"                   shift, and go to state 150
    "`in'"                      shift, and go to state 151
    "`do'"                      shift, and go to state 152
    "`return'"                  shift, and go to state 153
    "`yield'"                   shift, and go to state 154
    "`super'"                   shift, and go to state 155
    "`self'"                    shift, and go to state 156
    "`nil'"                     shift, and go to state 157
    "`true'"                    shift, and go to state 158
    "`false'"                   shift, and go to state 159
    "`and'"                     shift, and go to state 160
    "`or'"                      shift, and go to state 161
    "`not'"                     shift, and go to state 162
    "`alias'"                   shift, and go to state 163
    "`defined?'"                shift, and go to state 164
    "`BEGIN'"                   shift, and go to state 165
    "`END'"                     shift, and go to state 166
    "`__LINE__'"                shift, and go to state 167
    "`__FILE__'"                shift, and go to state 168
    "`__ENCODING__'"            shift, and go to state 169
    "local variable or method"  shift, and go to state 170
    "method"                    shift, and go to state 171
    "constant"                  shift, and go to state 172
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    "symbol literal"            shift, and go to state 59
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202

    fname     go to state 203
    fitem     go to state 836
    op        go to state 206
    reswords  go to state 207
    symbol    go to state 208
    ssym      go to state 117
    dsym      go to state 118


State 661

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  751 assoc: "string literal" string_contents tLABEL_END • arg_value
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 837
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 662

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  259    | defn_head f_opt_paren_args '=' • arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  260    | defn_head f_opt_paren_args '=' • arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 745
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 663

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  261    | defs_head f_opt_paren_args '=' • arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  262    | defs_head f_opt_paren_args '=' • arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 749
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 664

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  216    | lhs '=' lex_ctxt • arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 774
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 665

  748 assoc: arg_value "=>" arg_value •

    $default  reduce using rule 748 (assoc)


State 666

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  303 args: args ',' "*" • arg_value
  304     | args ',' "*" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "{ arg", "'}'", '}', ',', ')', ']', ';', '\n']
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 304 (args)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 838
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 667

  302 args: args ',' arg_value •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "{ arg", "'}'", '}', ',', ')', ']', ';', '\n']
  748 assoc: arg_value • "=>" arg_value

    "=>"  shift, and go to state 441

    $default  reduce using rule 302 (args)


State 668

  297 opt_block_arg: ',' block_arg •

    $default  reduce using rule 297 (opt_block_arg)


State 669

  291 call_args: args ',' assocs • opt_block_arg
  297 opt_block_arg: • ',' block_arg
  298              | • none
  747 assocs: assocs • ',' assoc
  781 none: ε •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "{ arg", "'}'", '}', ')', ']', ';', '\n']

    ','  shift, and go to state 450

    $default  reduce using rule 781 (none)

    opt_block_arg  go to state 839
    none           go to state 444


State 670

  125 lhs: primary_value "::" "local variable or method" •  ['=']
  221 arg: primary_value "::" "local variable or method" • "operator-assignment" lex_ctxt arg_rhs
  754 operation: "local variable or method" •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', '(']
  759 operation3: "local variable or method" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '{', '}', '[', ',', ')', ']', ';', '\n']

    "operator-assignment"  shift, and go to state 840

    "end-of-input"        reduce using rule 759 (operation3)
    "`rescue'"            reduce using rule 759 (operation3)
    "`ensure'"            reduce using rule 759 (operation3)
    "`end'"               reduce using rule 759 (operation3)
    "`then'"              reduce using rule 759 (operation3)
    "`elsif'"             reduce using rule 759 (operation3)
    "`else'"              reduce using rule 759 (operation3)
    "`when'"              reduce using rule 759 (operation3)
    "`in'"                reduce using rule 759 (operation3)
    "`do'"                reduce using rule 759 (operation3)
    "`do' for condition"  reduce using rule 759 (operation3)
    "`do' for block"      reduce using rule 759 (operation3)
    "`do' for lambda"     reduce using rule 759 (operation3)
    "`and'"               reduce using rule 759 (operation3)
    "`or'"                reduce using rule 759 (operation3)
    "`if' modifier"       reduce using rule 759 (operation3)
    "`unless' modifier"   reduce using rule 759 (operation3)
    "`while' modifier"    reduce using rule 759 (operation3)
    "`until' modifier"    reduce using rule 759 (operation3)
    "`rescue' modifier"   reduce using rule 759 (operation3)
    "dummy end"           reduce using rule 759 (operation3)
    '.'                   reduce using rule 759 (operation3)
    "**"                  reduce using rule 759 (operation3)
    "<=>"                 reduce using rule 759 (operation3)
    "=="                  reduce using rule 759 (operation3)
    "==="                 reduce using rule 759 (operation3)
    "!="                  reduce using rule 759 (operation3)
    ">="                  reduce using rule 759 (operation3)
    "<="                  reduce using rule 759 (operation3)
    "&&"                  reduce using rule 759 (operation3)
    "||"                  reduce using rule 759 (operation3)
    "=~"                  reduce using rule 759 (operation3)
    "!~"                  reduce using rule 759 (operation3)
    ".."                  reduce using rule 759 (operation3)
    "..."                 reduce using rule 759 (operation3)
    "<<"                  reduce using rule 759 (operation3)
    ">>"                  reduce using rule 759 (operation3)
    "&."                  reduce using rule 759 (operation3)
    "::"                  reduce using rule 759 (operation3)
    "=>"                  reduce using rule 759 (operation3)
    "{ arg"               reduce using rule 759 (operation3)
    "'}'"                 reduce using rule 759 (operation3)
    tLAMBEG               reduce using rule 759 (operation3)
    '='                   reduce using rule 125 (lhs)
    '?'                   reduce using rule 759 (operation3)
    ':'                   reduce using rule 759 (operation3)
    '>'                   reduce using rule 759 (operation3)
    '<'                   reduce using rule 759 (operation3)
    '|'                   reduce using rule 759 (operation3)
    '^'                   reduce using rule 759 (operation3)
    '&'                   reduce using rule 759 (operation3)
    '+'                   reduce using rule 759 (operation3)
    '-'                   reduce using rule 759 (operation3)
    '*'                   reduce using rule 759 (operation3)
    '/'                   reduce using rule 759 (operation3)
    '%'                   reduce using rule 759 (operation3)
    '{'                   reduce using rule 759 (operation3)
    '}'                   reduce using rule 759 (operation3)
    '['                   reduce using rule 759 (operation3)
    ','                   reduce using rule 759 (operation3)
    ')'                   reduce using rule 759 (operation3)
    ']'                   reduce using rule 759 (operation3)
    ';'                   reduce using rule 759 (operation3)
    '\n'                  reduce using rule 759 (operation3)
    $default              reduce using rule 754 (operation)


State 671

  127 lhs: primary_value "::" "constant" •  ['=']
  222 arg: primary_value "::" "constant" • "operator-assignment" lex_ctxt arg_rhs
  328 primary: primary_value "::" "constant" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ']', ';', '\n']
  755 operation: "constant" •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', '(']

    "operator-assignment"  shift, and go to state 841

    "end-of-input"        reduce using rule 328 (primary)
    "`rescue'"            reduce using rule 328 (primary)
    "`ensure'"            reduce using rule 328 (primary)
    "`end'"               reduce using rule 328 (primary)
    "`then'"              reduce using rule 328 (primary)
    "`elsif'"             reduce using rule 328 (primary)
    "`else'"              reduce using rule 328 (primary)
    "`when'"              reduce using rule 328 (primary)
    "`in'"                reduce using rule 328 (primary)
    "`do' for condition"  reduce using rule 328 (primary)
    "`do' for block"      reduce using rule 328 (primary)
    "`do' for lambda"     reduce using rule 328 (primary)
    "`and'"               reduce using rule 328 (primary)
    "`or'"                reduce using rule 328 (primary)
    "`if' modifier"       reduce using rule 328 (primary)
    "`unless' modifier"   reduce using rule 328 (primary)
    "`while' modifier"    reduce using rule 328 (primary)
    "`until' modifier"    reduce using rule 328 (primary)
    "`rescue' modifier"   reduce using rule 328 (primary)
    "dummy end"           reduce using rule 328 (primary)
    '.'                   reduce using rule 328 (primary)
    "**"                  reduce using rule 328 (primary)
    "<=>"                 reduce using rule 328 (primary)
    "=="                  reduce using rule 328 (primary)
    "==="                 reduce using rule 328 (primary)
    "!="                  reduce using rule 328 (primary)
    ">="                  reduce using rule 328 (primary)
    "<="                  reduce using rule 328 (primary)
    "&&"                  reduce using rule 328 (primary)
    "||"                  reduce using rule 328 (primary)
    "=~"                  reduce using rule 328 (primary)
    "!~"                  reduce using rule 328 (primary)
    ".."                  reduce using rule 328 (primary)
    "..."                 reduce using rule 328 (primary)
    "<<"                  reduce using rule 328 (primary)
    ">>"                  reduce using rule 328 (primary)
    "&."                  reduce using rule 328 (primary)
    "::"                  reduce using rule 328 (primary)
    "=>"                  reduce using rule 328 (primary)
    "{ arg"               reduce using rule 328 (primary)
    "'}'"                 reduce using rule 328 (primary)
    tLAMBEG               reduce using rule 328 (primary)
    '='                   reduce using rule 127 (lhs)
    '?'                   reduce using rule 328 (primary)
    ':'                   reduce using rule 328 (primary)
    '>'                   reduce using rule 328 (primary)
    '<'                   reduce using rule 328 (primary)
    '|'                   reduce using rule 328 (primary)
    '^'                   reduce using rule 328 (primary)
    '&'                   reduce using rule 328 (primary)
    '+'                   reduce using rule 328 (primary)
    '-'                   reduce using rule 328 (primary)
    '*'                   reduce using rule 328 (primary)
    '/'                   reduce using rule 328 (primary)
    '%'                   reduce using rule 328 (primary)
    '}'                   reduce using rule 328 (primary)
    '['                   reduce using rule 328 (primary)
    ','                   reduce using rule 328 (primary)
    ')'                   reduce using rule 328 (primary)
    ']'                   reduce using rule 328 (primary)
    ';'                   reduce using rule 328 (primary)
    '\n'                  reduce using rule 328 (primary)
    $default              reduce using rule 755 (operation)


State 672

  123 lhs: primary_value '[' opt_call_args • rbracket
  218 arg: primary_value '[' opt_call_args • rbracket "operator-assignment" lex_ctxt arg_rhs
  470 method_call: primary_value '[' opt_call_args • rbracket
  770 opt_nl: ε •  [']']
  771       | • '\n'
  773 rbracket: • opt_nl ']'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl    go to state 785
    rbracket  go to state 842


State 673

  124 lhs: primary_value call_op "local variable or method" •  ['=']
  219 arg: primary_value call_op "local variable or method" • "operator-assignment" lex_ctxt arg_rhs
  754 operation: "local variable or method" •  ["end-of-input", "`class'", "`module'", "`def'", "`begin'", "`rescue'", "`ensure'", "`end'", "`if'", "`unless'", "`then'", "`elsif'", "`else'", "`case'", "`when'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`in'", "`do'", "`do' for condition", "`do' for block", "`do' for lambda", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`and'", "`or'", "`not'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "dummy end", '.', "unary+", "unary-", "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "(..", "(...", "<<", ">>", "&.", "::", ":: at EXPR_BEG", "=>", "(", "( arg", "[", "{", "{ arg", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', tUMINUS_NUM, '!', '~', '{', '}', '[', ',', '(', ')', ']', ';', '\n']

    "operator-assignment"  shift, and go to state 843

    '='       reduce using rule 124 (lhs)
    $default  reduce using rule 754 (operation)


State 674

  126 lhs: primary_value call_op "constant" •  ['=']
  220 arg: primary_value call_op "constant" • "operator-assignment" lex_ctxt arg_rhs
  755 operation: "constant" •  ["end-of-input", "`class'", "`module'", "`def'", "`begin'", "`rescue'", "`ensure'", "`end'", "`if'", "`unless'", "`then'", "`elsif'", "`else'", "`case'", "`when'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`in'", "`do'", "`do' for condition", "`do' for block", "`do' for lambda", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`and'", "`or'", "`not'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "dummy end", '.', "unary+", "unary-", "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "(..", "(...", "<<", ">>", "&.", "::", ":: at EXPR_BEG", "=>", "(", "( arg", "[", "{", "{ arg", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', tUMINUS_NUM, '!', '~', '{', '}', '[', ',', '(', ')', ']', ';', '\n']

    "operator-assignment"  shift, and go to state 844

    '='       reduce using rule 126 (lhs)
    $default  reduce using rule 755 (operation)


State 675

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  217    | var_lhs "operator-assignment" lex_ctxt • arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 833
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 676

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  224    | backref "operator-assignment" lex_ctxt • arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 835
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 677

  747 assocs: assocs ',' assoc •

    $default  reduce using rule 747 (assocs)


State 678

  333 primary: "`yield'" '(' call_args rparen •

    $default  reduce using rule 333 (primary)


State 679

  772 rparen: opt_nl ')' •

    $default  reduce using rule 772 (rparen)


State 680

  278 paren_args: '(' opt_call_args rparen •

    $default  reduce using rule 278 (paren_args)


State 681

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  279 paren_args: '(' args ',' • args_forward rparen
  285 opt_call_args: args ',' •  [')', '\n']
  286              | args ',' • assocs ','
  291 call_args: args ',' • assocs opt_block_arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  297 opt_block_arg: ',' • block_arg
  302 args: args ',' • arg_value
  303     | args ',' • "*" arg_value
  304     | args ',' • "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  699 args_forward: • "(..."
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 456
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 666
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 285 (opt_call_args)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 667
    block_arg         go to state 668
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    args_forward      go to state 845
    assocs            go to state 846
    assoc             go to state 233
    operation         go to state 127


State 682

  280 paren_args: '(' args_forward rparen •

    $default  reduce using rule 280 (paren_args)


State 683

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  287 opt_call_args: assocs ',' •  [')', ']', '\n']
  295 block_arg: • "&" arg_value
  296          | • "&"
  297 opt_block_arg: ',' • block_arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  747 assocs: assocs ',' • assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 287 (opt_call_args)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 277
    block_arg         go to state 668
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assoc             go to state 677
    operation         go to state 127


State 684

  338 primary: "`not'" '(' expr rparen •

    $default  reduce using rule 338 (primary)


State 685

   21 stmt: "`alias'" fitem $@4 fitem •

    $default  reduce using rule 21 (stmt)


State 686

   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  337        | "`defined?'" opt_nl '(' $@18 • expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 847
    defn_head         go to state 218
    defs_head         go to state 219
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 687

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  257    | "`defined?'" opt_nl $@13 arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "{ arg", "'}'", tLAMBEG, ':', '}', ',', ')', ']', ';', '\n']
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"   shift, and go to state 345
    "<=>"  shift, and go to state 346
    "=="   shift, and go to state 347
    "==="  shift, and go to state 348
    "!="   shift, and go to state 349
    ">="   shift, and go to state 350
    "<="   shift, and go to state 351
    "&&"   shift, and go to state 352
    "||"   shift, and go to state 353
    "=~"   shift, and go to state 354
    "!~"   shift, and go to state 355
    ".."   shift, and go to state 356
    "..."  shift, and go to state 357
    "<<"   shift, and go to state 358
    ">>"   shift, and go to state 359
    '?'    shift, and go to state 361
    '>'    shift, and go to state 362
    '<'    shift, and go to state 363
    '|'    shift, and go to state 364
    '^'    shift, and go to state 365
    '&'    shift, and go to state 366
    '+'    shift, and go to state 367
    '-'    shift, and go to state 368
    '*'    shift, and go to state 369
    '/'    shift, and go to state 370
    '%'    shift, and go to state 371

    $default  reduce using rule 257 (arg)

    relop  go to state 372

    Conflict between rule 257 and token "**" resolved as shift ("`defined?'" < "**").
    Conflict between rule 257 and token "<=>" resolved as shift ("`defined?'" < "<=>").
    Conflict between rule 257 and token "==" resolved as shift ("`defined?'" < "==").
    Conflict between rule 257 and token "===" resolved as shift ("`defined?'" < "===").
    Conflict between rule 257 and token "!=" resolved as shift ("`defined?'" < "!=").
    Conflict between rule 257 and token ">=" resolved as shift ("`defined?'" < ">=").
    Conflict between rule 257 and token "<=" resolved as shift ("`defined?'" < "<=").
    Conflict between rule 257 and token "&&" resolved as shift ("`defined?'" < "&&").
    Conflict between rule 257 and token "||" resolved as shift ("`defined?'" < "||").
    Conflict between rule 257 and token "=~" resolved as shift ("`defined?'" < "=~").
    Conflict between rule 257 and token "!~" resolved as shift ("`defined?'" < "!~").
    Conflict between rule 257 and token ".." resolved as shift ("`defined?'" < "..").
    Conflict between rule 257 and token "..." resolved as shift ("`defined?'" < "...").
    Conflict between rule 257 and token "<<" resolved as shift ("`defined?'" < "<<").
    Conflict between rule 257 and token ">>" resolved as shift ("`defined?'" < ">>").
    Conflict between rule 257 and token '?' resolved as shift ("`defined?'" < '?').
    Conflict between rule 257 and token '>' resolved as shift ("`defined?'" < '>').
    Conflict between rule 257 and token '<' resolved as shift ("`defined?'" < '<').
    Conflict between rule 257 and token '|' resolved as shift ("`defined?'" < '|').
    Conflict between rule 257 and token '^' resolved as shift ("`defined?'" < '^').
    Conflict between rule 257 and token '&' resolved as shift ("`defined?'" < '&').
    Conflict between rule 257 and token '+' resolved as shift ("`defined?'" < '+').
    Conflict between rule 257 and token '-' resolved as shift ("`defined?'" < '-').
    Conflict between rule 257 and token '*' resolved as shift ("`defined?'" < '*').
    Conflict between rule 257 and token '/' resolved as shift ("`defined?'" < '/').
    Conflict between rule 257 and token '%' resolved as shift ("`defined?'" < '%').


State 688

    9 begin_block: '{' top_compstmt '}' •

    $default  reduce using rule 9 (begin_block)


State 689

   31 stmt: "`END'" '{' compstmt '}' •

    $default  reduce using rule 31 (stmt)


State 690

  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  464 method_call: primary_value "::" operation2 • paren_args

    '('  shift, and go to state 238

    paren_args  go to state 783


State 691

  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  281 opt_paren_args: • none
  282               | • paren_args
  463 method_call: primary_value call_op operation2 • opt_paren_args
  781 none: ε •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '{', '}', '[', ',', ')', ']', ';', '\n']

    '('  shift, and go to state 238

    $default  reduce using rule 781 (none)

    paren_args      go to state 790
    opt_paren_args  go to state 791
    none            go to state 793


State 692

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt • arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 848
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 693

   19 stmt_or_begin: "`BEGIN'" $@3 begin_block •

    $default  reduce using rule 19 (stmt_or_begin)


State 694

   93 mlhs: "(" mlhs_inner rparen •  ['=']
   95 mlhs_inner: "(" mlhs_inner rparen •  [')', '\n']
  107 mlhs_item: "(" mlhs_inner rparen •  [',']

    '='       reduce using rule 93 (mlhs)
    ','       reduce using rule 107 (mlhs_item)
    $default  reduce using rule 95 (mlhs_inner)


State 695

   16 stmts: stmts terms stmt_or_begin •

    $default  reduce using rule 16 (stmts)


State 696

  326 primary: "( arg" stmt $@17 rparen •

    $default  reduce using rule 326 (primary)


State 697

  274 aref_args: args ',' assocs • trailer
  747 assocs: assocs • ',' assoc
  770 opt_nl: ε •  [']']
  771       | • '\n'
  775 trailer: • opt_nl
  776        | • ','

    ','   shift, and go to state 489
    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl   go to state 487
    trailer  go to state 849


State 698

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  111 mlhs_post: mlhs_post ',' • mlhs_item
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 281
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    ":: at EXPR_BEG"            shift, and go to state 282
    "("                         shift, and go to state 340
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 283

    defn_head         go to state 285
    defs_head         go to state 286
    fcall             go to state 254
    mlhs_item         go to state 850
    mlhs_node         go to state 86
    primary           go to state 288
    primary_value     go to state 289
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 290
    keyword_variable  go to state 291
    var_ref           go to state 124
    backref           go to state 292
    operation         go to state 127


State 699

  103 mlhs_basic: "*" mlhs_node ',' mlhs_post •  ["`in'", '=', ')', '\n']
  111 mlhs_post: mlhs_post • ',' mlhs_item

    ','  shift, and go to state 698

    $default  reduce using rule 103 (mlhs_basic)


State 700

  116 mlhs_node: primary_value "::" "local variable or method" •  ["`in'", '=', ',', ')', '\n']
  754 operation: "local variable or method" •  ['(']
  759 operation3: "local variable or method" •  ["`do'", '.', "&.", "::", '{', '[']

    "`in'"    reduce using rule 116 (mlhs_node)
    '='       reduce using rule 116 (mlhs_node)
    ','       reduce using rule 116 (mlhs_node)
    '('       reduce using rule 754 (operation)
    ')'       reduce using rule 116 (mlhs_node)
    '\n'      reduce using rule 116 (mlhs_node)
    $default  reduce using rule 759 (operation3)


State 701

  118 mlhs_node: primary_value "::" "constant" •  ["`in'", '=', ',', ')', '\n']
  328 primary: primary_value "::" "constant" •  ['.', "&.", "::", '[']
  755 operation: "constant" •  ['(']

    '.'       reduce using rule 328 (primary)
    "&."      reduce using rule 328 (primary)
    "::"      reduce using rule 328 (primary)
    '['       reduce using rule 328 (primary)
    '('       reduce using rule 755 (operation)
    $default  reduce using rule 118 (mlhs_node)


State 702

  114 mlhs_node: primary_value '[' opt_call_args • rbracket
  470 method_call: primary_value '[' opt_call_args • rbracket
  770 opt_nl: ε •  [']']
  771       | • '\n'
  773 rbracket: • opt_nl ']'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl    go to state 785
    rbracket  go to state 851


State 703

  115 mlhs_node: primary_value call_op "local variable or method" •  ["`in'", '=', ',', ')', '\n']
  754 operation: "local variable or method" •  ["`do'", '.', "&.", "::", '{', '[', '(']

    "`in'"    reduce using rule 115 (mlhs_node)
    '='       reduce using rule 115 (mlhs_node)
    ','       reduce using rule 115 (mlhs_node)
    ')'       reduce using rule 115 (mlhs_node)
    '\n'      reduce using rule 115 (mlhs_node)
    $default  reduce using rule 754 (operation)


State 704

  117 mlhs_node: primary_value call_op "constant" •  ["`in'", '=', ',', ')', '\n']
  755 operation: "constant" •  ["`do'", '.', "&.", "::", '{', '[', '(']

    "`in'"    reduce using rule 117 (mlhs_node)
    '='       reduce using rule 117 (mlhs_node)
    ','       reduce using rule 117 (mlhs_node)
    ')'       reduce using rule 117 (mlhs_node)
    '\n'      reduce using rule 117 (mlhs_node)
    $default  reduce using rule 755 (operation)


State 705

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  451 lambda: "->" @27 @28 @29 • f_larglist $@30 lambda_body
  452 f_larglist: • '(' f_args opt_bv_decl ')'
  453           | • f_args
  556 p_kwnorest: • kwrest_mark "`nil'"
  677 args_tail: • f_kwarg ',' f_kwrest opt_f_block_arg
  678          | • f_kwarg opt_f_block_arg
  679          | • f_any_kwrest opt_f_block_arg
  680          | • f_block_arg
  681          | • args_forward
  684 f_args: • f_arg ',' f_optarg ',' f_rest_arg opt_args_tail
  685       | • f_arg ',' f_optarg ',' f_rest_arg ',' f_arg opt_args_tail
  686       | • f_arg ',' f_optarg opt_args_tail
  687       | • f_arg ',' f_optarg ',' f_arg opt_args_tail
  688       | • f_arg ',' f_rest_arg opt_args_tail
  689       | • f_arg ',' f_rest_arg ',' f_arg opt_args_tail
  690       | • f_arg opt_args_tail
  691       | • f_optarg ',' f_rest_arg opt_args_tail
  692       | • f_optarg ',' f_rest_arg ',' f_arg opt_args_tail
  693       | • f_optarg opt_args_tail
  694       | • f_optarg ',' f_arg opt_args_tail
  695       | • f_rest_arg opt_args_tail
  696       | • f_rest_arg ',' f_arg opt_args_tail
  697       | • args_tail
  698       | ε •  ["`do' for lambda", tLAMBEG]
  699 args_forward: • "(..."
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  712 f_kw: • f_label arg_value
  713     | • f_label
  718 f_kwarg: • f_kw
  719        | • f_kwarg ',' f_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  725 f_opt: • f_arg_asgn f_eq arg_value
  729 f_optarg: • f_opt
  730         | • f_optarg ',' f_opt
  731 restarg_mark: • '*'
  732             | • "*"
  733 f_rest_arg: • restarg_mark "local variable or method"
  734           | • restarg_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "(..."                      shift, and go to state 535
    "("                         shift, and go to state 536
    "*"                         shift, and go to state 537
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540
    '*'                         shift, and go to state 541
    '('                         shift, and go to state 852

    $default  reduce using rule 698 (f_args)

    f_any_kwrest  go to state 542
    f_larglist    go to state 853
    p_kwnorest    go to state 543
    args_tail     go to state 544
    f_args        go to state 854
    args_forward  go to state 546
    f_bad_arg     go to state 547
    f_norm_arg    go to state 548
    f_arg_asgn    go to state 549
    f_arg_item    go to state 550
    f_arg         go to state 551
    f_label       go to state 552
    f_kw          go to state 553
    f_kwarg       go to state 554
    kwrest_mark   go to state 555
    f_no_kwarg    go to state 556
    f_kwrest      go to state 557
    f_opt         go to state 558
    f_optarg      go to state 559
    restarg_mark  go to state 560
    f_rest_arg    go to state 561
    blkarg_mark   go to state 562
    f_block_arg   go to state 563


State 706

  628 @45: ε •
  632 string_content: tSTRING_DBEG $@44 • @45 @46 @47 @48 compstmt "'}'"

    $default  reduce using rule 628 (@45)

    @45  go to state 855


State 707

  626 string_content: tSTRING_DVAR @43 • string_dvar
  633 string_dvar: • "global variable"
  634            | • "instance variable"
  635            | • "class variable"
  636            | • backref
  666 backref: • "numbered reference"
  667        | • "back reference"

    "global variable"     shift, and go to state 856
    "instance variable"   shift, and go to state 857
    "class variable"      shift, and go to state 858
    "numbered reference"  shift, and go to state 46
    "back reference"      shift, and go to state 47

    string_dvar  go to state 859
    backref      go to state 860


State 708

  604 words: "word list" ' ' word_list "terminator" •

    $default  reduce using rule 604 (words)


State 709

  606 word_list: word_list word • ' '
  608 word: word • string_content
  624 string_content: • "literal content"
  626               | • tSTRING_DVAR @43 string_dvar
  632               | • tSTRING_DBEG $@44 @45 @46 @47 @48 compstmt "'}'"

    "literal content"  shift, and go to state 504
    tSTRING_DBEG       shift, and go to state 506
    tSTRING_DVAR       shift, and go to state 507
    ' '                shift, and go to state 861

    string_content  go to state 862


State 710

  607 word: string_content •

    $default  reduce using rule 607 (word)


State 711

  615 qword_list: qword_list "literal content" • ' '

    ' '  shift, and go to state 863


State 712

  612 qwords: "verbatim word list" ' ' qword_list "terminator" •

    $default  reduce using rule 612 (qwords)


State 713

  609 symbols: "symbol list" ' ' symbol_list "terminator" •

    $default  reduce using rule 609 (symbols)


State 714

  608 word: word • string_content
  611 symbol_list: symbol_list word • ' '
  624 string_content: • "literal content"
  626               | • tSTRING_DVAR @43 string_dvar
  632               | • tSTRING_DBEG $@44 @45 @46 @47 @48 compstmt "'}'"

    "literal content"  shift, and go to state 504
    tSTRING_DBEG       shift, and go to state 506
    tSTRING_DVAR       shift, and go to state 507
    ' '                shift, and go to state 864

    string_content  go to state 862


State 715

  617 qsym_list: qsym_list "literal content" • ' '

    ' '  shift, and go to state 865


State 716

  613 qsymbols: "verbatim symbol list" ' ' qsym_list "terminator" •

    $default  reduce using rule 613 (qsymbols)


State 717

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  237    | tUMINUS_NUM simple_numeric "**" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', ',', ')', ']', ';', '\n']
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"  shift, and go to state 345

    $default  reduce using rule 237 (arg)

    relop  go to state 372

    Conflict between rule 237 and token "**" resolved as shift (%right "**").
    Conflict between rule 237 and token "<=>" resolved as reduce ("<=>" < "**").
    Conflict between rule 237 and token "==" resolved as reduce ("==" < "**").
    Conflict between rule 237 and token "===" resolved as reduce ("===" < "**").
    Conflict between rule 237 and token "!=" resolved as reduce ("!=" < "**").
    Conflict between rule 237 and token ">=" resolved as reduce (">=" < "**").
    Conflict between rule 237 and token "<=" resolved as reduce ("<=" < "**").
    Conflict between rule 237 and token "&&" resolved as reduce ("&&" < "**").
    Conflict between rule 237 and token "||" resolved as reduce ("||" < "**").
    Conflict between rule 237 and token "=~" resolved as reduce ("=~" < "**").
    Conflict between rule 237 and token "!~" resolved as reduce ("!~" < "**").
    Conflict between rule 237 and token ".." resolved as reduce (".." < "**").
    Conflict between rule 237 and token "..." resolved as reduce ("..." < "**").
    Conflict between rule 237 and token "<<" resolved as reduce ("<<" < "**").
    Conflict between rule 237 and token ">>" resolved as reduce (">>" < "**").
    Conflict between rule 237 and token '?' resolved as reduce ('?' < "**").
    Conflict between rule 237 and token '>' resolved as reduce ('>' < "**").
    Conflict between rule 237 and token '<' resolved as reduce ('<' < "**").
    Conflict between rule 237 and token '|' resolved as reduce ('|' < "**").
    Conflict between rule 237 and token '^' resolved as reduce ('^' < "**").
    Conflict between rule 237 and token '&' resolved as reduce ('&' < "**").
    Conflict between rule 237 and token '+' resolved as reduce ('+' < "**").
    Conflict between rule 237 and token '-' resolved as reduce ('-' < "**").
    Conflict between rule 237 and token '*' resolved as reduce ('*' < "**").
    Conflict between rule 237 and token '/' resolved as reduce ('/' < "**").
    Conflict between rule 237 and token '%' resolved as reduce ('%' < "**").


State 718

  400 f_marg: • f_norm_arg
  401       | • "(" f_margs rparen
  401       | "(" • f_margs rparen
  402 f_marg_list: • f_marg
  403            | • f_marg_list ',' f_marg
  404 f_margs: • f_marg_list
  405        | • f_marg_list ',' f_rest_marg
  406        | • f_marg_list ',' f_rest_marg ',' f_marg_list
  407        | • f_rest_marg
  408        | • f_rest_marg ',' f_marg_list
  409 f_rest_marg: • "*" f_norm_arg
  410            | • "*"
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "("                         shift, and go to state 718
    "*"                         shift, and go to state 719

    f_marg       go to state 720
    f_marg_list  go to state 721
    f_margs      go to state 866
    f_rest_marg  go to state 723
    f_bad_arg    go to state 547
    f_norm_arg   go to state 724


State 719

  409 f_rest_marg: "*" • f_norm_arg
  410            | "*" •  [',', ')', '\n']
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532

    $default  reduce using rule 410 (f_rest_marg)

    f_bad_arg   go to state 547
    f_norm_arg  go to state 867


State 720

  402 f_marg_list: f_marg •

    $default  reduce using rule 402 (f_marg_list)


State 721

  403 f_marg_list: f_marg_list • ',' f_marg
  404 f_margs: f_marg_list •  [')', '\n']
  405        | f_marg_list • ',' f_rest_marg
  406        | f_marg_list • ',' f_rest_marg ',' f_marg_list

    ','  shift, and go to state 868

    $default  reduce using rule 404 (f_margs)


State 722

  708 f_arg_item: "(" f_margs • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 869


State 723

  407 f_margs: f_rest_marg •  [')', '\n']
  408        | f_rest_marg • ',' f_marg_list

    ','  shift, and go to state 870

    $default  reduce using rule 407 (f_margs)


State 724

  400 f_marg: f_norm_arg •

    $default  reduce using rule 400 (f_marg)


State 725

  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark
  739 opt_f_block_arg: ',' • f_block_arg

    "&"  shift, and go to state 539
    '&'  shift, and go to state 540

    blkarg_mark  go to state 562
    f_block_arg  go to state 871


State 726

  679 args_tail: f_any_kwrest opt_f_block_arg •

    $default  reduce using rule 679 (args_tail)


State 727

  740 opt_f_block_arg: none •

    $default  reduce using rule 740 (opt_f_block_arg)


State 728

  673 f_paren_args: '(' f_args rparen •

    $default  reduce using rule 673 (f_paren_args)


State 729

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  725 f_opt: f_arg_asgn f_eq • arg_value
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 872
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 730

  414 f_eq: $@26 • '='

    '='  shift, and go to state 873


State 731

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  556 p_kwnorest: • kwrest_mark "`nil'"
  677 args_tail: • f_kwarg ',' f_kwrest opt_f_block_arg
  678          | • f_kwarg opt_f_block_arg
  679          | • f_any_kwrest opt_f_block_arg
  680          | • f_block_arg
  681          | • args_forward
  682 opt_args_tail: ',' • args_tail
  684 f_args: f_arg ',' • f_optarg ',' f_rest_arg opt_args_tail
  685       | f_arg ',' • f_optarg ',' f_rest_arg ',' f_arg opt_args_tail
  686       | f_arg ',' • f_optarg opt_args_tail
  687       | f_arg ',' • f_optarg ',' f_arg opt_args_tail
  688       | f_arg ',' • f_rest_arg opt_args_tail
  689       | f_arg ',' • f_rest_arg ',' f_arg opt_args_tail
  699 args_forward: • "(..."
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  710 f_arg: f_arg ',' • f_arg_item
  711 f_label: • "label"
  712 f_kw: • f_label arg_value
  713     | • f_label
  718 f_kwarg: • f_kw
  719        | • f_kwarg ',' f_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  725 f_opt: • f_arg_asgn f_eq arg_value
  729 f_optarg: • f_opt
  730         | • f_optarg ',' f_opt
  731 restarg_mark: • '*'
  732             | • "*"
  733 f_rest_arg: • restarg_mark "local variable or method"
  734           | • restarg_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "(..."                      shift, and go to state 535
    "("                         shift, and go to state 536
    "*"                         shift, and go to state 537
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540
    '*'                         shift, and go to state 541

    f_any_kwrest  go to state 542
    p_kwnorest    go to state 543
    args_tail     go to state 874
    args_forward  go to state 546
    f_bad_arg     go to state 547
    f_norm_arg    go to state 548
    f_arg_asgn    go to state 549
    f_arg_item    go to state 875
    f_label       go to state 552
    f_kw          go to state 553
    f_kwarg       go to state 554
    kwrest_mark   go to state 555
    f_no_kwarg    go to state 556
    f_kwrest      go to state 557
    f_opt         go to state 558
    f_optarg      go to state 876
    restarg_mark  go to state 560
    f_rest_arg    go to state 877
    blkarg_mark   go to state 562
    f_block_arg   go to state 563


State 732

  690 f_args: f_arg opt_args_tail •

    $default  reduce using rule 690 (f_args)


State 733

  712 f_kw: f_label arg_value •

    $default  reduce using rule 712 (f_kw)


State 734

  677 args_tail: f_kwarg ',' • f_kwrest opt_f_block_arg
  711 f_label: • "label"
  712 f_kw: • f_label arg_value
  713     | • f_label
  719 f_kwarg: f_kwarg ',' • f_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark
  739 opt_f_block_arg: ',' • f_block_arg

    "label"  shift, and go to state 533
    "**"     shift, and go to state 534
    "**arg"  shift, and go to state 538
    "&"      shift, and go to state 539
    '&'      shift, and go to state 540

    f_label      go to state 552
    f_kw         go to state 878
    kwrest_mark  go to state 879
    f_kwrest     go to state 880
    blkarg_mark  go to state 562
    f_block_arg  go to state 871


State 735

  678 args_tail: f_kwarg opt_f_block_arg •

    $default  reduce using rule 678 (args_tail)


State 736

  556 p_kwnorest: kwrest_mark "`nil'" •

    $default  reduce using rule 556 (p_kwnorest)


State 737

  723 f_kwrest: kwrest_mark "local variable or method" •

    $default  reduce using rule 723 (f_kwrest)


State 738

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  556 p_kwnorest: • kwrest_mark "`nil'"
  677 args_tail: • f_kwarg ',' f_kwrest opt_f_block_arg
  678          | • f_kwarg opt_f_block_arg
  679          | • f_any_kwrest opt_f_block_arg
  680          | • f_block_arg
  681          | • args_forward
  682 opt_args_tail: ',' • args_tail
  691 f_args: f_optarg ',' • f_rest_arg opt_args_tail
  692       | f_optarg ',' • f_rest_arg ',' f_arg opt_args_tail
  694       | f_optarg ',' • f_arg opt_args_tail
  699 args_forward: • "(..."
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  712 f_kw: • f_label arg_value
  713     | • f_label
  718 f_kwarg: • f_kw
  719        | • f_kwarg ',' f_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  725 f_opt: • f_arg_asgn f_eq arg_value
  730 f_optarg: f_optarg ',' • f_opt
  731 restarg_mark: • '*'
  732             | • "*"
  733 f_rest_arg: • restarg_mark "local variable or method"
  734           | • restarg_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "(..."                      shift, and go to state 535
    "("                         shift, and go to state 536
    "*"                         shift, and go to state 537
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540
    '*'                         shift, and go to state 541

    f_any_kwrest  go to state 542
    p_kwnorest    go to state 543
    args_tail     go to state 874
    args_forward  go to state 546
    f_bad_arg     go to state 547
    f_norm_arg    go to state 548
    f_arg_asgn    go to state 549
    f_arg_item    go to state 550
    f_arg         go to state 881
    f_label       go to state 552
    f_kw          go to state 553
    f_kwarg       go to state 554
    kwrest_mark   go to state 555
    f_no_kwarg    go to state 556
    f_kwrest      go to state 557
    f_opt         go to state 882
    restarg_mark  go to state 560
    f_rest_arg    go to state 883
    blkarg_mark   go to state 562
    f_block_arg   go to state 563


State 739

  693 f_args: f_optarg opt_args_tail •

    $default  reduce using rule 693 (f_args)


State 740

  733 f_rest_arg: restarg_mark "local variable or method" •

    $default  reduce using rule 733 (f_rest_arg)


State 741

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  556 p_kwnorest: • kwrest_mark "`nil'"
  677 args_tail: • f_kwarg ',' f_kwrest opt_f_block_arg
  678          | • f_kwarg opt_f_block_arg
  679          | • f_any_kwrest opt_f_block_arg
  680          | • f_block_arg
  681          | • args_forward
  682 opt_args_tail: ',' • args_tail
  696 f_args: f_rest_arg ',' • f_arg opt_args_tail
  699 args_forward: • "(..."
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  712 f_kw: • f_label arg_value
  713     | • f_label
  718 f_kwarg: • f_kw
  719        | • f_kwarg ',' f_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "(..."                      shift, and go to state 535
    "("                         shift, and go to state 536
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540

    f_any_kwrest  go to state 542
    p_kwnorest    go to state 543
    args_tail     go to state 874
    args_forward  go to state 546
    f_bad_arg     go to state 547
    f_norm_arg    go to state 548
    f_arg_asgn    go to state 884
    f_arg_item    go to state 550
    f_arg         go to state 885
    f_label       go to state 552
    f_kw          go to state 553
    f_kwarg       go to state 554
    kwrest_mark   go to state 555
    f_no_kwarg    go to state 556
    f_kwrest      go to state 557
    blkarg_mark   go to state 562
    f_block_arg   go to state 563


State 742

  695 f_args: f_rest_arg opt_args_tail •

    $default  reduce using rule 695 (f_args)


State 743

  737 f_block_arg: blkarg_mark "local variable or method" •

    $default  reduce using rule 737 (f_block_arg)


State 744

   46 command_asgn: defn_head f_opt_paren_args '=' command •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
   47             | defn_head f_opt_paren_args '=' command • "`rescue' modifier" arg

    "`rescue' modifier"  shift, and go to state 886

    $default  reduce using rule 46 (command_asgn)

    Conflict between rule 46 and token "`rescue' modifier" resolved as shift ('=' < "`rescue' modifier").


State 745

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  259    | defn_head f_opt_paren_args '=' arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "dummy end", "=>", "{ arg", "'}'", tLAMBEG, ':', '}', ',', ')', ']', ';', '\n']
  260    | defn_head f_opt_paren_args '=' arg • "`rescue' modifier" arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "`rescue' modifier"  shift, and go to state 887
    "**"                 shift, and go to state 345
    "<=>"                shift, and go to state 346
    "=="                 shift, and go to state 347
    "==="                shift, and go to state 348
    "!="                 shift, and go to state 349
    ">="                 shift, and go to state 350
    "<="                 shift, and go to state 351
    "&&"                 shift, and go to state 352
    "||"                 shift, and go to state 353
    "=~"                 shift, and go to state 354
    "!~"                 shift, and go to state 355
    ".."                 shift, and go to state 356
    "..."                shift, and go to state 357
    "<<"                 shift, and go to state 358
    ">>"                 shift, and go to state 359
    '?'                  shift, and go to state 361
    '>'                  shift, and go to state 362
    '<'                  shift, and go to state 363
    '|'                  shift, and go to state 364
    '^'                  shift, and go to state 365
    '&'                  shift, and go to state 366
    '+'                  shift, and go to state 367
    '-'                  shift, and go to state 368
    '*'                  shift, and go to state 369
    '/'                  shift, and go to state 370
    '%'                  shift, and go to state 371

    $default  reduce using rule 259 (arg)

    relop  go to state 372

    Conflict between rule 259 and token "`rescue' modifier" resolved as shift ('=' < "`rescue' modifier").
    Conflict between rule 259 and token "**" resolved as shift ('=' < "**").
    Conflict between rule 259 and token "<=>" resolved as shift ('=' < "<=>").
    Conflict between rule 259 and token "==" resolved as shift ('=' < "==").
    Conflict between rule 259 and token "===" resolved as shift ('=' < "===").
    Conflict between rule 259 and token "!=" resolved as shift ('=' < "!=").
    Conflict between rule 259 and token ">=" resolved as shift ('=' < ">=").
    Conflict between rule 259 and token "<=" resolved as shift ('=' < "<=").
    Conflict between rule 259 and token "&&" resolved as shift ('=' < "&&").
    Conflict between rule 259 and token "||" resolved as shift ('=' < "||").
    Conflict between rule 259 and token "=~" resolved as shift ('=' < "=~").
    Conflict between rule 259 and token "!~" resolved as shift ('=' < "!~").
    Conflict between rule 259 and token ".." resolved as shift ('=' < "..").
    Conflict between rule 259 and token "..." resolved as shift ('=' < "...").
    Conflict between rule 259 and token "<<" resolved as shift ('=' < "<<").
    Conflict between rule 259 and token ">>" resolved as shift ('=' < ">>").
    Conflict between rule 259 and token '?' resolved as shift ('=' < '?').
    Conflict between rule 259 and token '>' resolved as shift ('=' < '>').
    Conflict between rule 259 and token '<' resolved as shift ('=' < '<').
    Conflict between rule 259 and token '|' resolved as shift ('=' < '|').
    Conflict between rule 259 and token '^' resolved as shift ('=' < '^').
    Conflict between rule 259 and token '&' resolved as shift ('=' < '&').
    Conflict between rule 259 and token '+' resolved as shift ('=' < '+').
    Conflict between rule 259 and token '-' resolved as shift ('=' < '-').
    Conflict between rule 259 and token '*' resolved as shift ('=' < '*').
    Conflict between rule 259 and token '/' resolved as shift ('=' < '/').
    Conflict between rule 259 and token '%' resolved as shift ('=' < '%').


State 746

  361 primary: defn_head f_arglist $@24 bodystmt • k_end
  386 k_end: • "`end'"
  387      | • "dummy end"

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 888


State 747

  676 f_arglist: @50 f_args term •

    $default  reduce using rule 676 (f_arglist)


State 748

   48 command_asgn: defs_head f_opt_paren_args '=' command •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
   49             | defs_head f_opt_paren_args '=' command • "`rescue' modifier" arg

    "`rescue' modifier"  shift, and go to state 889

    $default  reduce using rule 48 (command_asgn)

    Conflict between rule 48 and token "`rescue' modifier" resolved as shift ('=' < "`rescue' modifier").


State 749

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  261    | defs_head f_opt_paren_args '=' arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "dummy end", "=>", "{ arg", "'}'", tLAMBEG, ':', '}', ',', ')', ']', ';', '\n']
  262    | defs_head f_opt_paren_args '=' arg • "`rescue' modifier" arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "`rescue' modifier"  shift, and go to state 890
    "**"                 shift, and go to state 345
    "<=>"                shift, and go to state 346
    "=="                 shift, and go to state 347
    "==="                shift, and go to state 348
    "!="                 shift, and go to state 349
    ">="                 shift, and go to state 350
    "<="                 shift, and go to state 351
    "&&"                 shift, and go to state 352
    "||"                 shift, and go to state 353
    "=~"                 shift, and go to state 354
    "!~"                 shift, and go to state 355
    ".."                 shift, and go to state 356
    "..."                shift, and go to state 357
    "<<"                 shift, and go to state 358
    ">>"                 shift, and go to state 359
    '?'                  shift, and go to state 361
    '>'                  shift, and go to state 362
    '<'                  shift, and go to state 363
    '|'                  shift, and go to state 364
    '^'                  shift, and go to state 365
    '&'                  shift, and go to state 366
    '+'                  shift, and go to state 367
    '-'                  shift, and go to state 368
    '*'                  shift, and go to state 369
    '/'                  shift, and go to state 370
    '%'                  shift, and go to state 371

    $default  reduce using rule 261 (arg)

    relop  go to state 372

    Conflict between rule 261 and token "`rescue' modifier" resolved as shift ('=' < "`rescue' modifier").
    Conflict between rule 261 and token "**" resolved as shift ('=' < "**").
    Conflict between rule 261 and token "<=>" resolved as shift ('=' < "<=>").
    Conflict between rule 261 and token "==" resolved as shift ('=' < "==").
    Conflict between rule 261 and token "===" resolved as shift ('=' < "===").
    Conflict between rule 261 and token "!=" resolved as shift ('=' < "!=").
    Conflict between rule 261 and token ">=" resolved as shift ('=' < ">=").
    Conflict between rule 261 and token "<=" resolved as shift ('=' < "<=").
    Conflict between rule 261 and token "&&" resolved as shift ('=' < "&&").
    Conflict between rule 261 and token "||" resolved as shift ('=' < "||").
    Conflict between rule 261 and token "=~" resolved as shift ('=' < "=~").
    Conflict between rule 261 and token "!~" resolved as shift ('=' < "!~").
    Conflict between rule 261 and token ".." resolved as shift ('=' < "..").
    Conflict between rule 261 and token "..." resolved as shift ('=' < "...").
    Conflict between rule 261 and token "<<" resolved as shift ('=' < "<<").
    Conflict between rule 261 and token ">>" resolved as shift ('=' < ">>").
    Conflict between rule 261 and token '?' resolved as shift ('=' < '?').
    Conflict between rule 261 and token '>' resolved as shift ('=' < '>').
    Conflict between rule 261 and token '<' resolved as shift ('=' < '<').
    Conflict between rule 261 and token '|' resolved as shift ('=' < '|').
    Conflict between rule 261 and token '^' resolved as shift ('=' < '^').
    Conflict between rule 261 and token '&' resolved as shift ('=' < '&').
    Conflict between rule 261 and token '+' resolved as shift ('=' < '+').
    Conflict between rule 261 and token '-' resolved as shift ('=' < '-').
    Conflict between rule 261 and token '*' resolved as shift ('=' < '*').
    Conflict between rule 261 and token '/' resolved as shift ('=' < '/').
    Conflict between rule 261 and token '%' resolved as shift ('=' < '%').


State 750

  363 primary: defs_head f_arglist $@25 bodystmt • k_end
  386 k_end: • "`end'"
  387      | • "dummy end"

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 891


State 751

  471 brace_block: '{' brace_body '}' •

    $default  reduce using rule 471 (brace_block)


State 752

  475 @34: ε •
  476 brace_body: @32 @33 • @34 opt_block_param compstmt

    $default  reduce using rule 475 (@34)

    @34  go to state 892


State 753

   79 cmd_brace_block: "{ arg" brace_body • '}'

    '}'  shift, and go to state 893


State 754

  386 k_end: "`end'" •

    $default  reduce using rule 386 (k_end)


State 755

  387 k_end: "dummy end" •

    $default  reduce using rule 387 (k_end)


State 756

  472 brace_block: k_do do_body k_end •

    $default  reduce using rule 472 (brace_block)


State 757

  479 @37: ε •
  480 do_body: @35 @36 • @37 opt_block_param bodystmt

    $default  reduce using rule 479 (@37)

    @37  go to state 894


State 758

  457 do_block: k_do_block do_body k_end •

    $default  reduce using rule 457 (do_block)


State 759

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  300 args: "*" • arg_value
  301     | "*" •  [',']
  309 mrhs: "*" • arg_value
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 301 (args)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 895
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 760

   33 stmt: mlhs '=' lex_ctxt command_call •

    $default  reduce using rule 33 (stmt)


State 761

  299 args: arg_value •  [',']
  306 mrhs_arg: arg_value •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']

    ','       reduce using rule 299 (args)
    $default  reduce using rule 306 (mrhs_arg)


State 762

  302 args: args • ',' arg_value
  303     | args • ',' "*" arg_value
  304     | args • ',' "*"
  307 mrhs: args • ',' arg_value
  308     | args • ',' "*" arg_value

    ','  shift, and go to state 896


State 763

   35 stmt: mlhs '=' lex_ctxt mrhs_arg • "`rescue' modifier" stmt
   36     | mlhs '=' lex_ctxt mrhs_arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "dummy end", "'}'", '}', ')', ';', '\n']

    "`rescue' modifier"  shift, and go to state 897

    $default  reduce using rule 36 (stmt)

    Conflict between rule 36 and token "`rescue' modifier" resolved as shift ('=' < "`rescue' modifier").


State 764

  305 mrhs_arg: mrhs •

    $default  reduce using rule 305 (mrhs_arg)


State 765

  107 mlhs_item: "(" mlhs_inner rparen •

    $default  reduce using rule 107 (mlhs_item)


State 766

  101 mlhs_basic: mlhs_head "*" ',' mlhs_post •  ["`in'", '=', ')', '\n']
  111 mlhs_post: mlhs_post • ',' mlhs_item

    ','  shift, and go to state 698

    $default  reduce using rule 101 (mlhs_basic)


State 767

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   99 mlhs_basic: mlhs_head "*" mlhs_node ',' • mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  110 mlhs_post: • mlhs_item
  111          | • mlhs_post ',' mlhs_item
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 281
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    ":: at EXPR_BEG"            shift, and go to state 282
    "("                         shift, and go to state 340
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 283

    defn_head         go to state 285
    defs_head         go to state 286
    fcall             go to state 254
    mlhs_item         go to state 496
    mlhs_post         go to state 898
    mlhs_node         go to state 86
    primary           go to state 288
    primary_value     go to state 289
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 290
    keyword_variable  go to state 291
    var_ref           go to state 124
    backref           go to state 292
    operation         go to state 127


State 768

   53 command_rhs: command_asgn •

    $default  reduce using rule 53 (command_rhs)


State 769

   39 command_asgn: lhs '=' lex_ctxt command_rhs •

    $default  reduce using rule 39 (command_asgn)


State 770

   51 command_rhs: command_call •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
   52            | command_call • "`rescue' modifier" stmt

    "`rescue' modifier"  shift, and go to state 899

    $default  reduce using rule 51 (command_rhs)

    Conflict between rule 51 and token "`rescue' modifier" resolved as shift ("operator-assignment" < "`rescue' modifier").


State 771

   39 command_asgn: lhs • '=' lex_ctxt command_rhs
  216 arg: lhs • '=' lex_ctxt arg_rhs

    '='  shift, and go to state 900


State 772

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg
  271 arg_value: arg •  [',']
  276 arg_rhs: arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "dummy end", "=>", "'}'", '}', ')', ';', '\n']
  277        | arg • "`rescue' modifier" arg

    "`rescue' modifier"  shift, and go to state 901
    "**"                 shift, and go to state 345
    "<=>"                shift, and go to state 346
    "=="                 shift, and go to state 347
    "==="                shift, and go to state 348
    "!="                 shift, and go to state 349
    ">="                 shift, and go to state 350
    "<="                 shift, and go to state 351
    "&&"                 shift, and go to state 352
    "||"                 shift, and go to state 353
    "=~"                 shift, and go to state 354
    "!~"                 shift, and go to state 355
    ".."                 shift, and go to state 356
    "..."                shift, and go to state 357
    "<<"                 shift, and go to state 358
    ">>"                 shift, and go to state 359
    '?'                  shift, and go to state 361
    '>'                  shift, and go to state 362
    '<'                  shift, and go to state 363
    '|'                  shift, and go to state 364
    '^'                  shift, and go to state 365
    '&'                  shift, and go to state 366
    '+'                  shift, and go to state 367
    '-'                  shift, and go to state 368
    '*'                  shift, and go to state 369
    '/'                  shift, and go to state 370
    '%'                  shift, and go to state 371

    ','       reduce using rule 271 (arg_value)
    $default  reduce using rule 276 (arg_rhs)

    relop  go to state 372

    Conflict between rule 276 and token "`rescue' modifier" resolved as shift ("operator-assignment" < "`rescue' modifier").
    Conflict between rule 276 and token "**" resolved as shift ("operator-assignment" < "**").
    Conflict between rule 276 and token "<=>" resolved as shift ("operator-assignment" < "<=>").
    Conflict between rule 276 and token "==" resolved as shift ("operator-assignment" < "==").
    Conflict between rule 276 and token "===" resolved as shift ("operator-assignment" < "===").
    Conflict between rule 276 and token "!=" resolved as shift ("operator-assignment" < "!=").
    Conflict between rule 276 and token ">=" resolved as shift ("operator-assignment" < ">=").
    Conflict between rule 276 and token "<=" resolved as shift ("operator-assignment" < "<=").
    Conflict between rule 276 and token "&&" resolved as shift ("operator-assignment" < "&&").
    Conflict between rule 276 and token "||" resolved as shift ("operator-assignment" < "||").
    Conflict between rule 276 and token "=~" resolved as shift ("operator-assignment" < "=~").
    Conflict between rule 276 and token "!~" resolved as shift ("operator-assignment" < "!~").
    Conflict between rule 276 and token ".." resolved as shift ("operator-assignment" < "..").
    Conflict between rule 276 and token "..." resolved as shift ("operator-assignment" < "...").
    Conflict between rule 276 and token "<<" resolved as shift ("operator-assignment" < "<<").
    Conflict between rule 276 and token ">>" resolved as shift ("operator-assignment" < ">>").
    Conflict between rule 276 and token '?' resolved as shift ("operator-assignment" < '?').
    Conflict between rule 276 and token '>' resolved as shift ("operator-assignment" < '>').
    Conflict between rule 276 and token '<' resolved as shift ("operator-assignment" < '<').
    Conflict between rule 276 and token '|' resolved as shift ("operator-assignment" < '|').
    Conflict between rule 276 and token '^' resolved as shift ("operator-assignment" < '^').
    Conflict between rule 276 and token '&' resolved as shift ("operator-assignment" < '&').
    Conflict between rule 276 and token '+' resolved as shift ("operator-assignment" < '+').
    Conflict between rule 276 and token '-' resolved as shift ("operator-assignment" < '-').
    Conflict between rule 276 and token '*' resolved as shift ("operator-assignment" < '*').
    Conflict between rule 276 and token '/' resolved as shift ("operator-assignment" < '/').
    Conflict between rule 276 and token '%' resolved as shift ("operator-assignment" < '%').


State 773

  299 args: arg_value •

    $default  reduce using rule 299 (args)


State 774

  216 arg: lhs '=' lex_ctxt arg_rhs •

    $default  reduce using rule 216 (arg)


State 775

   34 stmt: lhs '=' lex_ctxt mrhs •

    $default  reduce using rule 34 (stmt)


State 776

   41 command_asgn: primary_value • '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | primary_value • call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | primary_value • call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | primary_value • "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | primary_value • "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   83 command: primary_value • call_op operation2 command_args
   84        | primary_value • call_op operation2 command_args cmd_brace_block
   85        | primary_value • "::" operation2 command_args
   86        | primary_value • "::" operation2 command_args cmd_brace_block
  123 lhs: primary_value • '[' opt_call_args rbracket
  124    | primary_value • call_op "local variable or method"
  125    | primary_value • "::" "local variable or method"
  126    | primary_value • call_op "constant"
  127    | primary_value • "::" "constant"
  218 arg: primary_value • '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | primary_value • call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | primary_value • call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | primary_value • "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | primary_value • "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  328 primary: primary_value • "::" "constant"
  463 method_call: primary_value • call_op operation2 opt_paren_args
  464            | primary_value • "::" operation2 paren_args
  465            | primary_value • "::" operation3
  466            | primary_value • call_op paren_args
  467            | primary_value • "::" paren_args
  470            | primary_value • '[' opt_call_args rbracket
  764 call_op: • '.'
  765        | • "&."

    '.'   shift, and go to state 374
    "&."  shift, and go to state 375
    "::"  shift, and go to state 902
    '['   shift, and go to state 903

    call_op  go to state 904


State 777

   50 command_asgn: backref • "operator-assignment" lex_ctxt command_rhs
  129 lhs: backref •  ['=']
  224 arg: backref • "operator-assignment" lex_ctxt arg_rhs
  319 primary: backref •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ';', '\n']

    "operator-assignment"  shift, and go to state 430

    '='       reduce using rule 129 (lhs)
    $default  reduce using rule 319 (primary)


State 778

   64 expr: arg "`in'" @7 @8 • p_top_expr_body
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  497 p_top_expr_body: • p_expr
  498                | • p_expr ','
  499                | • p_expr ',' p_args
  500                | • p_find
  501                | • p_args_tail
  502                | • p_kwargs
  503 p_expr: • p_as
  504 p_as: • p_expr "=>" p_variable
  505     | • p_alt
  506 p_alt: • p_alt '|' p_expr_basic
  507      | • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  513             | • p_const p_lparen p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  521             | • "[" p_find rbracket
  522             | • "[" rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  536 p_args_tail: • p_rest
  537            | • p_rest ',' p_args_post
  538 p_find: • p_rest ',' p_args_post ',' p_rest
  539 p_rest: • "*" "local variable or method"
  540       | • "*"
  544 p_kwargs: • p_kwarg ',' p_any_kwrest
  545         | • p_kwarg
  546         | • p_kwarg ','
  547         | • p_any_kwrest
  548 p_kwarg: • p_kw
  549        | • p_kwarg ',' p_kw
  550 p_kw: • p_kw_label p_expr
  551     | • p_kw_label
  552 p_kw_label: • "label"
  553           | • "string literal" string_contents tLABEL_END
  554 p_kwrest: • kwrest_mark "local variable or method"
  555         | • kwrest_mark
  556 p_kwnorest: • kwrest_mark "`nil'"
  557 p_any_kwrest: • p_kwrest
  558             | • p_kwnorest
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  720 kwrest_mark: • "**"
  721            | • "**arg"

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "label"                     shift, and go to state 907
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "**"                        shift, and go to state 534
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "*"                         shift, and go to state 914
    "**arg"                     shift, and go to state 538
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 915
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283

    lambda            go to state 917
    p_top_expr_body   go to state 918
    p_expr            go to state 919
    p_as              go to state 920
    p_alt             go to state 921
    p_expr_basic      go to state 922
    p_args_tail       go to state 923
    p_find            go to state 924
    p_rest            go to state 925
    p_kwargs          go to state 926
    p_kwarg           go to state 927
    p_kw              go to state 928
    p_kw_label        go to state 929
    p_kwrest          go to state 930
    p_kwnorest        go to state 931
    p_any_kwrest      go to state 932
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947
    kwrest_mark       go to state 948


State 779

   61 expr: arg "=>" @5 @6 • p_top_expr_body
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  497 p_top_expr_body: • p_expr
  498                | • p_expr ','
  499                | • p_expr ',' p_args
  500                | • p_find
  501                | • p_args_tail
  502                | • p_kwargs
  503 p_expr: • p_as
  504 p_as: • p_expr "=>" p_variable
  505     | • p_alt
  506 p_alt: • p_alt '|' p_expr_basic
  507      | • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  513             | • p_const p_lparen p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  521             | • "[" p_find rbracket
  522             | • "[" rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  536 p_args_tail: • p_rest
  537            | • p_rest ',' p_args_post
  538 p_find: • p_rest ',' p_args_post ',' p_rest
  539 p_rest: • "*" "local variable or method"
  540       | • "*"
  544 p_kwargs: • p_kwarg ',' p_any_kwrest
  545         | • p_kwarg
  546         | • p_kwarg ','
  547         | • p_any_kwrest
  548 p_kwarg: • p_kw
  549        | • p_kwarg ',' p_kw
  550 p_kw: • p_kw_label p_expr
  551     | • p_kw_label
  552 p_kw_label: • "label"
  553           | • "string literal" string_contents tLABEL_END
  554 p_kwrest: • kwrest_mark "local variable or method"
  555         | • kwrest_mark
  556 p_kwnorest: • kwrest_mark "`nil'"
  557 p_any_kwrest: • p_kwrest
  558             | • p_kwnorest
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  720 kwrest_mark: • "**"
  721            | • "**arg"

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "label"                     shift, and go to state 907
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "**"                        shift, and go to state 534
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "*"                         shift, and go to state 914
    "**arg"                     shift, and go to state 538
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 915
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283

    lambda            go to state 917
    p_top_expr_body   go to state 949
    p_expr            go to state 919
    p_as              go to state 920
    p_alt             go to state 921
    p_expr_basic      go to state 922
    p_args_tail       go to state 923
    p_find            go to state 924
    p_rest            go to state 925
    p_kwargs          go to state 926
    p_kwarg           go to state 927
    p_kw              go to state 928
    p_kw_label        go to state 929
    p_kwrest          go to state 930
    p_kwnorest        go to state 931
    p_any_kwrest      go to state 932
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947
    kwrest_mark       go to state 948


State 780

  258 arg: arg '?' arg opt_nl • ':' arg

    ':'  shift, and go to state 950


State 781

   45 command_asgn: primary_value "::" "local variable or method" "operator-assignment" • lex_ctxt command_rhs
  221 arg: primary_value "::" "local variable or method" "operator-assignment" • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 951
    none      go to state 577


State 782

   44 command_asgn: primary_value "::" "constant" "operator-assignment" • lex_ctxt command_rhs
  222 arg: primary_value "::" "constant" "operator-assignment" • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 952
    none      go to state 577


State 783

  464 method_call: primary_value "::" operation2 paren_args •

    $default  reduce using rule 464 (method_call)


State 784

   79 cmd_brace_block: • "{ arg" brace_body '}'
   85 command: primary_value "::" operation2 command_args •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ']', ';', '\n']
   86        | primary_value "::" operation2 command_args • cmd_brace_block

    "{ arg"  shift, and go to state 571

    $default  reduce using rule 85 (command)

    cmd_brace_block  go to state 953

    Conflict between rule 85 and token "{ arg" resolved as shift (tLOWEST < "{ arg").


State 785

  773 rbracket: opt_nl • ']'

    ']'  shift, and go to state 954


State 786

   41 command_asgn: primary_value '[' opt_call_args rbracket • "operator-assignment" lex_ctxt command_rhs
  114 mlhs_node: primary_value '[' opt_call_args rbracket •  [',']
  123 lhs: primary_value '[' opt_call_args rbracket •  ['=']
  218 arg: primary_value '[' opt_call_args rbracket • "operator-assignment" lex_ctxt arg_rhs
  470 method_call: primary_value '[' opt_call_args rbracket •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`do'", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '{', '}', '[', ')', ';', '\n']

    "operator-assignment"  shift, and go to state 955

    '='       reduce using rule 123 (lhs)
    ','       reduce using rule 114 (mlhs_node)
    $default  reduce using rule 470 (method_call)


State 787

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  285 opt_call_args: args ',' •  [']', '\n']
  286              | args ',' • assocs ','
  291 call_args: args ',' • assocs opt_block_arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  297 opt_block_arg: ',' • block_arg
  302 args: args ',' • arg_value
  303     | args ',' • "*" arg_value
  304     | args ',' • "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 666
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 285 (opt_call_args)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 667
    block_arg         go to state 668
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 846
    assoc             go to state 233
    operation         go to state 127


State 788

   42 command_asgn: primary_value call_op "local variable or method" "operator-assignment" • lex_ctxt command_rhs
  219 arg: primary_value call_op "local variable or method" "operator-assignment" • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 956
    none      go to state 577


State 789

   43 command_asgn: primary_value call_op "constant" "operator-assignment" • lex_ctxt command_rhs
  220 arg: primary_value call_op "constant" "operator-assignment" • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 957
    none      go to state 577


State 790

  282 opt_paren_args: paren_args •

    $default  reduce using rule 282 (opt_paren_args)


State 791

  463 method_call: primary_value call_op operation2 opt_paren_args •

    $default  reduce using rule 463 (method_call)


State 792

   79 cmd_brace_block: • "{ arg" brace_body '}'
   83 command: primary_value call_op operation2 command_args •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ']', ';', '\n']
   84        | primary_value call_op operation2 command_args • cmd_brace_block

    "{ arg"  shift, and go to state 571

    $default  reduce using rule 83 (command)

    cmd_brace_block  go to state 958

    Conflict between rule 83 and token "{ arg" resolved as shift (tLOWEST < "{ arg").


State 793

  281 opt_paren_args: none •

    $default  reduce using rule 281 (opt_paren_args)


State 794

  322 primary: k_begin $@15 bodystmt k_end •

    $default  reduce using rule 322 (primary)


State 795

  381 k_rescue: "`rescue'" •

    $default  reduce using rule 381 (k_rescue)


State 796

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  307 mrhs: • args ',' arg_value
  308     | • args ',' "*" arg_value
  309     | • "*" arg_value
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  586 opt_rescue: k_rescue • exc_list exc_var then compstmt opt_rescue
  588 exc_list: • arg_value
  589         | • mrhs
  590         | • none
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`then'", "=>", ';', '\n']

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 759
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 781 (none)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 959
    args              go to state 762
    mrhs              go to state 960
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    exc_list          go to state 961
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127
    none              go to state 962


State 797

   11 bodystmt: compstmt opt_rescue • k_else $@2 compstmt opt_ensure
   12         | compstmt opt_rescue • opt_ensure
  382 k_ensure: • "`ensure'"
  384 k_else: • "`else'"
  593 opt_ensure: • k_ensure compstmt
  594           | • none
  781 none: ε •  ["`end'", "dummy end"]

    "`ensure'"  shift, and go to state 963
    "`else'"    shift, and go to state 964

    $default  reduce using rule 781 (none)

    k_ensure    go to state 965
    k_else      go to state 966
    opt_ensure  go to state 967
    none        go to state 968


State 798

  587 opt_rescue: none •

    $default  reduce using rule 587 (opt_rescue)


State 799

  344 primary: k_if expr_value then compstmt • if_tail k_end
  384 k_else: • "`else'"
  385 k_elsif: • "`elsif'"
  394 if_tail: • opt_else
  395        | • k_elsif expr_value then compstmt if_tail
  396 opt_else: • none
  397         | • k_else compstmt
  781 none: ε •  ["`end'", "dummy end"]

    "`elsif'"  shift, and go to state 969
    "`else'"   shift, and go to state 964

    $default  reduce using rule 781 (none)

    k_else    go to state 970
    k_elsif   go to state 971
    if_tail   go to state 972
    opt_else  go to state 973
    none      go to state 974


State 800

  391 then: term "`then'" •

    $default  reduce using rule 391 (then)


State 801

  345 primary: k_unless expr_value then compstmt • opt_else k_end
  384 k_else: • "`else'"
  396 opt_else: • none
  397         | • k_else compstmt
  781 none: ε •  ["`end'", "dummy end"]

    "`else'"  shift, and go to state 964

    $default  reduce using rule 781 (none)

    k_else    go to state 970
    opt_else  go to state 975
    none      go to state 974


State 802

  346 primary: k_while expr_value_do compstmt k_end •

    $default  reduce using rule 346 (primary)


State 803

  393 do: "`do' for condition" •

    $default  reduce using rule 393 (do)


State 804

   73 $@11: ε •
   74 expr_value_do: $@10 expr_value do • $@11

    $default  reduce using rule 73 ($@11)

    $@11  go to state 976


State 805

  392 do: term •

    $default  reduce using rule 392 (do)


State 806

  347 primary: k_until expr_value_do compstmt k_end •

    $default  reduce using rule 347 (primary)


State 807

  488 @38: ε •
  491 p_case_body: "`in'" • @38 @39 p_top_expr then $@40 compstmt p_cases

    $default  reduce using rule 488 (@38)

    @38  go to state 977


State 808

  349 primary: k_case expr_value opt_terms @19 • case_body k_end
  383 k_when: • "`when'"
  485 case_body: • k_when case_args then compstmt cases

    "`when'"  shift, and go to state 810

    k_when     go to state 811
    case_body  go to state 978


State 809

  352 primary: k_case expr_value opt_terms p_case_body • k_end
  386 k_end: • "`end'"
  387      | • "dummy end"

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 979


State 810

  383 k_when: "`when'" •

    $default  reduce using rule 383 (k_when)


State 811

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  481 case_args: • arg_value
  482          | • "*" arg_value
  483          | • case_args ',' arg_value
  484          | • case_args ',' "*" arg_value
  485 case_body: k_when • case_args then compstmt cases
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 980
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 981
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    case_args         go to state 982
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 812

  351 primary: k_case opt_terms @20 case_body • k_end
  386 k_end: • "`end'"
  387      | • "dummy end"

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 983


State 813

  116 mlhs_node: primary_value "::" "local variable or method" •  [',']
  125 lhs: primary_value "::" "local variable or method" •  ["`in'"]
  754 operation: "local variable or method" •  ['(']
  759 operation3: "local variable or method" •  ["`do'", '.', "&.", "::", '{', '[']

    "`in'"    reduce using rule 125 (lhs)
    ','       reduce using rule 116 (mlhs_node)
    '('       reduce using rule 754 (operation)
    $default  reduce using rule 759 (operation3)


State 814

  118 mlhs_node: primary_value "::" "constant" •  [',']
  127 lhs: primary_value "::" "constant" •  ["`in'"]
  328 primary: primary_value "::" "constant" •  ['.', "&.", "::", '[']
  755 operation: "constant" •  ['(']

    "`in'"    reduce using rule 127 (lhs)
    ','       reduce using rule 118 (mlhs_node)
    '('       reduce using rule 755 (operation)
    $default  reduce using rule 328 (primary)


State 815

  114 mlhs_node: primary_value '[' opt_call_args • rbracket
  123 lhs: primary_value '[' opt_call_args • rbracket
  470 method_call: primary_value '[' opt_call_args • rbracket
  770 opt_nl: ε •  [']']
  771       | • '\n'
  773 rbracket: • opt_nl ']'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl    go to state 785
    rbracket  go to state 984


State 816

  115 mlhs_node: primary_value call_op "local variable or method" •  [',']
  124 lhs: primary_value call_op "local variable or method" •  ["`in'"]
  754 operation: "local variable or method" •  ["`do'", '.', "&.", "::", '{', '[', '(']

    "`in'"    reduce using rule 124 (lhs)
    ','       reduce using rule 115 (mlhs_node)
    $default  reduce using rule 754 (operation)


State 817

  117 mlhs_node: primary_value call_op "constant" •  [',']
  126 lhs: primary_value call_op "constant" •  ["`in'"]
  755 operation: "constant" •  ["`do'", '.', "&.", "::", '{', '[', '(']

    "`in'"    reduce using rule 126 (lhs)
    ','       reduce using rule 117 (mlhs_node)
    $default  reduce using rule 755 (operation)


State 818

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  353        | k_for for_var "`in'" expr_value_do • compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`end'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`end'"      reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    compstmt          go to state 985
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 819

  357 primary: k_class "<<" expr $@22 • term bodystmt k_end
  777 term: • ';'
  778     | • '\n'

    ';'   shift, and go to state 309
    '\n'  shift, and go to state 310

    term  go to state 986


State 820

   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   70 expr_value: • expr
   71           | • error
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  669 superclass: '<' $@49 • expr_value term
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 380
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 381
    defn_head         go to state 218
    defs_head         go to state 219
    expr_value        go to state 987
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 821

   11 bodystmt: • compstmt opt_rescue k_else $@2 compstmt opt_ensure
   12         | • compstmt opt_rescue opt_ensure
   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  355        | k_class cpath superclass $@21 • bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`rescue'", "`ensure'", "`end'", "`else'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`rescue'"   reduce using rule 781 (none)
    "`ensure'"   reduce using rule 781 (none)
    "`end'"      reduce using rule 781 (none)
    "`else'"     reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    bodystmt          go to state 988
    compstmt          go to state 626
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 822

  130 cname: "local variable or method" •  [error, "`class'", "`module'", "`def'", "`undef'", "`begin'", "`rescue'", "`ensure'", "`end'", "`if'", "`unless'", "`else'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`alias'", "`defined?'", "`BEGIN'", "`END'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "dummy end", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", '<', tUMINUS_NUM, '!', '~', ';', '\n']
  754 operation: "local variable or method" •  ['(']
  759 operation3: "local variable or method" •  ["`do'", '.', "&.", "::", '{', '[']

    "`do'"    reduce using rule 759 (operation3)
    '.'       reduce using rule 759 (operation3)
    "&."      reduce using rule 759 (operation3)
    "::"      reduce using rule 759 (operation3)
    '{'       reduce using rule 759 (operation3)
    '['       reduce using rule 759 (operation3)
    '('       reduce using rule 754 (operation)
    $default  reduce using rule 130 (cname)


State 823

  131 cname: "constant" •  [error, "`class'", "`module'", "`def'", "`undef'", "`begin'", "`rescue'", "`ensure'", "`end'", "`if'", "`unless'", "`else'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`alias'", "`defined?'", "`BEGIN'", "`END'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "dummy end", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", '<', tUMINUS_NUM, '!', '~', ';', '\n']
  328 primary: primary_value "::" "constant" •  ['.', "&.", "::", '[']
  755 operation: "constant" •  ['(']

    '.'       reduce using rule 328 (primary)
    "&."      reduce using rule 328 (primary)
    "::"      reduce using rule 328 (primary)
    '['       reduce using rule 328 (primary)
    '('       reduce using rule 755 (operation)
    $default  reduce using rule 131 (cname)


State 824

  134 cpath: primary_value "::" cname •

    $default  reduce using rule 134 (cpath)


State 825

  470 method_call: primary_value '[' opt_call_args • rbracket
  770 opt_nl: ε •  [']']
  771       | • '\n'
  773 rbracket: • opt_nl ']'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl    go to state 785
    rbracket  go to state 989


State 826

  359 primary: k_module cpath $@23 bodystmt • k_end
  386 k_end: • "`end'"
  387      | • "dummy end"

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 990


State 827

   55 expr: expr • "`and'" expr
   56     | expr • "`or'" expr
  743 singleton: '(' $@51 expr • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    "`and'"  shift, and go to state 319
    "`or'"   shift, and go to state 320
    '\n'     shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 991


State 828

   66 def_name: • fname
   69 defs_head: k_def singleton dot_or_colon $@9 • def_name
  135 fname: • "local variable or method"
  136      | • "constant"
  137      | • "method"
  138      | • op
  139      | • reswords
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  175 reswords: • "`__LINE__'"
  176         | • "`__FILE__'"
  177         | • "`__ENCODING__'"
  178         | • "`BEGIN'"
  179         | • "`END'"
  180         | • "`alias'"
  181         | • "`and'"
  182         | • "`begin'"
  183         | • "`break'"
  184         | • "`case'"
  185         | • "`class'"
  186         | • "`def'"
  187         | • "`defined?'"
  188         | • "`do'"
  189         | • "`else'"
  190         | • "`elsif'"
  191         | • "`end'"
  192         | • "`ensure'"
  193         | • "`false'"
  194         | • "`for'"
  195         | • "`in'"
  196         | • "`module'"
  197         | • "`next'"
  198         | • "`nil'"
  199         | • "`not'"
  200         | • "`or'"
  201         | • "`redo'"
  202         | • "`rescue'"
  203         | • "`retry'"
  204         | • "`return'"
  205         | • "`self'"
  206         | • "`super'"
  207         | • "`then'"
  208         | • "`true'"
  209         | • "`undef'"
  210         | • "`when'"
  211         | • "`yield'"
  212         | • "`if'"
  213         | • "`unless'"
  214         | • "`while'"
  215         | • "`until'"

    "`class'"                   shift, and go to state 129
    "`module'"                  shift, and go to state 130
    "`def'"                     shift, and go to state 131
    "`undef'"                   shift, and go to state 132
    "`begin'"                   shift, and go to state 133
    "`rescue'"                  shift, and go to state 134
    "`ensure'"                  shift, and go to state 135
    "`end'"                     shift, and go to state 136
    "`if'"                      shift, and go to state 137
    "`unless'"                  shift, and go to state 138
    "`then'"                    shift, and go to state 139
    "`elsif'"                   shift, and go to state 140
    "`else'"                    shift, and go to state 141
    "`case'"                    shift, and go to state 142
    "`when'"                    shift, and go to state 143
    "`while'"                   shift, and go to state 144
    "`until'"                   shift, and go to state 145
    "`for'"                     shift, and go to state 146
    "`break'"                   shift, and go to state 147
    "`next'"                    shift, and go to state 148
    "`redo'"                    shift, and go to state 149
    "`retry'"                   shift, and go to state 150
    "`in'"                      shift, and go to state 151
    "`do'"                      shift, and go to state 152
    "`return'"                  shift, and go to state 153
    "`yield'"                   shift, and go to state 154
    "`super'"                   shift, and go to state 155
    "`self'"                    shift, and go to state 156
    "`nil'"                     shift, and go to state 157
    "`true'"                    shift, and go to state 158
    "`false'"                   shift, and go to state 159
    "`and'"                     shift, and go to state 160
    "`or'"                      shift, and go to state 161
    "`not'"                     shift, and go to state 162
    "`alias'"                   shift, and go to state 163
    "`defined?'"                shift, and go to state 164
    "`BEGIN'"                   shift, and go to state 165
    "`END'"                     shift, and go to state 166
    "`__LINE__'"                shift, and go to state 167
    "`__FILE__'"                shift, and go to state 168
    "`__ENCODING__'"            shift, and go to state 169
    "local variable or method"  shift, and go to state 170
    "method"                    shift, and go to state 171
    "constant"                  shift, and go to state 172
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202

    def_name  go to state 992
    fname     go to state 420
    op        go to state 206
    reswords  go to state 207


State 829

  379 k_do: • "`do'"
  459 block_call: block_call call_op2 operation2 opt_paren_args •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "&.", "::", "'}'", '}', ')', ';', '\n']
  460           | block_call call_op2 operation2 opt_paren_args • brace_block
  471 brace_block: • '{' brace_body '}'
  472            | • k_do do_body k_end

    "`do'"  shift, and go to state 329
    '{'     shift, and go to state 330

    $default  reduce using rule 459 (block_call)

    k_do         go to state 333
    brace_block  go to state 993


State 830

   78 block_command: block_call call_op2 operation2 command_args •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
  380 k_do_block: • "`do' for block"
  457 do_block: • k_do_block do_body k_end
  461 block_call: block_call call_op2 operation2 command_args • do_block

    "`do' for block"  shift, and go to state 335

    $default  reduce using rule 78 (block_command)

    k_do_block  go to state 336
    do_block    go to state 994


State 831

   40 command_asgn: var_lhs "operator-assignment" lex_ctxt command_rhs •

    $default  reduce using rule 40 (command_asgn)


State 832

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg
  276 arg_rhs: arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "dummy end", "=>", "{ arg", "'}'", tLAMBEG, ':', '}', ',', ')', ']', ';', '\n']
  277        | arg • "`rescue' modifier" arg

    "`rescue' modifier"  shift, and go to state 901
    "**"                 shift, and go to state 345
    "<=>"                shift, and go to state 346
    "=="                 shift, and go to state 347
    "==="                shift, and go to state 348
    "!="                 shift, and go to state 349
    ">="                 shift, and go to state 350
    "<="                 shift, and go to state 351
    "&&"                 shift, and go to state 352
    "||"                 shift, and go to state 353
    "=~"                 shift, and go to state 354
    "!~"                 shift, and go to state 355
    ".."                 shift, and go to state 356
    "..."                shift, and go to state 357
    "<<"                 shift, and go to state 358
    ">>"                 shift, and go to state 359
    '?'                  shift, and go to state 361
    '>'                  shift, and go to state 362
    '<'                  shift, and go to state 363
    '|'                  shift, and go to state 364
    '^'                  shift, and go to state 365
    '&'                  shift, and go to state 366
    '+'                  shift, and go to state 367
    '-'                  shift, and go to state 368
    '*'                  shift, and go to state 369
    '/'                  shift, and go to state 370
    '%'                  shift, and go to state 371

    $default  reduce using rule 276 (arg_rhs)

    relop  go to state 372

    Conflict between rule 276 and token "`rescue' modifier" resolved as shift ("operator-assignment" < "`rescue' modifier").
    Conflict between rule 276 and token "**" resolved as shift ("operator-assignment" < "**").
    Conflict between rule 276 and token "<=>" resolved as shift ("operator-assignment" < "<=>").
    Conflict between rule 276 and token "==" resolved as shift ("operator-assignment" < "==").
    Conflict between rule 276 and token "===" resolved as shift ("operator-assignment" < "===").
    Conflict between rule 276 and token "!=" resolved as shift ("operator-assignment" < "!=").
    Conflict between rule 276 and token ">=" resolved as shift ("operator-assignment" < ">=").
    Conflict between rule 276 and token "<=" resolved as shift ("operator-assignment" < "<=").
    Conflict between rule 276 and token "&&" resolved as shift ("operator-assignment" < "&&").
    Conflict between rule 276 and token "||" resolved as shift ("operator-assignment" < "||").
    Conflict between rule 276 and token "=~" resolved as shift ("operator-assignment" < "=~").
    Conflict between rule 276 and token "!~" resolved as shift ("operator-assignment" < "!~").
    Conflict between rule 276 and token ".." resolved as shift ("operator-assignment" < "..").
    Conflict between rule 276 and token "..." resolved as shift ("operator-assignment" < "...").
    Conflict between rule 276 and token "<<" resolved as shift ("operator-assignment" < "<<").
    Conflict between rule 276 and token ">>" resolved as shift ("operator-assignment" < ">>").
    Conflict between rule 276 and token '?' resolved as shift ("operator-assignment" < '?').
    Conflict between rule 276 and token '>' resolved as shift ("operator-assignment" < '>').
    Conflict between rule 276 and token '<' resolved as shift ("operator-assignment" < '<').
    Conflict between rule 276 and token '|' resolved as shift ("operator-assignment" < '|').
    Conflict between rule 276 and token '^' resolved as shift ("operator-assignment" < '^').
    Conflict between rule 276 and token '&' resolved as shift ("operator-assignment" < '&').
    Conflict between rule 276 and token '+' resolved as shift ("operator-assignment" < '+').
    Conflict between rule 276 and token '-' resolved as shift ("operator-assignment" < '-').
    Conflict between rule 276 and token '*' resolved as shift ("operator-assignment" < '*').
    Conflict between rule 276 and token '/' resolved as shift ("operator-assignment" < '/').
    Conflict between rule 276 and token '%' resolved as shift ("operator-assignment" < '%').


State 833

  217 arg: var_lhs "operator-assignment" lex_ctxt arg_rhs •

    $default  reduce using rule 217 (arg)


State 834

   50 command_asgn: backref "operator-assignment" lex_ctxt command_rhs •

    $default  reduce using rule 50 (command_asgn)


State 835

  224 arg: backref "operator-assignment" lex_ctxt arg_rhs •

    $default  reduce using rule 224 (arg)


State 836

  144 undef_list: undef_list ',' $@12 fitem •

    $default  reduce using rule 144 (undef_list)


State 837

  751 assoc: "string literal" string_contents tLABEL_END arg_value •

    $default  reduce using rule 751 (assoc)


State 838

  303 args: args ',' "*" arg_value •

    $default  reduce using rule 303 (args)


State 839

  291 call_args: args ',' assocs opt_block_arg •

    $default  reduce using rule 291 (call_args)


State 840

  221 arg: primary_value "::" "local variable or method" "operator-assignment" • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 995
    none      go to state 577


State 841

  222 arg: primary_value "::" "constant" "operator-assignment" • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 996
    none      go to state 577


State 842

  123 lhs: primary_value '[' opt_call_args rbracket •  ['=']
  218 arg: primary_value '[' opt_call_args rbracket • "operator-assignment" lex_ctxt arg_rhs
  470 method_call: primary_value '[' opt_call_args rbracket •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "{ arg", "'}'", tLAMBEG, '?', ':', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '{', '}', '[', ',', ')', ']', ';', '\n']

    "operator-assignment"  shift, and go to state 997

    '='       reduce using rule 123 (lhs)
    $default  reduce using rule 470 (method_call)


State 843

  219 arg: primary_value call_op "local variable or method" "operator-assignment" • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 998
    none      go to state 577


State 844

  220 arg: primary_value call_op "constant" "operator-assignment" • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 999
    none      go to state 577


State 845

  279 paren_args: '(' args ',' args_forward • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 1000


State 846

  286 opt_call_args: args ',' assocs • ','
  291 call_args: args ',' assocs • opt_block_arg
  297 opt_block_arg: • ',' block_arg
  298              | • none
  747 assocs: assocs • ',' assoc
  781 none: ε •  [')', ']', '\n']

    ','  shift, and go to state 1001

    $default  reduce using rule 781 (none)

    opt_block_arg  go to state 839
    none           go to state 444


State 847

   55 expr: expr • "`and'" expr
   56     | expr • "`or'" expr
  337 primary: "`defined?'" opt_nl '(' $@18 expr • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    "`and'"  shift, and go to state 319
    "`or'"   shift, and go to state 320
    '\n'     shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 1002


State 848

  223 arg: ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs •

    $default  reduce using rule 223 (arg)


State 849

  274 aref_args: args ',' assocs trailer •

    $default  reduce using rule 274 (aref_args)


State 850

  111 mlhs_post: mlhs_post ',' mlhs_item •

    $default  reduce using rule 111 (mlhs_post)


State 851

  114 mlhs_node: primary_value '[' opt_call_args rbracket •  ["`in'", '=', ',', ')', '\n']
  470 method_call: primary_value '[' opt_call_args rbracket •  ["`do'", '.', "&.", "::", '{', '[']

    "`in'"    reduce using rule 114 (mlhs_node)
    '='       reduce using rule 114 (mlhs_node)
    ','       reduce using rule 114 (mlhs_node)
    ')'       reduce using rule 114 (mlhs_node)
    '\n'      reduce using rule 114 (mlhs_node)
    $default  reduce using rule 470 (method_call)


State 852

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  452 f_larglist: '(' • f_args opt_bv_decl ')'
  556 p_kwnorest: • kwrest_mark "`nil'"
  677 args_tail: • f_kwarg ',' f_kwrest opt_f_block_arg
  678          | • f_kwarg opt_f_block_arg
  679          | • f_any_kwrest opt_f_block_arg
  680          | • f_block_arg
  681          | • args_forward
  684 f_args: • f_arg ',' f_optarg ',' f_rest_arg opt_args_tail
  685       | • f_arg ',' f_optarg ',' f_rest_arg ',' f_arg opt_args_tail
  686       | • f_arg ',' f_optarg opt_args_tail
  687       | • f_arg ',' f_optarg ',' f_arg opt_args_tail
  688       | • f_arg ',' f_rest_arg opt_args_tail
  689       | • f_arg ',' f_rest_arg ',' f_arg opt_args_tail
  690       | • f_arg opt_args_tail
  691       | • f_optarg ',' f_rest_arg opt_args_tail
  692       | • f_optarg ',' f_rest_arg ',' f_arg opt_args_tail
  693       | • f_optarg opt_args_tail
  694       | • f_optarg ',' f_arg opt_args_tail
  695       | • f_rest_arg opt_args_tail
  696       | • f_rest_arg ',' f_arg opt_args_tail
  697       | • args_tail
  698       | ε •  [')', ';', '\n']
  699 args_forward: • "(..."
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  712 f_kw: • f_label arg_value
  713     | • f_label
  718 f_kwarg: • f_kw
  719        | • f_kwarg ',' f_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  725 f_opt: • f_arg_asgn f_eq arg_value
  729 f_optarg: • f_opt
  730         | • f_optarg ',' f_opt
  731 restarg_mark: • '*'
  732             | • "*"
  733 f_rest_arg: • restarg_mark "local variable or method"
  734           | • restarg_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "(..."                      shift, and go to state 535
    "("                         shift, and go to state 536
    "*"                         shift, and go to state 537
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540
    '*'                         shift, and go to state 541

    $default  reduce using rule 698 (f_args)

    f_any_kwrest  go to state 542
    p_kwnorest    go to state 543
    args_tail     go to state 544
    f_args        go to state 1003
    args_forward  go to state 546
    f_bad_arg     go to state 547
    f_norm_arg    go to state 548
    f_arg_asgn    go to state 549
    f_arg_item    go to state 550
    f_arg         go to state 551
    f_label       go to state 552
    f_kw          go to state 553
    f_kwarg       go to state 554
    kwrest_mark   go to state 555
    f_no_kwarg    go to state 556
    f_kwrest      go to state 557
    f_opt         go to state 558
    f_optarg      go to state 559
    restarg_mark  go to state 560
    f_rest_arg    go to state 561
    blkarg_mark   go to state 562
    f_block_arg   go to state 563


State 853

  450 $@30: ε •
  451 lambda: "->" @27 @28 @29 f_larglist • $@30 lambda_body

    $default  reduce using rule 450 ($@30)

    $@30  go to state 1004


State 854

  453 f_larglist: f_args •

    $default  reduce using rule 453 (f_larglist)


State 855

  629 @46: ε •
  632 string_content: tSTRING_DBEG $@44 @45 • @46 @47 @48 compstmt "'}'"

    $default  reduce using rule 629 (@46)

    @46  go to state 1005


State 856

  633 string_dvar: "global variable" •

    $default  reduce using rule 633 (string_dvar)


State 857

  634 string_dvar: "instance variable" •

    $default  reduce using rule 634 (string_dvar)


State 858

  635 string_dvar: "class variable" •

    $default  reduce using rule 635 (string_dvar)


State 859

  626 string_content: tSTRING_DVAR @43 string_dvar •

    $default  reduce using rule 626 (string_content)


State 860

  636 string_dvar: backref •

    $default  reduce using rule 636 (string_dvar)


State 861

  606 word_list: word_list word ' ' •

    $default  reduce using rule 606 (word_list)


State 862

  608 word: word string_content •

    $default  reduce using rule 608 (word)


State 863

  615 qword_list: qword_list "literal content" ' ' •

    $default  reduce using rule 615 (qword_list)


State 864

  611 symbol_list: symbol_list word ' ' •

    $default  reduce using rule 611 (symbol_list)


State 865

  617 qsym_list: qsym_list "literal content" ' ' •

    $default  reduce using rule 617 (qsym_list)


State 866

  401 f_marg: "(" f_margs • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 1006


State 867

  409 f_rest_marg: "*" f_norm_arg •

    $default  reduce using rule 409 (f_rest_marg)


State 868

  400 f_marg: • f_norm_arg
  401       | • "(" f_margs rparen
  403 f_marg_list: f_marg_list ',' • f_marg
  405 f_margs: f_marg_list ',' • f_rest_marg
  406        | f_marg_list ',' • f_rest_marg ',' f_marg_list
  409 f_rest_marg: • "*" f_norm_arg
  410            | • "*"
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "("                         shift, and go to state 718
    "*"                         shift, and go to state 719

    f_marg       go to state 1007
    f_rest_marg  go to state 1008
    f_bad_arg    go to state 547
    f_norm_arg   go to state 724


State 869

  708 f_arg_item: "(" f_margs rparen •

    $default  reduce using rule 708 (f_arg_item)


State 870

  400 f_marg: • f_norm_arg
  401       | • "(" f_margs rparen
  402 f_marg_list: • f_marg
  403            | • f_marg_list ',' f_marg
  408 f_margs: f_rest_marg ',' • f_marg_list
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "("                         shift, and go to state 718

    f_marg       go to state 720
    f_marg_list  go to state 1009
    f_bad_arg    go to state 547
    f_norm_arg   go to state 724


State 871

  739 opt_f_block_arg: ',' f_block_arg •

    $default  reduce using rule 739 (opt_f_block_arg)


State 872

  725 f_opt: f_arg_asgn f_eq arg_value •

    $default  reduce using rule 725 (f_opt)


State 873

  414 f_eq: $@26 '=' •

    $default  reduce using rule 414 (f_eq)


State 874

  682 opt_args_tail: ',' args_tail •

    $default  reduce using rule 682 (opt_args_tail)


State 875

  710 f_arg: f_arg ',' f_arg_item •

    $default  reduce using rule 710 (f_arg)


State 876

  682 opt_args_tail: • ',' args_tail
  683              | ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']
  684 f_args: f_arg ',' f_optarg • ',' f_rest_arg opt_args_tail
  685       | f_arg ',' f_optarg • ',' f_rest_arg ',' f_arg opt_args_tail
  686       | f_arg ',' f_optarg • opt_args_tail
  687       | f_arg ',' f_optarg • ',' f_arg opt_args_tail
  730 f_optarg: f_optarg • ',' f_opt

    ','  shift, and go to state 1010

    $default  reduce using rule 683 (opt_args_tail)

    opt_args_tail  go to state 1011


State 877

  682 opt_args_tail: • ',' args_tail
  683              | ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']
  688 f_args: f_arg ',' f_rest_arg • opt_args_tail
  689       | f_arg ',' f_rest_arg • ',' f_arg opt_args_tail

    ','  shift, and go to state 1012

    $default  reduce using rule 683 (opt_args_tail)

    opt_args_tail  go to state 1013


State 878

  719 f_kwarg: f_kwarg ',' f_kw •

    $default  reduce using rule 719 (f_kwarg)


State 879

  723 f_kwrest: kwrest_mark • "local variable or method"
  724         | kwrest_mark •  ["`do' for lambda", tLAMBEG, '|', ',', ')', ';', '\n']

    "local variable or method"  shift, and go to state 737

    $default  reduce using rule 724 (f_kwrest)


State 880

  677 args_tail: f_kwarg ',' f_kwrest • opt_f_block_arg
  739 opt_f_block_arg: • ',' f_block_arg
  740                | • none
  781 none: ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']

    ','  shift, and go to state 725

    $default  reduce using rule 781 (none)

    opt_f_block_arg  go to state 1014
    none             go to state 727


State 881

  682 opt_args_tail: • ',' args_tail
  683              | ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']
  694 f_args: f_optarg ',' f_arg • opt_args_tail
  710 f_arg: f_arg • ',' f_arg_item

    ','  shift, and go to state 1015

    $default  reduce using rule 683 (opt_args_tail)

    opt_args_tail  go to state 1016


State 882

  730 f_optarg: f_optarg ',' f_opt •

    $default  reduce using rule 730 (f_optarg)


State 883

  682 opt_args_tail: • ',' args_tail
  683              | ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']
  691 f_args: f_optarg ',' f_rest_arg • opt_args_tail
  692       | f_optarg ',' f_rest_arg • ',' f_arg opt_args_tail

    ','  shift, and go to state 1017

    $default  reduce using rule 683 (opt_args_tail)

    opt_args_tail  go to state 1018


State 884

  707 f_arg_item: f_arg_asgn •

    $default  reduce using rule 707 (f_arg_item)


State 885

  682 opt_args_tail: • ',' args_tail
  683              | ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']
  696 f_args: f_rest_arg ',' f_arg • opt_args_tail
  710 f_arg: f_arg • ',' f_arg_item

    ','  shift, and go to state 1015

    $default  reduce using rule 683 (opt_args_tail)

    opt_args_tail  go to state 1019


State 886

   47 command_asgn: defn_head f_opt_paren_args '=' command "`rescue' modifier" • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 1020
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 887

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  260    | defn_head f_opt_paren_args '=' arg "`rescue' modifier" • arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 1021
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 888

  361 primary: defn_head f_arglist $@24 bodystmt k_end •

    $default  reduce using rule 361 (primary)


State 889

   49 command_asgn: defs_head f_opt_paren_args '=' command "`rescue' modifier" • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 1022
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 890

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  262    | defs_head f_opt_paren_args '=' arg "`rescue' modifier" • arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 1023
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 891

  363 primary: defs_head f_arglist $@25 bodystmt k_end •

    $default  reduce using rule 363 (primary)


State 892

  437 opt_block_param: • none
  438                | • block_param_def
  439 block_param_def: • '|' opt_bv_decl '|'
  440                | • '|' block_param opt_bv_decl '|'
  476 brace_body: @32 @33 @34 • opt_block_param compstmt
  781 none: ε •  [error, "`class'", "`module'", "`def'", "`undef'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`alias'", "`defined?'", "`BEGIN'", "`END'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', '}', ';', '\n']

    '|'  shift, and go to state 1024

    $default  reduce using rule 781 (none)

    opt_block_param  go to state 1025
    block_param_def  go to state 1026
    none             go to state 1027


State 893

   79 cmd_brace_block: "{ arg" brace_body '}' •

    $default  reduce using rule 79 (cmd_brace_block)


State 894

  437 opt_block_param: • none
  438                | • block_param_def
  439 block_param_def: • '|' opt_bv_decl '|'
  440                | • '|' block_param opt_bv_decl '|'
  480 do_body: @35 @36 @37 • opt_block_param bodystmt
  781 none: ε •  [error, "`class'", "`module'", "`def'", "`undef'", "`begin'", "`rescue'", "`ensure'", "`end'", "`if'", "`unless'", "`else'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`alias'", "`defined?'", "`BEGIN'", "`END'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "dummy end", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', ';', '\n']

    '|'  shift, and go to state 1024

    $default  reduce using rule 781 (none)

    opt_block_param  go to state 1028
    block_param_def  go to state 1026
    none             go to state 1027


State 895

  300 args: "*" arg_value •  [',']
  309 mrhs: "*" arg_value •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "'}'", '}', ')', ';', '\n']

    ','       reduce using rule 300 (args)
    $default  reduce using rule 309 (mrhs)


State 896

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  302 args: args ',' • arg_value
  303     | args ',' • "*" arg_value
  304     | args ',' • "*"
  307 mrhs: args ',' • arg_value
  308     | args ',' • "*" arg_value
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 1029
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 1030
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 897

   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   35     | mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" • stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    stmt              go to state 1031
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127


State 898

   99 mlhs_basic: mlhs_head "*" mlhs_node ',' mlhs_post •  ["`in'", '=', ')', '\n']
  111 mlhs_post: mlhs_post • ',' mlhs_item

    ','  shift, and go to state 698

    $default  reduce using rule 99 (mlhs_basic)


State 899

   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   52 command_rhs: command_call "`rescue' modifier" • stmt
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    stmt              go to state 1032
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127


State 900

   39 command_asgn: lhs '=' • lex_ctxt command_rhs
  216 arg: lhs '=' • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 1033
    none      go to state 577


State 901

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  277 arg_rhs: arg "`rescue' modifier" • arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 1034
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 902

   44 command_asgn: primary_value "::" • "constant" "operator-assignment" lex_ctxt command_rhs
   45             | primary_value "::" • "local variable or method" "operator-assignment" lex_ctxt command_rhs
   85 command: primary_value "::" • operation2 command_args
   86        | primary_value "::" • operation2 command_args cmd_brace_block
  125 lhs: primary_value "::" • "local variable or method"
  127    | primary_value "::" • "constant"
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  221 arg: primary_value "::" • "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | primary_value "::" • "constant" "operator-assignment" lex_ctxt arg_rhs
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  328 primary: primary_value "::" • "constant"
  464 method_call: primary_value "::" • operation2 paren_args
  465            | primary_value "::" • operation3
  467            | primary_value "::" • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op
  759 operation3: • "local variable or method"
  760           | • "method"
  761           | • op

    "local variable or method"  shift, and go to state 1035
    "method"                    shift, and go to state 610
    "constant"                  shift, and go to state 1036
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 612
    paren_args  go to state 613
    operation   go to state 614
    operation2  go to state 615
    operation3  go to state 616


State 903

   41 command_asgn: primary_value '[' • opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  123    | primary_value '[' • opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  218    | primary_value '[' • opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  283 opt_call_args: • none
  284              | • call_args
  285              | • args ','
  286              | • args ',' assocs ','
  287              | • assocs ','
  288 call_args: • command
  289          | • args opt_block_arg
  290          | • assocs opt_block_arg
  291          | • args ',' assocs opt_block_arg
  292          | • block_arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  470            | primary_value '[' • opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  [']', '\n']

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 213
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 781 (none)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 80
    command           go to state 220
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 223
    opt_call_args     go to state 1037
    call_args         go to state 458
    block_arg         go to state 225
    args              go to state 618
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 461
    assoc             go to state 233
    operation         go to state 127
    none              go to state 462


State 904

   42 command_asgn: primary_value call_op • "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | primary_value call_op • "constant" "operator-assignment" lex_ctxt command_rhs
   83 command: primary_value call_op • operation2 command_args
   84        | primary_value call_op • operation2 command_args cmd_brace_block
  124 lhs: primary_value call_op • "local variable or method"
  126    | primary_value call_op • "constant"
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  219 arg: primary_value call_op • "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | primary_value call_op • "constant" "operator-assignment" lex_ctxt arg_rhs
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  463 method_call: primary_value call_op • operation2 opt_paren_args
  466            | primary_value call_op • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op

    "local variable or method"  shift, and go to state 1038
    "method"                    shift, and go to state 620
    "constant"                  shift, and go to state 1039
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 622
    paren_args  go to state 623
    operation   go to state 614
    operation2  go to state 624


State 905

  579 p_variable: "local variable or method" •

    $default  reduce using rule 579 (p_variable)


State 906

  585 p_const: "constant" •

    $default  reduce using rule 585 (p_const)


State 907

  552 p_kw_label: "label" •

    $default  reduce using rule 552 (p_kw_label)


State 908

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  567 p_value: "(.." • p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"

    "`self'"                shift, and go to state 23
    "`nil'"                 shift, and go to state 24
    "`true'"                shift, and go to state 25
    "`false'"               shift, and go to state 26
    "`__LINE__'"            shift, and go to state 32
    "`__FILE__'"            shift, and go to state 33
    "`__ENCODING__'"        shift, and go to state 34
    "integer literal"       shift, and go to state 41
    "float literal"         shift, and go to state 42
    "rational literal"      shift, and go to state 43
    "imaginary literal"     shift, and go to state 44
    "char literal"          shift, and go to state 45
    "->"                    shift, and go to state 58
    "symbol literal"        shift, and go to state 59
    "string literal"        shift, and go to state 60
    "backtick literal"      shift, and go to state 61
    "regexp literal"        shift, and go to state 62
    "word list"             shift, and go to state 63
    "verbatim word list"    shift, and go to state 64
    "symbol list"           shift, and go to state 65
    "verbatim symbol list"  shift, and go to state 66
    tUMINUS_NUM             shift, and go to state 283

    lambda            go to state 917
    p_primitive       go to state 1040
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947


State 909

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  568 p_value: "(..." • p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"

    "`self'"                shift, and go to state 23
    "`nil'"                 shift, and go to state 24
    "`true'"                shift, and go to state 25
    "`false'"               shift, and go to state 26
    "`__LINE__'"            shift, and go to state 32
    "`__FILE__'"            shift, and go to state 33
    "`__ENCODING__'"        shift, and go to state 34
    "integer literal"       shift, and go to state 41
    "float literal"         shift, and go to state 42
    "rational literal"      shift, and go to state 43
    "imaginary literal"     shift, and go to state 44
    "char literal"          shift, and go to state 45
    "->"                    shift, and go to state 58
    "symbol literal"        shift, and go to state 59
    "string literal"        shift, and go to state 60
    "backtick literal"      shift, and go to state 61
    "regexp literal"        shift, and go to state 62
    "word list"             shift, and go to state 63
    "verbatim word list"    shift, and go to state 64
    "symbol list"           shift, and go to state 65
    "verbatim symbol list"  shift, and go to state 66
    tUMINUS_NUM             shift, and go to state 283

    lambda            go to state 917
    p_primitive       go to state 1041
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947


State 910

  130 cname: • "local variable or method"
  131      | • "constant"
  583 p_const: ":: at EXPR_BEG" • cname

    "local variable or method"  shift, and go to state 642
    "constant"                  shift, and go to state 1042

    cname  go to state 1043


State 911

  526 @42: ε •
  527 p_expr_basic: "(" • @42 p_expr rparen

    $default  reduce using rule 526 (@42)

    @42  go to state 1044


State 912

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  503 p_expr: • p_as
  504 p_as: • p_expr "=>" p_variable
  505     | • p_alt
  506 p_alt: • p_alt '|' p_expr_basic
  507      | • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  513             | • p_const p_lparen p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  520             | "[" • p_args rbracket
  521             | • "[" p_find rbracket
  521             | "[" • p_find rbracket
  522             | • "[" rbracket
  522             | "[" • rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  528 p_args: • p_expr
  529       | • p_args_head
  530       | • p_args_head p_arg
  531       | • p_args_head p_rest
  532       | • p_args_head p_rest ',' p_args_post
  533       | • p_args_tail
  534 p_args_head: • p_arg ','
  535            | • p_args_head p_arg ','
  536 p_args_tail: • p_rest
  537            | • p_rest ',' p_args_post
  538 p_find: • p_rest ',' p_args_post ',' p_rest
  539 p_rest: • "*" "local variable or method"
  540       | • "*"
  543 p_arg: • p_expr
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  770 opt_nl: ε •  [']']
  771       | • '\n'
  773 rbracket: • opt_nl ']'

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "*"                         shift, and go to state 914
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283
    '\n'                        shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    lambda            go to state 917
    p_expr            go to state 1045
    p_as              go to state 920
    p_alt             go to state 921
    p_expr_basic      go to state 922
    p_args            go to state 1046
    p_args_head       go to state 1047
    p_args_tail       go to state 1048
    p_find            go to state 1049
    p_rest            go to state 925
    p_arg             go to state 1050
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947
    opt_nl            go to state 785
    rbracket          go to state 1051


State 913

  523 @41: ε •  ["label", "**", "**arg", "string literal"]
  524 p_expr_basic: "{" • @41 p_kwargs rbrace
  525             | "{" • rbrace
  770 opt_nl: ε •  ['}']
  771       | • '\n'
  774 rbrace: • opt_nl '}'

    '\n'  shift, and go to state 242

    '}'       reduce using rule 770 (opt_nl)
    $default  reduce using rule 523 (@41)

    @41     go to state 1052
    opt_nl  go to state 1053
    rbrace  go to state 1054


State 914

  539 p_rest: "*" • "local variable or method"
  540       | "*" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ',', ')', ']', ';', '\n']

    "local variable or method"  shift, and go to state 1055

    $default  reduce using rule 540 (p_rest)


State 915

  553 p_kw_label: "string literal" • string_contents tLABEL_END
  601 string1: "string literal" • string_contents "terminator"
  618 string_contents: ε •
  619                | • string_contents string_content

    $default  reduce using rule 618 (string_contents)

    string_contents  go to state 1056


State 916

  580 p_var_ref: '^' • "local variable or method"
  581          | '^' • nonlocal_var
  582 p_expr_ref: '^' • "(" expr_value ')'
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"

    "local variable or method"  shift, and go to state 1057
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "class variable"            shift, and go to state 40
    "("                         shift, and go to state 1058

    nonlocal_var  go to state 1059


State 917

  578 p_primitive: lambda •

    $default  reduce using rule 578 (p_primitive)


State 918

   64 expr: arg "`in'" @7 @8 p_top_expr_body •

    $default  reduce using rule 64 (expr)


State 919

  497 p_top_expr_body: p_expr •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
  498                | p_expr • ','
  499                | p_expr • ',' p_args
  504 p_as: p_expr • "=>" p_variable

    "=>"  shift, and go to state 1060
    ','   shift, and go to state 1061

    $default  reduce using rule 497 (p_top_expr_body)


State 920

  503 p_expr: p_as •

    $default  reduce using rule 503 (p_expr)


State 921

  505 p_as: p_alt •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "'}'", '}', ',', ')', ']', ';', '\n']
  506 p_alt: p_alt • '|' p_expr_basic

    '|'  shift, and go to state 1062

    $default  reduce using rule 505 (p_as)


State 922

  507 p_alt: p_expr_basic •

    $default  reduce using rule 507 (p_alt)


State 923

  501 p_top_expr_body: p_args_tail •

    $default  reduce using rule 501 (p_top_expr_body)


State 924

  500 p_top_expr_body: p_find •

    $default  reduce using rule 500 (p_top_expr_body)


State 925

  536 p_args_tail: p_rest •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ']', ';', '\n']
  537            | p_rest • ',' p_args_post
  538 p_find: p_rest • ',' p_args_post ',' p_rest

    ','  shift, and go to state 1063

    $default  reduce using rule 536 (p_args_tail)


State 926

  502 p_top_expr_body: p_kwargs •

    $default  reduce using rule 502 (p_top_expr_body)


State 927

  544 p_kwargs: p_kwarg • ',' p_any_kwrest
  545         | p_kwarg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ']', ';', '\n']
  546         | p_kwarg • ','
  549 p_kwarg: p_kwarg • ',' p_kw

    ','  shift, and go to state 1064

    $default  reduce using rule 545 (p_kwargs)


State 928

  548 p_kwarg: p_kw •

    $default  reduce using rule 548 (p_kwarg)


State 929

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  503 p_expr: • p_as
  504 p_as: • p_expr "=>" p_variable
  505     | • p_alt
  506 p_alt: • p_alt '|' p_expr_basic
  507      | • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  513             | • p_const p_lparen p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  521             | • "[" p_find rbracket
  522             | • "[" rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  550 p_kw: p_kw_label • p_expr
  551     | p_kw_label •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ',', ')', ']', ';', '\n']
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283

    $default  reduce using rule 551 (p_kw)

    lambda            go to state 917
    p_expr            go to state 1065
    p_as              go to state 920
    p_alt             go to state 921
    p_expr_basic      go to state 922
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947


State 930

  557 p_any_kwrest: p_kwrest •

    $default  reduce using rule 557 (p_any_kwrest)


State 931

  558 p_any_kwrest: p_kwnorest •

    $default  reduce using rule 558 (p_any_kwrest)


State 932

  547 p_kwargs: p_any_kwrest •

    $default  reduce using rule 547 (p_kwargs)


State 933

  510 p_expr_basic: p_value •

    $default  reduce using rule 510 (p_expr_basic)


State 934

  559 p_value: p_primitive •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "'}'", '|', '}', ',', ')', ']', ';', '\n']
  560        | p_primitive • ".." p_primitive
  561        | p_primitive • "..." p_primitive
  562        | p_primitive • ".."
  563        | p_primitive • "..."

    ".."   shift, and go to state 1066
    "..."  shift, and go to state 1067

    $default  reduce using rule 559 (p_value)


State 935

  511 p_expr_basic: p_variable •

    $default  reduce using rule 511 (p_expr_basic)


State 936

  564 p_value: p_var_ref •

    $default  reduce using rule 564 (p_value)


State 937

  565 p_value: p_expr_ref •

    $default  reduce using rule 565 (p_value)


State 938

  508 p_lparen: • '('
  509 p_lbracket: • '['
  512 p_expr_basic: p_const • p_lparen p_args rparen
  513             | p_const • p_lparen p_find rparen
  514             | p_const • p_lparen p_kwargs rparen
  515             | p_const • '(' rparen
  516             | p_const • p_lbracket p_args rbracket
  517             | p_const • p_lbracket p_find rbracket
  518             | p_const • p_lbracket p_kwargs rbracket
  519             | p_const • '[' rbracket
  566 p_value: p_const •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "'}'", '|', '}', ',', ')', ']', ';', '\n']
  584 p_const: p_const • "::" cname

    "::"  shift, and go to state 1068
    '['   shift, and go to state 1069
    '('   shift, and go to state 1070

    $default  reduce using rule 566 (p_value)

    p_lparen    go to state 1071
    p_lbracket  go to state 1072


State 939

  569 p_primitive: literal •

    $default  reduce using rule 569 (p_primitive)


State 940

  570 p_primitive: strings •

    $default  reduce using rule 570 (p_primitive)


State 941

  571 p_primitive: xstring •

    $default  reduce using rule 571 (p_primitive)


State 942

  572 p_primitive: regexp •

    $default  reduce using rule 572 (p_primitive)


State 943

  573 p_primitive: words •

    $default  reduce using rule 573 (p_primitive)


State 944

  575 p_primitive: symbols •

    $default  reduce using rule 575 (p_primitive)


State 945

  574 p_primitive: qwords •

    $default  reduce using rule 574 (p_primitive)


State 946

  576 p_primitive: qsymbols •

    $default  reduce using rule 576 (p_primitive)


State 947

  577 p_primitive: keyword_variable •

    $default  reduce using rule 577 (p_primitive)


State 948

  554 p_kwrest: kwrest_mark • "local variable or method"
  555         | kwrest_mark •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ']', ';', '\n']
  556 p_kwnorest: kwrest_mark • "`nil'"

    "`nil'"                     shift, and go to state 736
    "local variable or method"  shift, and go to state 1073

    $default  reduce using rule 555 (p_kwrest)


State 949

   61 expr: arg "=>" @5 @6 p_top_expr_body •

    $default  reduce using rule 61 (expr)


State 950

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  258    | arg '?' arg opt_nl ':' • arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 1074
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 951

   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   45             | primary_value "::" "local variable or method" "operator-assignment" lex_ctxt • command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   51 command_rhs: • command_call
   52            | • command_call "`rescue' modifier" stmt
   53            | • command_asgn
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  221    | primary_value "::" "local variable or method" "operator-assignment" lex_ctxt • arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    command_asgn      go to state 768
    command_rhs       go to state 1075
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 770
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 771
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 1076
    primary           go to state 90
    primary_value     go to state 776
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 777
    operation         go to state 127


State 952

   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   44             | primary_value "::" "constant" "operator-assignment" lex_ctxt • command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   51 command_rhs: • command_call
   52            | • command_call "`rescue' modifier" stmt
   53            | • command_asgn
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  222    | primary_value "::" "constant" "operator-assignment" lex_ctxt • arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    command_asgn      go to state 768
    command_rhs       go to state 1077
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 770
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 771
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 1078
    primary           go to state 90
    primary_value     go to state 776
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 777
    operation         go to state 127


State 953

   86 command: primary_value "::" operation2 command_args cmd_brace_block •

    $default  reduce using rule 86 (command)


State 954

  773 rbracket: opt_nl ']' •

    $default  reduce using rule 773 (rbracket)


State 955

   41 command_asgn: primary_value '[' opt_call_args rbracket "operator-assignment" • lex_ctxt command_rhs
  218 arg: primary_value '[' opt_call_args rbracket "operator-assignment" • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 1079
    none      go to state 577


State 956

   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   42             | primary_value call_op "local variable or method" "operator-assignment" lex_ctxt • command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   51 command_rhs: • command_call
   52            | • command_call "`rescue' modifier" stmt
   53            | • command_asgn
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  219    | primary_value call_op "local variable or method" "operator-assignment" lex_ctxt • arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    command_asgn      go to state 768
    command_rhs       go to state 1080
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 770
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 771
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 1081
    primary           go to state 90
    primary_value     go to state 776
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 777
    operation         go to state 127


State 957

   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   43             | primary_value call_op "constant" "operator-assignment" lex_ctxt • command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   51 command_rhs: • command_call
   52            | • command_call "`rescue' modifier" stmt
   53            | • command_asgn
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  220    | primary_value call_op "constant" "operator-assignment" lex_ctxt • arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    command_asgn      go to state 768
    command_rhs       go to state 1082
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 770
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 771
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 1083
    primary           go to state 90
    primary_value     go to state 776
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 777
    operation         go to state 127


State 958

   84 command: primary_value call_op operation2 command_args cmd_brace_block •

    $default  reduce using rule 84 (command)


State 959

  299 args: arg_value •  [',']
  588 exc_list: arg_value •  ["`then'", "=>", ';', '\n']

    ','       reduce using rule 299 (args)
    $default  reduce using rule 588 (exc_list)


State 960

  589 exc_list: mrhs •

    $default  reduce using rule 589 (exc_list)


State 961

  586 opt_rescue: k_rescue exc_list • exc_var then compstmt opt_rescue
  591 exc_var: • "=>" lhs
  592        | • none
  781 none: ε •  ["`then'", ';', '\n']

    "=>"  shift, and go to state 1084

    $default  reduce using rule 781 (none)

    exc_var  go to state 1085
    none     go to state 1086


State 962

  590 exc_list: none •

    $default  reduce using rule 590 (exc_list)


State 963

  382 k_ensure: "`ensure'" •

    $default  reduce using rule 382 (k_ensure)


State 964

  384 k_else: "`else'" •

    $default  reduce using rule 384 (k_else)


State 965

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  593 opt_ensure: k_ensure • compstmt
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`end'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`end'"      reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    compstmt          go to state 1087
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 966

   10 $@2: ε •
   11 bodystmt: compstmt opt_rescue k_else • $@2 compstmt opt_ensure

    $default  reduce using rule 10 ($@2)

    $@2  go to state 1088


State 967

   12 bodystmt: compstmt opt_rescue opt_ensure •

    $default  reduce using rule 12 (bodystmt)


State 968

  594 opt_ensure: none •

    $default  reduce using rule 594 (opt_ensure)


State 969

  385 k_elsif: "`elsif'" •

    $default  reduce using rule 385 (k_elsif)


State 970

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  397 opt_else: k_else • compstmt
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`end'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`end'"      reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    compstmt          go to state 1089
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 971

   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   70 expr_value: • expr
   71           | • error
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  395 if_tail: k_elsif • expr_value then compstmt if_tail
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 380
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 381
    defn_head         go to state 218
    defs_head         go to state 219
    expr_value        go to state 1090
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 972

  344 primary: k_if expr_value then compstmt if_tail • k_end
  386 k_end: • "`end'"
  387      | • "dummy end"

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 1091


State 973

  394 if_tail: opt_else •

    $default  reduce using rule 394 (if_tail)


State 974

  396 opt_else: none •

    $default  reduce using rule 396 (opt_else)


State 975

  345 primary: k_unless expr_value then compstmt opt_else • k_end
  386 k_end: • "`end'"
  387      | • "dummy end"

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 1092


State 976

   74 expr_value_do: $@10 expr_value do $@11 •

    $default  reduce using rule 74 (expr_value_do)


State 977

  489 @39: ε •
  491 p_case_body: "`in'" @38 • @39 p_top_expr then $@40 compstmt p_cases

    $default  reduce using rule 489 (@39)

    @39  go to state 1093


State 978

  349 primary: k_case expr_value opt_terms @19 case_body • k_end
  386 k_end: • "`end'"
  387      | • "dummy end"

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 1094


State 979

  352 primary: k_case expr_value opt_terms p_case_body k_end •

    $default  reduce using rule 352 (primary)


State 980

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  482 case_args: "*" • arg_value
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 1095
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 981

  481 case_args: arg_value •

    $default  reduce using rule 481 (case_args)


State 982

  389 then: • term
  390     | • "`then'"
  391     | • term "`then'"
  483 case_args: case_args • ',' arg_value
  484          | case_args • ',' "*" arg_value
  485 case_body: k_when case_args • then compstmt cases
  777 term: • ';'
  778     | • '\n'

    "`then'"  shift, and go to state 627
    ','       shift, and go to state 1096
    ';'       shift, and go to state 309
    '\n'      shift, and go to state 310

    then  go to state 1097
    term  go to state 629


State 983

  351 primary: k_case opt_terms @20 case_body k_end •

    $default  reduce using rule 351 (primary)


State 984

  114 mlhs_node: primary_value '[' opt_call_args rbracket •  [',']
  123 lhs: primary_value '[' opt_call_args rbracket •  ["`in'"]
  470 method_call: primary_value '[' opt_call_args rbracket •  ["`do'", '.', "&.", "::", '{', '[']

    "`in'"    reduce using rule 123 (lhs)
    ','       reduce using rule 114 (mlhs_node)
    $default  reduce using rule 470 (method_call)


State 985

  353 primary: k_for for_var "`in'" expr_value_do compstmt • k_end
  386 k_end: • "`end'"
  387      | • "dummy end"

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 1098


State 986

   11 bodystmt: • compstmt opt_rescue k_else $@2 compstmt opt_ensure
   12         | • compstmt opt_rescue opt_ensure
   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  357        | k_class "<<" expr $@22 term • bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`rescue'", "`ensure'", "`end'", "`else'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`rescue'"   reduce using rule 781 (none)
    "`ensure'"   reduce using rule 781 (none)
    "`end'"      reduce using rule 781 (none)
    "`else'"     reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    bodystmt          go to state 1099
    compstmt          go to state 626
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 987

  669 superclass: '<' $@49 expr_value • term
  777 term: • ';'
  778     | • '\n'

    ';'   shift, and go to state 309
    '\n'  shift, and go to state 310

    term  go to state 1100


State 988

  355 primary: k_class cpath superclass $@21 bodystmt • k_end
  386 k_end: • "`end'"
  387      | • "dummy end"

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 1101


State 989

  470 method_call: primary_value '[' opt_call_args rbracket •

    $default  reduce using rule 470 (method_call)


State 990

  359 primary: k_module cpath $@23 bodystmt k_end •

    $default  reduce using rule 359 (primary)


State 991

  743 singleton: '(' $@51 expr rparen •

    $default  reduce using rule 743 (singleton)


State 992

   69 defs_head: k_def singleton dot_or_colon $@9 def_name •

    $default  reduce using rule 69 (defs_head)


State 993

  460 block_call: block_call call_op2 operation2 opt_paren_args brace_block •

    $default  reduce using rule 460 (block_call)


State 994

  461 block_call: block_call call_op2 operation2 command_args do_block •

    $default  reduce using rule 461 (block_call)


State 995

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  221    | primary_value "::" "local variable or method" "operator-assignment" lex_ctxt • arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 1076
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 996

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  222    | primary_value "::" "constant" "operator-assignment" lex_ctxt • arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 1078
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 997

  218 arg: primary_value '[' opt_call_args rbracket "operator-assignment" • lex_ctxt arg_rhs
  270 lex_ctxt: • none
  781 none: ε •

    $default  reduce using rule 781 (none)

    lex_ctxt  go to state 1102
    none      go to state 577


State 998

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  219    | primary_value call_op "local variable or method" "operator-assignment" lex_ctxt • arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 1081
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 999

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  220    | primary_value call_op "constant" "operator-assignment" lex_ctxt • arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 1083
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 1000

  279 paren_args: '(' args ',' args_forward rparen •

    $default  reduce using rule 279 (paren_args)


State 1001

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  286 opt_call_args: args ',' assocs ',' •  [')', ']', '\n']
  295 block_arg: • "&" arg_value
  296          | • "&"
  297 opt_block_arg: ',' • block_arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  747 assocs: assocs ',' • assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 286 (opt_call_args)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 277
    block_arg         go to state 668
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assoc             go to state 677
    operation         go to state 127


State 1002

  337 primary: "`defined?'" opt_nl '(' $@18 expr rparen •

    $default  reduce using rule 337 (primary)


State 1003

  441 opt_bv_decl: • opt_nl
  442            | • opt_nl ';' bv_decls opt_nl
  452 f_larglist: '(' f_args • opt_bv_decl ')'
  770 opt_nl: ε •  [')', ';']
  771       | • '\n'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_bv_decl  go to state 1103
    opt_nl       go to state 1104


State 1004

  451 lambda: "->" @27 @28 @29 f_larglist $@30 • lambda_body
  454 lambda_body: • tLAMBEG compstmt '}'
  456            | • "`do' for lambda" $@31 bodystmt k_end

    "`do' for lambda"  shift, and go to state 1105
    tLAMBEG            shift, and go to state 1106

    lambda_body  go to state 1107


State 1005

  630 @47: ε •
  632 string_content: tSTRING_DBEG $@44 @45 @46 • @47 @48 compstmt "'}'"

    $default  reduce using rule 630 (@47)

    @47  go to state 1108


State 1006

  401 f_marg: "(" f_margs rparen •

    $default  reduce using rule 401 (f_marg)


State 1007

  403 f_marg_list: f_marg_list ',' f_marg •

    $default  reduce using rule 403 (f_marg_list)


State 1008

  405 f_margs: f_marg_list ',' f_rest_marg •  [')', '\n']
  406        | f_marg_list ',' f_rest_marg • ',' f_marg_list

    ','  shift, and go to state 1109

    $default  reduce using rule 405 (f_margs)


State 1009

  403 f_marg_list: f_marg_list • ',' f_marg
  408 f_margs: f_rest_marg ',' f_marg_list •  [')', '\n']

    ','  shift, and go to state 1110

    $default  reduce using rule 408 (f_margs)


State 1010

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  556 p_kwnorest: • kwrest_mark "`nil'"
  677 args_tail: • f_kwarg ',' f_kwrest opt_f_block_arg
  678          | • f_kwarg opt_f_block_arg
  679          | • f_any_kwrest opt_f_block_arg
  680          | • f_block_arg
  681          | • args_forward
  682 opt_args_tail: ',' • args_tail
  684 f_args: f_arg ',' f_optarg ',' • f_rest_arg opt_args_tail
  685       | f_arg ',' f_optarg ',' • f_rest_arg ',' f_arg opt_args_tail
  687       | f_arg ',' f_optarg ',' • f_arg opt_args_tail
  699 args_forward: • "(..."
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  712 f_kw: • f_label arg_value
  713     | • f_label
  718 f_kwarg: • f_kw
  719        | • f_kwarg ',' f_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  725 f_opt: • f_arg_asgn f_eq arg_value
  730 f_optarg: f_optarg ',' • f_opt
  731 restarg_mark: • '*'
  732             | • "*"
  733 f_rest_arg: • restarg_mark "local variable or method"
  734           | • restarg_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "(..."                      shift, and go to state 535
    "("                         shift, and go to state 536
    "*"                         shift, and go to state 537
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540
    '*'                         shift, and go to state 541

    f_any_kwrest  go to state 542
    p_kwnorest    go to state 543
    args_tail     go to state 874
    args_forward  go to state 546
    f_bad_arg     go to state 547
    f_norm_arg    go to state 548
    f_arg_asgn    go to state 549
    f_arg_item    go to state 550
    f_arg         go to state 1111
    f_label       go to state 552
    f_kw          go to state 553
    f_kwarg       go to state 554
    kwrest_mark   go to state 555
    f_no_kwarg    go to state 556
    f_kwrest      go to state 557
    f_opt         go to state 882
    restarg_mark  go to state 560
    f_rest_arg    go to state 1112
    blkarg_mark   go to state 562
    f_block_arg   go to state 563


State 1011

  686 f_args: f_arg ',' f_optarg opt_args_tail •

    $default  reduce using rule 686 (f_args)


State 1012

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  556 p_kwnorest: • kwrest_mark "`nil'"
  677 args_tail: • f_kwarg ',' f_kwrest opt_f_block_arg
  678          | • f_kwarg opt_f_block_arg
  679          | • f_any_kwrest opt_f_block_arg
  680          | • f_block_arg
  681          | • args_forward
  682 opt_args_tail: ',' • args_tail
  689 f_args: f_arg ',' f_rest_arg ',' • f_arg opt_args_tail
  699 args_forward: • "(..."
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  712 f_kw: • f_label arg_value
  713     | • f_label
  718 f_kwarg: • f_kw
  719        | • f_kwarg ',' f_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "(..."                      shift, and go to state 535
    "("                         shift, and go to state 536
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540

    f_any_kwrest  go to state 542
    p_kwnorest    go to state 543
    args_tail     go to state 874
    args_forward  go to state 546
    f_bad_arg     go to state 547
    f_norm_arg    go to state 548
    f_arg_asgn    go to state 884
    f_arg_item    go to state 550
    f_arg         go to state 1113
    f_label       go to state 552
    f_kw          go to state 553
    f_kwarg       go to state 554
    kwrest_mark   go to state 555
    f_no_kwarg    go to state 556
    f_kwrest      go to state 557
    blkarg_mark   go to state 562
    f_block_arg   go to state 563


State 1013

  688 f_args: f_arg ',' f_rest_arg opt_args_tail •

    $default  reduce using rule 688 (f_args)


State 1014

  677 args_tail: f_kwarg ',' f_kwrest opt_f_block_arg •

    $default  reduce using rule 677 (args_tail)


State 1015

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  556 p_kwnorest: • kwrest_mark "`nil'"
  677 args_tail: • f_kwarg ',' f_kwrest opt_f_block_arg
  678          | • f_kwarg opt_f_block_arg
  679          | • f_any_kwrest opt_f_block_arg
  680          | • f_block_arg
  681          | • args_forward
  682 opt_args_tail: ',' • args_tail
  699 args_forward: • "(..."
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  710 f_arg: f_arg ',' • f_arg_item
  711 f_label: • "label"
  712 f_kw: • f_label arg_value
  713     | • f_label
  718 f_kwarg: • f_kw
  719        | • f_kwarg ',' f_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "(..."                      shift, and go to state 535
    "("                         shift, and go to state 536
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540

    f_any_kwrest  go to state 542
    p_kwnorest    go to state 543
    args_tail     go to state 874
    args_forward  go to state 546
    f_bad_arg     go to state 547
    f_norm_arg    go to state 548
    f_arg_asgn    go to state 884
    f_arg_item    go to state 875
    f_label       go to state 552
    f_kw          go to state 553
    f_kwarg       go to state 554
    kwrest_mark   go to state 555
    f_no_kwarg    go to state 556
    f_kwrest      go to state 557
    blkarg_mark   go to state 562
    f_block_arg   go to state 563


State 1016

  694 f_args: f_optarg ',' f_arg opt_args_tail •

    $default  reduce using rule 694 (f_args)


State 1017

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  556 p_kwnorest: • kwrest_mark "`nil'"
  677 args_tail: • f_kwarg ',' f_kwrest opt_f_block_arg
  678          | • f_kwarg opt_f_block_arg
  679          | • f_any_kwrest opt_f_block_arg
  680          | • f_block_arg
  681          | • args_forward
  682 opt_args_tail: ',' • args_tail
  692 f_args: f_optarg ',' f_rest_arg ',' • f_arg opt_args_tail
  699 args_forward: • "(..."
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  712 f_kw: • f_label arg_value
  713     | • f_label
  718 f_kwarg: • f_kw
  719        | • f_kwarg ',' f_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "(..."                      shift, and go to state 535
    "("                         shift, and go to state 536
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540

    f_any_kwrest  go to state 542
    p_kwnorest    go to state 543
    args_tail     go to state 874
    args_forward  go to state 546
    f_bad_arg     go to state 547
    f_norm_arg    go to state 548
    f_arg_asgn    go to state 884
    f_arg_item    go to state 550
    f_arg         go to state 1114
    f_label       go to state 552
    f_kw          go to state 553
    f_kwarg       go to state 554
    kwrest_mark   go to state 555
    f_no_kwarg    go to state 556
    f_kwrest      go to state 557
    blkarg_mark   go to state 562
    f_block_arg   go to state 563


State 1018

  691 f_args: f_optarg ',' f_rest_arg opt_args_tail •

    $default  reduce using rule 691 (f_args)


State 1019

  696 f_args: f_rest_arg ',' f_arg opt_args_tail •

    $default  reduce using rule 696 (f_args)


State 1020

   47 command_asgn: defn_head f_opt_paren_args '=' command "`rescue' modifier" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"   shift, and go to state 345
    "<=>"  shift, and go to state 346
    "=="   shift, and go to state 347
    "==="  shift, and go to state 348
    "!="   shift, and go to state 349
    ">="   shift, and go to state 350
    "<="   shift, and go to state 351
    "&&"   shift, and go to state 352
    "||"   shift, and go to state 353
    "=~"   shift, and go to state 354
    "!~"   shift, and go to state 355
    ".."   shift, and go to state 356
    "..."  shift, and go to state 357
    "<<"   shift, and go to state 358
    ">>"   shift, and go to state 359
    '?'    shift, and go to state 361
    '>'    shift, and go to state 362
    '<'    shift, and go to state 363
    '|'    shift, and go to state 364
    '^'    shift, and go to state 365
    '&'    shift, and go to state 366
    '+'    shift, and go to state 367
    '-'    shift, and go to state 368
    '*'    shift, and go to state 369
    '/'    shift, and go to state 370
    '%'    shift, and go to state 371

    $default  reduce using rule 47 (command_asgn)

    relop  go to state 372


State 1021

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  260    | defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "{ arg", "'}'", tLAMBEG, ':', '}', ',', ')', ']', ';', '\n']
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"   shift, and go to state 345
    "<=>"  shift, and go to state 346
    "=="   shift, and go to state 347
    "==="  shift, and go to state 348
    "!="   shift, and go to state 349
    ">="   shift, and go to state 350
    "<="   shift, and go to state 351
    "&&"   shift, and go to state 352
    "||"   shift, and go to state 353
    "=~"   shift, and go to state 354
    "!~"   shift, and go to state 355
    ".."   shift, and go to state 356
    "..."  shift, and go to state 357
    "<<"   shift, and go to state 358
    ">>"   shift, and go to state 359
    '?'    shift, and go to state 361
    '>'    shift, and go to state 362
    '<'    shift, and go to state 363
    '|'    shift, and go to state 364
    '^'    shift, and go to state 365
    '&'    shift, and go to state 366
    '+'    shift, and go to state 367
    '-'    shift, and go to state 368
    '*'    shift, and go to state 369
    '/'    shift, and go to state 370
    '%'    shift, and go to state 371

    $default  reduce using rule 260 (arg)

    relop  go to state 372

    Conflict between rule 260 and token "**" resolved as shift ("`rescue' modifier" < "**").
    Conflict between rule 260 and token "<=>" resolved as shift ("`rescue' modifier" < "<=>").
    Conflict between rule 260 and token "==" resolved as shift ("`rescue' modifier" < "==").
    Conflict between rule 260 and token "===" resolved as shift ("`rescue' modifier" < "===").
    Conflict between rule 260 and token "!=" resolved as shift ("`rescue' modifier" < "!=").
    Conflict between rule 260 and token ">=" resolved as shift ("`rescue' modifier" < ">=").
    Conflict between rule 260 and token "<=" resolved as shift ("`rescue' modifier" < "<=").
    Conflict between rule 260 and token "&&" resolved as shift ("`rescue' modifier" < "&&").
    Conflict between rule 260 and token "||" resolved as shift ("`rescue' modifier" < "||").
    Conflict between rule 260 and token "=~" resolved as shift ("`rescue' modifier" < "=~").
    Conflict between rule 260 and token "!~" resolved as shift ("`rescue' modifier" < "!~").
    Conflict between rule 260 and token ".." resolved as shift ("`rescue' modifier" < "..").
    Conflict between rule 260 and token "..." resolved as shift ("`rescue' modifier" < "...").
    Conflict between rule 260 and token "<<" resolved as shift ("`rescue' modifier" < "<<").
    Conflict between rule 260 and token ">>" resolved as shift ("`rescue' modifier" < ">>").
    Conflict between rule 260 and token '?' resolved as shift ("`rescue' modifier" < '?').
    Conflict between rule 260 and token '>' resolved as shift ("`rescue' modifier" < '>').
    Conflict between rule 260 and token '<' resolved as shift ("`rescue' modifier" < '<').
    Conflict between rule 260 and token '|' resolved as shift ("`rescue' modifier" < '|').
    Conflict between rule 260 and token '^' resolved as shift ("`rescue' modifier" < '^').
    Conflict between rule 260 and token '&' resolved as shift ("`rescue' modifier" < '&').
    Conflict between rule 260 and token '+' resolved as shift ("`rescue' modifier" < '+').
    Conflict between rule 260 and token '-' resolved as shift ("`rescue' modifier" < '-').
    Conflict between rule 260 and token '*' resolved as shift ("`rescue' modifier" < '*').
    Conflict between rule 260 and token '/' resolved as shift ("`rescue' modifier" < '/').
    Conflict between rule 260 and token '%' resolved as shift ("`rescue' modifier" < '%').


State 1022

   49 command_asgn: defs_head f_opt_paren_args '=' command "`rescue' modifier" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"   shift, and go to state 345
    "<=>"  shift, and go to state 346
    "=="   shift, and go to state 347
    "==="  shift, and go to state 348
    "!="   shift, and go to state 349
    ">="   shift, and go to state 350
    "<="   shift, and go to state 351
    "&&"   shift, and go to state 352
    "||"   shift, and go to state 353
    "=~"   shift, and go to state 354
    "!~"   shift, and go to state 355
    ".."   shift, and go to state 356
    "..."  shift, and go to state 357
    "<<"   shift, and go to state 358
    ">>"   shift, and go to state 359
    '?'    shift, and go to state 361
    '>'    shift, and go to state 362
    '<'    shift, and go to state 363
    '|'    shift, and go to state 364
    '^'    shift, and go to state 365
    '&'    shift, and go to state 366
    '+'    shift, and go to state 367
    '-'    shift, and go to state 368
    '*'    shift, and go to state 369
    '/'    shift, and go to state 370
    '%'    shift, and go to state 371

    $default  reduce using rule 49 (command_asgn)

    relop  go to state 372


State 1023

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  262    | defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "{ arg", "'}'", tLAMBEG, ':', '}', ',', ')', ']', ';', '\n']
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"   shift, and go to state 345
    "<=>"  shift, and go to state 346
    "=="   shift, and go to state 347
    "==="  shift, and go to state 348
    "!="   shift, and go to state 349
    ">="   shift, and go to state 350
    "<="   shift, and go to state 351
    "&&"   shift, and go to state 352
    "||"   shift, and go to state 353
    "=~"   shift, and go to state 354
    "!~"   shift, and go to state 355
    ".."   shift, and go to state 356
    "..."  shift, and go to state 357
    "<<"   shift, and go to state 358
    ">>"   shift, and go to state 359
    '?'    shift, and go to state 361
    '>'    shift, and go to state 362
    '<'    shift, and go to state 363
    '|'    shift, and go to state 364
    '^'    shift, and go to state 365
    '&'    shift, and go to state 366
    '+'    shift, and go to state 367
    '-'    shift, and go to state 368
    '*'    shift, and go to state 369
    '/'    shift, and go to state 370
    '%'    shift, and go to state 371

    $default  reduce using rule 262 (arg)

    relop  go to state 372

    Conflict between rule 262 and token "**" resolved as shift ("`rescue' modifier" < "**").
    Conflict between rule 262 and token "<=>" resolved as shift ("`rescue' modifier" < "<=>").
    Conflict between rule 262 and token "==" resolved as shift ("`rescue' modifier" < "==").
    Conflict between rule 262 and token "===" resolved as shift ("`rescue' modifier" < "===").
    Conflict between rule 262 and token "!=" resolved as shift ("`rescue' modifier" < "!=").
    Conflict between rule 262 and token ">=" resolved as shift ("`rescue' modifier" < ">=").
    Conflict between rule 262 and token "<=" resolved as shift ("`rescue' modifier" < "<=").
    Conflict between rule 262 and token "&&" resolved as shift ("`rescue' modifier" < "&&").
    Conflict between rule 262 and token "||" resolved as shift ("`rescue' modifier" < "||").
    Conflict between rule 262 and token "=~" resolved as shift ("`rescue' modifier" < "=~").
    Conflict between rule 262 and token "!~" resolved as shift ("`rescue' modifier" < "!~").
    Conflict between rule 262 and token ".." resolved as shift ("`rescue' modifier" < "..").
    Conflict between rule 262 and token "..." resolved as shift ("`rescue' modifier" < "...").
    Conflict between rule 262 and token "<<" resolved as shift ("`rescue' modifier" < "<<").
    Conflict between rule 262 and token ">>" resolved as shift ("`rescue' modifier" < ">>").
    Conflict between rule 262 and token '?' resolved as shift ("`rescue' modifier" < '?').
    Conflict between rule 262 and token '>' resolved as shift ("`rescue' modifier" < '>').
    Conflict between rule 262 and token '<' resolved as shift ("`rescue' modifier" < '<').
    Conflict between rule 262 and token '|' resolved as shift ("`rescue' modifier" < '|').
    Conflict between rule 262 and token '^' resolved as shift ("`rescue' modifier" < '^').
    Conflict between rule 262 and token '&' resolved as shift ("`rescue' modifier" < '&').
    Conflict between rule 262 and token '+' resolved as shift ("`rescue' modifier" < '+').
    Conflict between rule 262 and token '-' resolved as shift ("`rescue' modifier" < '-').
    Conflict between rule 262 and token '*' resolved as shift ("`rescue' modifier" < '*').
    Conflict between rule 262 and token '/' resolved as shift ("`rescue' modifier" < '/').
    Conflict between rule 262 and token '%' resolved as shift ("`rescue' modifier" < '%').


State 1024

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  415 block_args_tail: • f_block_kwarg ',' f_kwrest opt_f_block_arg
  416                | • f_block_kwarg opt_f_block_arg
  417                | • f_any_kwrest opt_f_block_arg
  418                | • f_block_arg
  422 block_param: • f_arg ',' f_block_optarg ',' f_rest_arg opt_block_args_tail
  423            | • f_arg ',' f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail
  424            | • f_arg ',' f_block_optarg opt_block_args_tail
  425            | • f_arg ',' f_block_optarg ',' f_arg opt_block_args_tail
  426            | • f_arg ',' f_rest_arg opt_block_args_tail
  427            | • f_arg excessed_comma
  428            | • f_arg ',' f_rest_arg ',' f_arg opt_block_args_tail
  429            | • f_arg opt_block_args_tail
  430            | • f_block_optarg ',' f_rest_arg opt_block_args_tail
  431            | • f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail
  432            | • f_block_optarg opt_block_args_tail
  433            | • f_block_optarg ',' f_arg opt_block_args_tail
  434            | • f_rest_arg opt_block_args_tail
  435            | • f_rest_arg ',' f_arg opt_block_args_tail
  436            | • block_args_tail
  439 block_param_def: '|' • opt_bv_decl '|'
  440                | '|' • block_param opt_bv_decl '|'
  441 opt_bv_decl: • opt_nl
  442            | • opt_nl ';' bv_decls opt_nl
  556 p_kwnorest: • kwrest_mark "`nil'"
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  714 f_block_kw: • f_label primary_value
  715           | • f_label
  716 f_block_kwarg: • f_block_kw
  717              | • f_block_kwarg ',' f_block_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  726 f_block_opt: • f_arg_asgn f_eq primary_value
  727 f_block_optarg: • f_block_opt
  728               | • f_block_optarg ',' f_block_opt
  731 restarg_mark: • '*'
  732             | • "*"
  733 f_rest_arg: • restarg_mark "local variable or method"
  734           | • restarg_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark
  770 opt_nl: ε •  ['|', ';']
  771       | • '\n'

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "("                         shift, and go to state 536
    "*"                         shift, and go to state 537
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540
    '*'                         shift, and go to state 541
    '\n'                        shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    f_any_kwrest     go to state 1115
    block_args_tail  go to state 1116
    block_param      go to state 1117
    opt_bv_decl      go to state 1118
    p_kwnorest       go to state 543
    f_bad_arg        go to state 547
    f_norm_arg       go to state 548
    f_arg_asgn       go to state 1119
    f_arg_item       go to state 550
    f_arg            go to state 1120
    f_label          go to state 1121
    f_block_kw       go to state 1122
    f_block_kwarg    go to state 1123
    kwrest_mark      go to state 555
    f_no_kwarg       go to state 556
    f_kwrest         go to state 557
    f_block_opt      go to state 1124
    f_block_optarg   go to state 1125
    restarg_mark     go to state 560
    f_rest_arg       go to state 1126
    blkarg_mark      go to state 562
    f_block_arg      go to state 1127
    opt_nl           go to state 1104


State 1025

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  476 brace_body: @32 @33 @34 opt_block_param • compstmt
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ['}', ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    '}'   reduce using rule 781 (none)
    ';'   reduce using rule 781 (none)
    '\n'  reduce using rule 781 (none)

    compstmt          go to state 1128
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 1026

  438 opt_block_param: block_param_def •

    $default  reduce using rule 438 (opt_block_param)


State 1027

  437 opt_block_param: none •

    $default  reduce using rule 437 (opt_block_param)


State 1028

   11 bodystmt: • compstmt opt_rescue k_else $@2 compstmt opt_ensure
   12         | • compstmt opt_rescue opt_ensure
   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  480 do_body: @35 @36 @37 opt_block_param • bodystmt
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`rescue'", "`ensure'", "`end'", "`else'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`rescue'"   reduce using rule 781 (none)
    "`ensure'"   reduce using rule 781 (none)
    "`end'"      reduce using rule 781 (none)
    "`else'"     reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    bodystmt          go to state 1129
    compstmt          go to state 626
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 1029

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  303 args: args ',' "*" • arg_value
  304     | args ',' "*" •  [',']
  308 mrhs: args ',' "*" • arg_value
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 304 (args)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 1130
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 1030

  302 args: args ',' arg_value •  [',']
  307 mrhs: args ',' arg_value •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "'}'", '}', ')', ';', '\n']

    ','       reduce using rule 302 (args)
    $default  reduce using rule 307 (mrhs)


State 1031

   26 stmt: stmt • "`if' modifier" expr_value
   27     | stmt • "`unless' modifier" expr_value
   28     | stmt • "`while' modifier" expr_value
   29     | stmt • "`until' modifier" expr_value
   30     | stmt • "`rescue' modifier" stmt
   35     | mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']

    $default  reduce using rule 35 (stmt)

    Conflict between rule 35 and token "`if' modifier" resolved as reduce ("`if' modifier" < "`rescue' modifier").
    Conflict between rule 35 and token "`unless' modifier" resolved as reduce ("`unless' modifier" < "`rescue' modifier").
    Conflict between rule 35 and token "`while' modifier" resolved as reduce ("`while' modifier" < "`rescue' modifier").
    Conflict between rule 35 and token "`until' modifier" resolved as reduce ("`until' modifier" < "`rescue' modifier").
    Conflict between rule 35 and token "`rescue' modifier" resolved as reduce (%left "`rescue' modifier").


State 1032

   26 stmt: stmt • "`if' modifier" expr_value
   27     | stmt • "`unless' modifier" expr_value
   28     | stmt • "`while' modifier" expr_value
   29     | stmt • "`until' modifier" expr_value
   30     | stmt • "`rescue' modifier" stmt
   52 command_rhs: command_call "`rescue' modifier" stmt •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']

    $default  reduce using rule 52 (command_rhs)

    Conflict between rule 52 and token "`if' modifier" resolved as reduce ("`if' modifier" < "`rescue' modifier").
    Conflict between rule 52 and token "`unless' modifier" resolved as reduce ("`unless' modifier" < "`rescue' modifier").
    Conflict between rule 52 and token "`while' modifier" resolved as reduce ("`while' modifier" < "`rescue' modifier").
    Conflict between rule 52 and token "`until' modifier" resolved as reduce ("`until' modifier" < "`rescue' modifier").
    Conflict between rule 52 and token "`rescue' modifier" resolved as reduce (%left "`rescue' modifier").


State 1033

   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   39             | lhs '=' lex_ctxt • command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   51 command_rhs: • command_call
   52            | • command_call "`rescue' modifier" stmt
   53            | • command_asgn
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  216    | lhs '=' lex_ctxt • arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    command_asgn      go to state 768
    command_rhs       go to state 769
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 770
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 771
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 774
    primary           go to state 90
    primary_value     go to state 776
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 777
    operation         go to state 127


State 1034

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg
  277 arg_rhs: arg "`rescue' modifier" arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "{ arg", "'}'", tLAMBEG, ':', '}', ',', ')', ']', ';', '\n']

    "**"   shift, and go to state 345
    "<=>"  shift, and go to state 346
    "=="   shift, and go to state 347
    "==="  shift, and go to state 348
    "!="   shift, and go to state 349
    ">="   shift, and go to state 350
    "<="   shift, and go to state 351
    "&&"   shift, and go to state 352
    "||"   shift, and go to state 353
    "=~"   shift, and go to state 354
    "!~"   shift, and go to state 355
    ".."   shift, and go to state 356
    "..."  shift, and go to state 357
    "<<"   shift, and go to state 358
    ">>"   shift, and go to state 359
    '?'    shift, and go to state 361
    '>'    shift, and go to state 362
    '<'    shift, and go to state 363
    '|'    shift, and go to state 364
    '^'    shift, and go to state 365
    '&'    shift, and go to state 366
    '+'    shift, and go to state 367
    '-'    shift, and go to state 368
    '*'    shift, and go to state 369
    '/'    shift, and go to state 370
    '%'    shift, and go to state 371

    $default  reduce using rule 277 (arg_rhs)

    relop  go to state 372

    Conflict between rule 277 and token "**" resolved as shift ("`rescue' modifier" < "**").
    Conflict between rule 277 and token "<=>" resolved as shift ("`rescue' modifier" < "<=>").
    Conflict between rule 277 and token "==" resolved as shift ("`rescue' modifier" < "==").
    Conflict between rule 277 and token "===" resolved as shift ("`rescue' modifier" < "===").
    Conflict between rule 277 and token "!=" resolved as shift ("`rescue' modifier" < "!=").
    Conflict between rule 277 and token ">=" resolved as shift ("`rescue' modifier" < ">=").
    Conflict between rule 277 and token "<=" resolved as shift ("`rescue' modifier" < "<=").
    Conflict between rule 277 and token "&&" resolved as shift ("`rescue' modifier" < "&&").
    Conflict between rule 277 and token "||" resolved as shift ("`rescue' modifier" < "||").
    Conflict between rule 277 and token "=~" resolved as shift ("`rescue' modifier" < "=~").
    Conflict between rule 277 and token "!~" resolved as shift ("`rescue' modifier" < "!~").
    Conflict between rule 277 and token ".." resolved as shift ("`rescue' modifier" < "..").
    Conflict between rule 277 and token "..." resolved as shift ("`rescue' modifier" < "...").
    Conflict between rule 277 and token "<<" resolved as shift ("`rescue' modifier" < "<<").
    Conflict between rule 277 and token ">>" resolved as shift ("`rescue' modifier" < ">>").
    Conflict between rule 277 and token '?' resolved as shift ("`rescue' modifier" < '?').
    Conflict between rule 277 and token '>' resolved as shift ("`rescue' modifier" < '>').
    Conflict between rule 277 and token '<' resolved as shift ("`rescue' modifier" < '<').
    Conflict between rule 277 and token '|' resolved as shift ("`rescue' modifier" < '|').
    Conflict between rule 277 and token '^' resolved as shift ("`rescue' modifier" < '^').
    Conflict between rule 277 and token '&' resolved as shift ("`rescue' modifier" < '&').
    Conflict between rule 277 and token '+' resolved as shift ("`rescue' modifier" < '+').
    Conflict between rule 277 and token '-' resolved as shift ("`rescue' modifier" < '-').
    Conflict between rule 277 and token '*' resolved as shift ("`rescue' modifier" < '*').
    Conflict between rule 277 and token '/' resolved as shift ("`rescue' modifier" < '/').
    Conflict between rule 277 and token '%' resolved as shift ("`rescue' modifier" < '%').


State 1035

   45 command_asgn: primary_value "::" "local variable or method" • "operator-assignment" lex_ctxt command_rhs
  125 lhs: primary_value "::" "local variable or method" •  ['=']
  221 arg: primary_value "::" "local variable or method" • "operator-assignment" lex_ctxt arg_rhs
  754 operation: "local variable or method" •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', '(']
  759 operation3: "local variable or method" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`do'", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '{', '}', '[', ',', ')', ';', '\n']

    "operator-assignment"  shift, and go to state 781

    "end-of-input"       reduce using rule 759 (operation3)
    "`rescue'"           reduce using rule 759 (operation3)
    "`ensure'"           reduce using rule 759 (operation3)
    "`end'"              reduce using rule 759 (operation3)
    "`elsif'"            reduce using rule 759 (operation3)
    "`else'"             reduce using rule 759 (operation3)
    "`when'"             reduce using rule 759 (operation3)
    "`in'"               reduce using rule 759 (operation3)
    "`do'"               reduce using rule 759 (operation3)
    "`and'"              reduce using rule 759 (operation3)
    "`or'"               reduce using rule 759 (operation3)
    "`if' modifier"      reduce using rule 759 (operation3)
    "`unless' modifier"  reduce using rule 759 (operation3)
    "`while' modifier"   reduce using rule 759 (operation3)
    "`until' modifier"   reduce using rule 759 (operation3)
    "`rescue' modifier"  reduce using rule 759 (operation3)
    "dummy end"          reduce using rule 759 (operation3)
    '.'                  reduce using rule 759 (operation3)
    "**"                 reduce using rule 759 (operation3)
    "<=>"                reduce using rule 759 (operation3)
    "=="                 reduce using rule 759 (operation3)
    "==="                reduce using rule 759 (operation3)
    "!="                 reduce using rule 759 (operation3)
    ">="                 reduce using rule 759 (operation3)
    "<="                 reduce using rule 759 (operation3)
    "&&"                 reduce using rule 759 (operation3)
    "||"                 reduce using rule 759 (operation3)
    "=~"                 reduce using rule 759 (operation3)
    "!~"                 reduce using rule 759 (operation3)
    ".."                 reduce using rule 759 (operation3)
    "..."                reduce using rule 759 (operation3)
    "<<"                 reduce using rule 759 (operation3)
    ">>"                 reduce using rule 759 (operation3)
    "&."                 reduce using rule 759 (operation3)
    "::"                 reduce using rule 759 (operation3)
    "=>"                 reduce using rule 759 (operation3)
    "'}'"                reduce using rule 759 (operation3)
    '='                  reduce using rule 125 (lhs)
    '?'                  reduce using rule 759 (operation3)
    '>'                  reduce using rule 759 (operation3)
    '<'                  reduce using rule 759 (operation3)
    '|'                  reduce using rule 759 (operation3)
    '^'                  reduce using rule 759 (operation3)
    '&'                  reduce using rule 759 (operation3)
    '+'                  reduce using rule 759 (operation3)
    '-'                  reduce using rule 759 (operation3)
    '*'                  reduce using rule 759 (operation3)
    '/'                  reduce using rule 759 (operation3)
    '%'                  reduce using rule 759 (operation3)
    '{'                  reduce using rule 759 (operation3)
    '}'                  reduce using rule 759 (operation3)
    '['                  reduce using rule 759 (operation3)
    ','                  reduce using rule 759 (operation3)
    ')'                  reduce using rule 759 (operation3)
    ';'                  reduce using rule 759 (operation3)
    '\n'                 reduce using rule 759 (operation3)
    $default             reduce using rule 754 (operation)


State 1036

   44 command_asgn: primary_value "::" "constant" • "operator-assignment" lex_ctxt command_rhs
  127 lhs: primary_value "::" "constant" •  ['=']
  222 arg: primary_value "::" "constant" • "operator-assignment" lex_ctxt arg_rhs
  328 primary: primary_value "::" "constant" •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '}', '[', ',', ')', ';', '\n']
  755 operation: "constant" •  ["`class'", "`module'", "`def'", "`begin'", "`if'", "`unless'", "`case'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`not'", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "unary+", "unary-", "(..", "(...", ":: at EXPR_BEG", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", tUMINUS_NUM, '!', '~', '(']

    "operator-assignment"  shift, and go to state 782

    "end-of-input"       reduce using rule 328 (primary)
    "`rescue'"           reduce using rule 328 (primary)
    "`ensure'"           reduce using rule 328 (primary)
    "`end'"              reduce using rule 328 (primary)
    "`elsif'"            reduce using rule 328 (primary)
    "`else'"             reduce using rule 328 (primary)
    "`when'"             reduce using rule 328 (primary)
    "`in'"               reduce using rule 328 (primary)
    "`and'"              reduce using rule 328 (primary)
    "`or'"               reduce using rule 328 (primary)
    "`if' modifier"      reduce using rule 328 (primary)
    "`unless' modifier"  reduce using rule 328 (primary)
    "`while' modifier"   reduce using rule 328 (primary)
    "`until' modifier"   reduce using rule 328 (primary)
    "`rescue' modifier"  reduce using rule 328 (primary)
    "dummy end"          reduce using rule 328 (primary)
    '.'                  reduce using rule 328 (primary)
    "**"                 reduce using rule 328 (primary)
    "<=>"                reduce using rule 328 (primary)
    "=="                 reduce using rule 328 (primary)
    "==="                reduce using rule 328 (primary)
    "!="                 reduce using rule 328 (primary)
    ">="                 reduce using rule 328 (primary)
    "<="                 reduce using rule 328 (primary)
    "&&"                 reduce using rule 328 (primary)
    "||"                 reduce using rule 328 (primary)
    "=~"                 reduce using rule 328 (primary)
    "!~"                 reduce using rule 328 (primary)
    ".."                 reduce using rule 328 (primary)
    "..."                reduce using rule 328 (primary)
    "<<"                 reduce using rule 328 (primary)
    ">>"                 reduce using rule 328 (primary)
    "&."                 reduce using rule 328 (primary)
    "::"                 reduce using rule 328 (primary)
    "=>"                 reduce using rule 328 (primary)
    "'}'"                reduce using rule 328 (primary)
    '='                  reduce using rule 127 (lhs)
    '?'                  reduce using rule 328 (primary)
    '>'                  reduce using rule 328 (primary)
    '<'                  reduce using rule 328 (primary)
    '|'                  reduce using rule 328 (primary)
    '^'                  reduce using rule 328 (primary)
    '&'                  reduce using rule 328 (primary)
    '+'                  reduce using rule 328 (primary)
    '-'                  reduce using rule 328 (primary)
    '*'                  reduce using rule 328 (primary)
    '/'                  reduce using rule 328 (primary)
    '%'                  reduce using rule 328 (primary)
    '}'                  reduce using rule 328 (primary)
    '['                  reduce using rule 328 (primary)
    ','                  reduce using rule 328 (primary)
    ')'                  reduce using rule 328 (primary)
    ';'                  reduce using rule 328 (primary)
    '\n'                 reduce using rule 328 (primary)
    $default             reduce using rule 755 (operation)


State 1037

   41 command_asgn: primary_value '[' opt_call_args • rbracket "operator-assignment" lex_ctxt command_rhs
  123 lhs: primary_value '[' opt_call_args • rbracket
  218 arg: primary_value '[' opt_call_args • rbracket "operator-assignment" lex_ctxt arg_rhs
  470 method_call: primary_value '[' opt_call_args • rbracket
  770 opt_nl: ε •  [']']
  771       | • '\n'
  773 rbracket: • opt_nl ']'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl    go to state 785
    rbracket  go to state 1131


State 1038

   42 command_asgn: primary_value call_op "local variable or method" • "operator-assignment" lex_ctxt command_rhs
  124 lhs: primary_value call_op "local variable or method" •  ['=']
  219 arg: primary_value call_op "local variable or method" • "operator-assignment" lex_ctxt arg_rhs
  754 operation: "local variable or method" •  ["end-of-input", "`class'", "`module'", "`def'", "`begin'", "`rescue'", "`ensure'", "`end'", "`if'", "`unless'", "`elsif'", "`else'", "`case'", "`when'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`in'", "`do'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`and'", "`or'", "`not'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "dummy end", '.', "unary+", "unary-", "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "(..", "(...", "<<", ">>", "&.", "::", ":: at EXPR_BEG", "=>", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', tUMINUS_NUM, '!', '~', '{', '}', '[', ',', '(', ')', ';', '\n']

    "operator-assignment"  shift, and go to state 788

    '='       reduce using rule 124 (lhs)
    $default  reduce using rule 754 (operation)


State 1039

   43 command_asgn: primary_value call_op "constant" • "operator-assignment" lex_ctxt command_rhs
  126 lhs: primary_value call_op "constant" •  ['=']
  220 arg: primary_value call_op "constant" • "operator-assignment" lex_ctxt arg_rhs
  755 operation: "constant" •  ["end-of-input", "`class'", "`module'", "`def'", "`begin'", "`rescue'", "`ensure'", "`end'", "`if'", "`unless'", "`elsif'", "`else'", "`case'", "`when'", "`while'", "`until'", "`for'", "`break'", "`next'", "`redo'", "`retry'", "`in'", "`do'", "`return'", "`yield'", "`super'", "`self'", "`nil'", "`true'", "`false'", "`and'", "`or'", "`not'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "`defined?'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "method", "global variable", "instance variable", "constant", "class variable", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "numbered reference", "back reference", "dummy end", '.', "unary+", "unary-", "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "(..", "(...", "<<", ">>", "&.", "::", ":: at EXPR_BEG", "=>", "(", "( arg", "[", "{", "*", "**arg", "&", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', tUMINUS_NUM, '!', '~', '{', '}', '[', ',', '(', ')', ';', '\n']

    "operator-assignment"  shift, and go to state 789

    '='       reduce using rule 126 (lhs)
    $default  reduce using rule 755 (operation)


State 1040

  567 p_value: "(.." p_primitive •

    $default  reduce using rule 567 (p_value)


State 1041

  568 p_value: "(..." p_primitive •

    $default  reduce using rule 568 (p_value)


State 1042

  131 cname: "constant" •

    $default  reduce using rule 131 (cname)


State 1043

  583 p_const: ":: at EXPR_BEG" cname •

    $default  reduce using rule 583 (p_const)


State 1044

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  503 p_expr: • p_as
  504 p_as: • p_expr "=>" p_variable
  505     | • p_alt
  506 p_alt: • p_alt '|' p_expr_basic
  507      | • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  513             | • p_const p_lparen p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  521             | • "[" p_find rbracket
  522             | • "[" rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  527             | "(" @42 • p_expr rparen
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283

    lambda            go to state 917
    p_expr            go to state 1132
    p_as              go to state 920
    p_alt             go to state 921
    p_expr_basic      go to state 922
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947


State 1045

  504 p_as: p_expr • "=>" p_variable
  528 p_args: p_expr •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ']', ';', '\n']
  543 p_arg: p_expr •  [',']

    "=>"  shift, and go to state 1060

    ','       reduce using rule 543 (p_arg)
    $default  reduce using rule 528 (p_args)


State 1046

  520 p_expr_basic: "[" p_args • rbracket
  770 opt_nl: ε •  [']']
  771       | • '\n'
  773 rbracket: • opt_nl ']'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl    go to state 785
    rbracket  go to state 1133


State 1047

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  503 p_expr: • p_as
  504 p_as: • p_expr "=>" p_variable
  505     | • p_alt
  506 p_alt: • p_alt '|' p_expr_basic
  507      | • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  513             | • p_const p_lparen p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  521             | • "[" p_find rbracket
  522             | • "[" rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  529 p_args: p_args_head •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ']', ';', '\n']
  530       | p_args_head • p_arg
  531       | p_args_head • p_rest
  532       | p_args_head • p_rest ',' p_args_post
  535 p_args_head: p_args_head • p_arg ','
  539 p_rest: • "*" "local variable or method"
  540       | • "*"
  543 p_arg: • p_expr
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "*"                         shift, and go to state 914
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283

    $default  reduce using rule 529 (p_args)

    lambda            go to state 917
    p_expr            go to state 1134
    p_as              go to state 920
    p_alt             go to state 921
    p_expr_basic      go to state 922
    p_rest            go to state 1135
    p_arg             go to state 1136
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947


State 1048

  533 p_args: p_args_tail •

    $default  reduce using rule 533 (p_args)


State 1049

  521 p_expr_basic: "[" p_find • rbracket
  770 opt_nl: ε •  [']']
  771       | • '\n'
  773 rbracket: • opt_nl ']'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl    go to state 785
    rbracket  go to state 1137


State 1050

  534 p_args_head: p_arg • ','

    ','  shift, and go to state 1138


State 1051

  522 p_expr_basic: "[" rbracket •

    $default  reduce using rule 522 (p_expr_basic)


State 1052

  524 p_expr_basic: "{" @41 • p_kwargs rbrace
  544 p_kwargs: • p_kwarg ',' p_any_kwrest
  545         | • p_kwarg
  546         | • p_kwarg ','
  547         | • p_any_kwrest
  548 p_kwarg: • p_kw
  549        | • p_kwarg ',' p_kw
  550 p_kw: • p_kw_label p_expr
  551     | • p_kw_label
  552 p_kw_label: • "label"
  553           | • "string literal" string_contents tLABEL_END
  554 p_kwrest: • kwrest_mark "local variable or method"
  555         | • kwrest_mark
  556 p_kwnorest: • kwrest_mark "`nil'"
  557 p_any_kwrest: • p_kwrest
  558             | • p_kwnorest
  720 kwrest_mark: • "**"
  721            | • "**arg"

    "label"           shift, and go to state 907
    "**"              shift, and go to state 534
    "**arg"           shift, and go to state 538
    "string literal"  shift, and go to state 1139

    p_kwargs      go to state 1140
    p_kwarg       go to state 927
    p_kw          go to state 928
    p_kw_label    go to state 929
    p_kwrest      go to state 930
    p_kwnorest    go to state 931
    p_any_kwrest  go to state 932
    kwrest_mark   go to state 948


State 1053

  774 rbrace: opt_nl • '}'

    '}'  shift, and go to state 1141


State 1054

  525 p_expr_basic: "{" rbrace •

    $default  reduce using rule 525 (p_expr_basic)


State 1055

  539 p_rest: "*" "local variable or method" •

    $default  reduce using rule 539 (p_rest)


State 1056

  553 p_kw_label: "string literal" string_contents • tLABEL_END
  601 string1: "string literal" string_contents • "terminator"
  619 string_contents: string_contents • string_content
  624 string_content: • "literal content"
  626               | • tSTRING_DVAR @43 string_dvar
  632               | • tSTRING_DBEG $@44 @45 @46 @47 @48 compstmt "'}'"

    "literal content"  shift, and go to state 504
    "terminator"       shift, and go to state 509
    tSTRING_DBEG       shift, and go to state 506
    tSTRING_DVAR       shift, and go to state 507
    tLABEL_END         shift, and go to state 1142

    string_content  go to state 508


State 1057

  580 p_var_ref: '^' "local variable or method" •

    $default  reduce using rule 580 (p_var_ref)


State 1058

   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   70 expr_value: • expr
   71           | • error
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  582 p_expr_ref: '^' "(" • expr_value ')'
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 380
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 381
    defn_head         go to state 218
    defs_head         go to state 219
    expr_value        go to state 1143
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 1059

  581 p_var_ref: '^' nonlocal_var •

    $default  reduce using rule 581 (p_var_ref)


State 1060

  504 p_as: p_expr "=>" • p_variable
  579 p_variable: • "local variable or method"

    "local variable or method"  shift, and go to state 905

    p_variable  go to state 1144


State 1061

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  498 p_top_expr_body: p_expr ',' •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
  499                | p_expr ',' • p_args
  503 p_expr: • p_as
  504 p_as: • p_expr "=>" p_variable
  505     | • p_alt
  506 p_alt: • p_alt '|' p_expr_basic
  507      | • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  513             | • p_const p_lparen p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  521             | • "[" p_find rbracket
  522             | • "[" rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  528 p_args: • p_expr
  529       | • p_args_head
  530       | • p_args_head p_arg
  531       | • p_args_head p_rest
  532       | • p_args_head p_rest ',' p_args_post
  533       | • p_args_tail
  534 p_args_head: • p_arg ','
  535            | • p_args_head p_arg ','
  536 p_args_tail: • p_rest
  537            | • p_rest ',' p_args_post
  539 p_rest: • "*" "local variable or method"
  540       | • "*"
  543 p_arg: • p_expr
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "*"                         shift, and go to state 914
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283

    $default  reduce using rule 498 (p_top_expr_body)

    lambda            go to state 917
    p_expr            go to state 1045
    p_as              go to state 920
    p_alt             go to state 921
    p_expr_basic      go to state 922
    p_args            go to state 1145
    p_args_head       go to state 1047
    p_args_tail       go to state 1048
    p_rest            go to state 1146
    p_arg             go to state 1050
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947


State 1062

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  506 p_alt: p_alt '|' • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  513             | • p_const p_lparen p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  521             | • "[" p_find rbracket
  522             | • "[" rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283

    lambda            go to state 917
    p_expr_basic      go to state 1147
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947


State 1063

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  503 p_expr: • p_as
  504 p_as: • p_expr "=>" p_variable
  505     | • p_alt
  506 p_alt: • p_alt '|' p_expr_basic
  507      | • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  513             | • p_const p_lparen p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  521             | • "[" p_find rbracket
  522             | • "[" rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  537 p_args_tail: p_rest ',' • p_args_post
  538 p_find: p_rest ',' • p_args_post ',' p_rest
  541 p_args_post: • p_arg
  542            | • p_args_post ',' p_arg
  543 p_arg: • p_expr
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283

    lambda            go to state 917
    p_expr            go to state 1134
    p_as              go to state 920
    p_alt             go to state 921
    p_expr_basic      go to state 922
    p_args_post       go to state 1148
    p_arg             go to state 1149
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947


State 1064

  544 p_kwargs: p_kwarg ',' • p_any_kwrest
  546         | p_kwarg ',' •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ']', ';', '\n']
  549 p_kwarg: p_kwarg ',' • p_kw
  550 p_kw: • p_kw_label p_expr
  551     | • p_kw_label
  552 p_kw_label: • "label"
  553           | • "string literal" string_contents tLABEL_END
  554 p_kwrest: • kwrest_mark "local variable or method"
  555         | • kwrest_mark
  556 p_kwnorest: • kwrest_mark "`nil'"
  557 p_any_kwrest: • p_kwrest
  558             | • p_kwnorest
  720 kwrest_mark: • "**"
  721            | • "**arg"

    "label"           shift, and go to state 907
    "**"              shift, and go to state 534
    "**arg"           shift, and go to state 538
    "string literal"  shift, and go to state 1139

    $default  reduce using rule 546 (p_kwargs)

    p_kw          go to state 1150
    p_kw_label    go to state 929
    p_kwrest      go to state 930
    p_kwnorest    go to state 931
    p_any_kwrest  go to state 1151
    kwrest_mark   go to state 948


State 1065

  504 p_as: p_expr • "=>" p_variable
  550 p_kw: p_kw_label p_expr •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ',', ')', ']', ';', '\n']

    "=>"  shift, and go to state 1060

    $default  reduce using rule 550 (p_kw)


State 1066

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  560 p_value: p_primitive ".." • p_primitive
  562        | p_primitive ".." •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "'}'", '|', '}', ',', ')', ']', ';', '\n']
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"

    "`self'"                shift, and go to state 23
    "`nil'"                 shift, and go to state 24
    "`true'"                shift, and go to state 25
    "`false'"               shift, and go to state 26
    "`__LINE__'"            shift, and go to state 32
    "`__FILE__'"            shift, and go to state 33
    "`__ENCODING__'"        shift, and go to state 34
    "integer literal"       shift, and go to state 41
    "float literal"         shift, and go to state 42
    "rational literal"      shift, and go to state 43
    "imaginary literal"     shift, and go to state 44
    "char literal"          shift, and go to state 45
    "->"                    shift, and go to state 58
    "symbol literal"        shift, and go to state 59
    "string literal"        shift, and go to state 60
    "backtick literal"      shift, and go to state 61
    "regexp literal"        shift, and go to state 62
    "word list"             shift, and go to state 63
    "verbatim word list"    shift, and go to state 64
    "symbol list"           shift, and go to state 65
    "verbatim symbol list"  shift, and go to state 66
    tUMINUS_NUM             shift, and go to state 283

    $default  reduce using rule 562 (p_value)

    lambda            go to state 917
    p_primitive       go to state 1152
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947


State 1067

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  561 p_value: p_primitive "..." • p_primitive
  563        | p_primitive "..." •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "'}'", '|', '}', ',', ')', ']', ';', '\n']
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"

    "`self'"                shift, and go to state 23
    "`nil'"                 shift, and go to state 24
    "`true'"                shift, and go to state 25
    "`false'"               shift, and go to state 26
    "`__LINE__'"            shift, and go to state 32
    "`__FILE__'"            shift, and go to state 33
    "`__ENCODING__'"        shift, and go to state 34
    "integer literal"       shift, and go to state 41
    "float literal"         shift, and go to state 42
    "rational literal"      shift, and go to state 43
    "imaginary literal"     shift, and go to state 44
    "char literal"          shift, and go to state 45
    "->"                    shift, and go to state 58
    "symbol literal"        shift, and go to state 59
    "string literal"        shift, and go to state 60
    "backtick literal"      shift, and go to state 61
    "regexp literal"        shift, and go to state 62
    "word list"             shift, and go to state 63
    "verbatim word list"    shift, and go to state 64
    "symbol list"           shift, and go to state 65
    "verbatim symbol list"  shift, and go to state 66
    tUMINUS_NUM             shift, and go to state 283

    $default  reduce using rule 563 (p_value)

    lambda            go to state 917
    p_primitive       go to state 1153
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947


State 1068

  130 cname: • "local variable or method"
  131      | • "constant"
  584 p_const: p_const "::" • cname

    "local variable or method"  shift, and go to state 642
    "constant"                  shift, and go to state 1042

    cname  go to state 1154


State 1069

  509 p_lbracket: '[' •  ["`self'", "`nil'", "`true'", "`false'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "constant", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "**", "(..", "(...", ":: at EXPR_BEG", "(", "[", "{", "*", "**arg", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", '^', tUMINUS_NUM]
  519 p_expr_basic: p_const '[' • rbracket
  770 opt_nl: ε •  [']']
  771       | • '\n'
  773 rbracket: • opt_nl ']'

    '\n'  shift, and go to state 242

    ']'       reduce using rule 770 (opt_nl)
    $default  reduce using rule 509 (p_lbracket)

    opt_nl    go to state 785
    rbracket  go to state 1155


State 1070

  508 p_lparen: '(' •  ["`self'", "`nil'", "`true'", "`false'", "`__LINE__'", "`__FILE__'", "`__ENCODING__'", "local variable or method", "constant", "label", "integer literal", "float literal", "rational literal", "imaginary literal", "char literal", "**", "(..", "(...", ":: at EXPR_BEG", "(", "[", "{", "*", "**arg", "->", "symbol literal", "string literal", "backtick literal", "regexp literal", "word list", "verbatim word list", "symbol list", "verbatim symbol list", '^', tUMINUS_NUM]
  515 p_expr_basic: p_const '(' • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    ')'       reduce using rule 770 (opt_nl)
    $default  reduce using rule 508 (p_lparen)

    opt_nl  go to state 453
    rparen  go to state 1156


State 1071

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  503 p_expr: • p_as
  504 p_as: • p_expr "=>" p_variable
  505     | • p_alt
  506 p_alt: • p_alt '|' p_expr_basic
  507      | • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  512             | p_const p_lparen • p_args rparen
  513             | • p_const p_lparen p_find rparen
  513             | p_const p_lparen • p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  514             | p_const p_lparen • p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  521             | • "[" p_find rbracket
  522             | • "[" rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  528 p_args: • p_expr
  529       | • p_args_head
  530       | • p_args_head p_arg
  531       | • p_args_head p_rest
  532       | • p_args_head p_rest ',' p_args_post
  533       | • p_args_tail
  534 p_args_head: • p_arg ','
  535            | • p_args_head p_arg ','
  536 p_args_tail: • p_rest
  537            | • p_rest ',' p_args_post
  538 p_find: • p_rest ',' p_args_post ',' p_rest
  539 p_rest: • "*" "local variable or method"
  540       | • "*"
  543 p_arg: • p_expr
  544 p_kwargs: • p_kwarg ',' p_any_kwrest
  545         | • p_kwarg
  546         | • p_kwarg ','
  547         | • p_any_kwrest
  548 p_kwarg: • p_kw
  549        | • p_kwarg ',' p_kw
  550 p_kw: • p_kw_label p_expr
  551     | • p_kw_label
  552 p_kw_label: • "label"
  553           | • "string literal" string_contents tLABEL_END
  554 p_kwrest: • kwrest_mark "local variable or method"
  555         | • kwrest_mark
  556 p_kwnorest: • kwrest_mark "`nil'"
  557 p_any_kwrest: • p_kwrest
  558             | • p_kwnorest
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  720 kwrest_mark: • "**"
  721            | • "**arg"

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "label"                     shift, and go to state 907
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "**"                        shift, and go to state 534
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "*"                         shift, and go to state 914
    "**arg"                     shift, and go to state 538
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 915
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283

    lambda            go to state 917
    p_expr            go to state 1045
    p_as              go to state 920
    p_alt             go to state 921
    p_expr_basic      go to state 922
    p_args            go to state 1157
    p_args_head       go to state 1047
    p_args_tail       go to state 1048
    p_find            go to state 1158
    p_rest            go to state 925
    p_arg             go to state 1050
    p_kwargs          go to state 1159
    p_kwarg           go to state 927
    p_kw              go to state 928
    p_kw_label        go to state 929
    p_kwrest          go to state 930
    p_kwnorest        go to state 931
    p_any_kwrest      go to state 932
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947
    kwrest_mark       go to state 948


State 1072

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  503 p_expr: • p_as
  504 p_as: • p_expr "=>" p_variable
  505     | • p_alt
  506 p_alt: • p_alt '|' p_expr_basic
  507      | • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  513             | • p_const p_lparen p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  516             | p_const p_lbracket • p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  517             | p_const p_lbracket • p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  518             | p_const p_lbracket • p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  521             | • "[" p_find rbracket
  522             | • "[" rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  528 p_args: • p_expr
  529       | • p_args_head
  530       | • p_args_head p_arg
  531       | • p_args_head p_rest
  532       | • p_args_head p_rest ',' p_args_post
  533       | • p_args_tail
  534 p_args_head: • p_arg ','
  535            | • p_args_head p_arg ','
  536 p_args_tail: • p_rest
  537            | • p_rest ',' p_args_post
  538 p_find: • p_rest ',' p_args_post ',' p_rest
  539 p_rest: • "*" "local variable or method"
  540       | • "*"
  543 p_arg: • p_expr
  544 p_kwargs: • p_kwarg ',' p_any_kwrest
  545         | • p_kwarg
  546         | • p_kwarg ','
  547         | • p_any_kwrest
  548 p_kwarg: • p_kw
  549        | • p_kwarg ',' p_kw
  550 p_kw: • p_kw_label p_expr
  551     | • p_kw_label
  552 p_kw_label: • "label"
  553           | • "string literal" string_contents tLABEL_END
  554 p_kwrest: • kwrest_mark "local variable or method"
  555         | • kwrest_mark
  556 p_kwnorest: • kwrest_mark "`nil'"
  557 p_any_kwrest: • p_kwrest
  558             | • p_kwnorest
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  720 kwrest_mark: • "**"
  721            | • "**arg"

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "label"                     shift, and go to state 907
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "**"                        shift, and go to state 534
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "*"                         shift, and go to state 914
    "**arg"                     shift, and go to state 538
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 915
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283

    lambda            go to state 917
    p_expr            go to state 1045
    p_as              go to state 920
    p_alt             go to state 921
    p_expr_basic      go to state 922
    p_args            go to state 1160
    p_args_head       go to state 1047
    p_args_tail       go to state 1048
    p_find            go to state 1161
    p_rest            go to state 925
    p_arg             go to state 1050
    p_kwargs          go to state 1162
    p_kwarg           go to state 927
    p_kw              go to state 928
    p_kw_label        go to state 929
    p_kwrest          go to state 930
    p_kwnorest        go to state 931
    p_any_kwrest      go to state 932
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947
    kwrest_mark       go to state 948


State 1073

  554 p_kwrest: kwrest_mark "local variable or method" •

    $default  reduce using rule 554 (p_kwrest)


State 1074

  225 arg: arg • ".." arg
  226    | arg • "..." arg
  227    | arg • ".."
  228    | arg • "..."
  231    | arg • '+' arg
  232    | arg • '-' arg
  233    | arg • '*' arg
  234    | arg • '/' arg
  235    | arg • '%' arg
  236    | arg • "**" arg
  240    | arg • '|' arg
  241    | arg • '^' arg
  242    | arg • '&' arg
  243    | arg • "<=>" arg
  245    | arg • "==" arg
  246    | arg • "===" arg
  247    | arg • "!=" arg
  248    | arg • "=~" arg
  249    | arg • "!~" arg
  252    | arg • "<<" arg
  253    | arg • ">>" arg
  254    | arg • "&&" arg
  255    | arg • "||" arg
  258    | arg • '?' arg opt_nl ':' arg
  258    | arg '?' arg opt_nl ':' arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`do' for block", "`do' for lambda", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "{ arg", "'}'", tLAMBEG, ':', '}', ',', ')', ']', ';', '\n']
  264 relop: • '>'
  265      | • '<'
  266      | • ">="
  267      | • "<="
  268 rel_expr: arg • relop arg

    "**"   shift, and go to state 345
    "<=>"  shift, and go to state 346
    "=="   shift, and go to state 347
    "==="  shift, and go to state 348
    "!="   shift, and go to state 349
    ">="   shift, and go to state 350
    "<="   shift, and go to state 351
    "&&"   shift, and go to state 352
    "||"   shift, and go to state 353
    "=~"   shift, and go to state 354
    "!~"   shift, and go to state 355
    ".."   shift, and go to state 356
    "..."  shift, and go to state 357
    "<<"   shift, and go to state 358
    ">>"   shift, and go to state 359
    '?'    shift, and go to state 361
    '>'    shift, and go to state 362
    '<'    shift, and go to state 363
    '|'    shift, and go to state 364
    '^'    shift, and go to state 365
    '&'    shift, and go to state 366
    '+'    shift, and go to state 367
    '-'    shift, and go to state 368
    '*'    shift, and go to state 369
    '/'    shift, and go to state 370
    '%'    shift, and go to state 371

    $default  reduce using rule 258 (arg)

    relop  go to state 372

    Conflict between rule 258 and token "**" resolved as shift (':' < "**").
    Conflict between rule 258 and token "<=>" resolved as shift (':' < "<=>").
    Conflict between rule 258 and token "==" resolved as shift (':' < "==").
    Conflict between rule 258 and token "===" resolved as shift (':' < "===").
    Conflict between rule 258 and token "!=" resolved as shift (':' < "!=").
    Conflict between rule 258 and token ">=" resolved as shift (':' < ">=").
    Conflict between rule 258 and token "<=" resolved as shift (':' < "<=").
    Conflict between rule 258 and token "&&" resolved as shift (':' < "&&").
    Conflict between rule 258 and token "||" resolved as shift (':' < "||").
    Conflict between rule 258 and token "=~" resolved as shift (':' < "=~").
    Conflict between rule 258 and token "!~" resolved as shift (':' < "!~").
    Conflict between rule 258 and token ".." resolved as shift (':' < "..").
    Conflict between rule 258 and token "..." resolved as shift (':' < "...").
    Conflict between rule 258 and token "<<" resolved as shift (':' < "<<").
    Conflict between rule 258 and token ">>" resolved as shift (':' < ">>").
    Conflict between rule 258 and token '?' resolved as shift (%right '?').
    Conflict between rule 258 and token '>' resolved as shift (':' < '>').
    Conflict between rule 258 and token '<' resolved as shift (':' < '<').
    Conflict between rule 258 and token '|' resolved as shift (':' < '|').
    Conflict between rule 258 and token '^' resolved as shift (':' < '^').
    Conflict between rule 258 and token '&' resolved as shift (':' < '&').
    Conflict between rule 258 and token '+' resolved as shift (':' < '+').
    Conflict between rule 258 and token '-' resolved as shift (':' < '-').
    Conflict between rule 258 and token '*' resolved as shift (':' < '*').
    Conflict between rule 258 and token '/' resolved as shift (':' < '/').
    Conflict between rule 258 and token '%' resolved as shift (':' < '%').


State 1075

   45 command_asgn: primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs •

    $default  reduce using rule 45 (command_asgn)


State 1076

  221 arg: primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs •

    $default  reduce using rule 221 (arg)


State 1077

   44 command_asgn: primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs •

    $default  reduce using rule 44 (command_asgn)


State 1078

  222 arg: primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs •

    $default  reduce using rule 222 (arg)


State 1079

   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   41             | primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt • command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   51 command_rhs: • command_call
   52            | • command_call "`rescue' modifier" stmt
   53            | • command_asgn
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  218    | primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt • arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    command_asgn      go to state 768
    command_rhs       go to state 1163
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 770
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 771
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 1164
    primary           go to state 90
    primary_value     go to state 776
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 777
    operation         go to state 127


State 1080

   42 command_asgn: primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs •

    $default  reduce using rule 42 (command_asgn)


State 1081

  219 arg: primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs •

    $default  reduce using rule 219 (arg)


State 1082

   43 command_asgn: primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs •

    $default  reduce using rule 43 (command_asgn)


State 1083

  220 arg: primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs •

    $default  reduce using rule 220 (arg)


State 1084

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  591 exc_var: "=>" • lhs
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 281
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    ":: at EXPR_BEG"            shift, and go to state 1165
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 283

    defn_head         go to state 285
    defs_head         go to state 286
    fcall             go to state 254
    lhs               go to state 1166
    primary           go to state 288
    primary_value     go to state 1167
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 1168
    keyword_variable  go to state 1169
    var_ref           go to state 124
    backref           go to state 1170
    operation         go to state 127


State 1085

  389 then: • term
  390     | • "`then'"
  391     | • term "`then'"
  586 opt_rescue: k_rescue exc_list exc_var • then compstmt opt_rescue
  777 term: • ';'
  778     | • '\n'

    "`then'"  shift, and go to state 627
    ';'       shift, and go to state 309
    '\n'      shift, and go to state 310

    then  go to state 1171
    term  go to state 629


State 1086

  592 exc_var: none •

    $default  reduce using rule 592 (exc_var)


State 1087

  593 opt_ensure: k_ensure compstmt •

    $default  reduce using rule 593 (opt_ensure)


State 1088

   11 bodystmt: compstmt opt_rescue k_else $@2 • compstmt opt_ensure
   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`ensure'", "`end'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`ensure'"   reduce using rule 781 (none)
    "`end'"      reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    compstmt          go to state 1172
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 1089

  397 opt_else: k_else compstmt •

    $default  reduce using rule 397 (opt_else)


State 1090

  389 then: • term
  390     | • "`then'"
  391     | • term "`then'"
  395 if_tail: k_elsif expr_value • then compstmt if_tail
  777 term: • ';'
  778     | • '\n'

    "`then'"  shift, and go to state 627
    ';'       shift, and go to state 309
    '\n'      shift, and go to state 310

    then  go to state 1173
    term  go to state 629


State 1091

  344 primary: k_if expr_value then compstmt if_tail k_end •

    $default  reduce using rule 344 (primary)


State 1092

  345 primary: k_unless expr_value then compstmt opt_else k_end •

    $default  reduce using rule 345 (primary)


State 1093

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  491 p_case_body: "`in'" @38 @39 • p_top_expr then $@40 compstmt p_cases
  494 p_top_expr: • p_top_expr_body
  495           | • p_top_expr_body "`if' modifier" expr_value
  496           | • p_top_expr_body "`unless' modifier" expr_value
  497 p_top_expr_body: • p_expr
  498                | • p_expr ','
  499                | • p_expr ',' p_args
  500                | • p_find
  501                | • p_args_tail
  502                | • p_kwargs
  503 p_expr: • p_as
  504 p_as: • p_expr "=>" p_variable
  505     | • p_alt
  506 p_alt: • p_alt '|' p_expr_basic
  507      | • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  513             | • p_const p_lparen p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  521             | • "[" p_find rbracket
  522             | • "[" rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  536 p_args_tail: • p_rest
  537            | • p_rest ',' p_args_post
  538 p_find: • p_rest ',' p_args_post ',' p_rest
  539 p_rest: • "*" "local variable or method"
  540       | • "*"
  544 p_kwargs: • p_kwarg ',' p_any_kwrest
  545         | • p_kwarg
  546         | • p_kwarg ','
  547         | • p_any_kwrest
  548 p_kwarg: • p_kw
  549        | • p_kwarg ',' p_kw
  550 p_kw: • p_kw_label p_expr
  551     | • p_kw_label
  552 p_kw_label: • "label"
  553           | • "string literal" string_contents tLABEL_END
  554 p_kwrest: • kwrest_mark "local variable or method"
  555         | • kwrest_mark
  556 p_kwnorest: • kwrest_mark "`nil'"
  557 p_any_kwrest: • p_kwrest
  558             | • p_kwnorest
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  720 kwrest_mark: • "**"
  721            | • "**arg"

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "label"                     shift, and go to state 907
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "**"                        shift, and go to state 534
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "*"                         shift, and go to state 914
    "**arg"                     shift, and go to state 538
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 915
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283

    lambda            go to state 917
    p_top_expr        go to state 1174
    p_top_expr_body   go to state 1175
    p_expr            go to state 919
    p_as              go to state 920
    p_alt             go to state 921
    p_expr_basic      go to state 922
    p_args_tail       go to state 923
    p_find            go to state 924
    p_rest            go to state 925
    p_kwargs          go to state 926
    p_kwarg           go to state 927
    p_kw              go to state 928
    p_kw_label        go to state 929
    p_kwrest          go to state 930
    p_kwnorest        go to state 931
    p_any_kwrest      go to state 932
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947
    kwrest_mark       go to state 948


State 1094

  349 primary: k_case expr_value opt_terms @19 case_body k_end •

    $default  reduce using rule 349 (primary)


State 1095

  482 case_args: "*" arg_value •

    $default  reduce using rule 482 (case_args)


State 1096

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  483 case_args: case_args ',' • arg_value
  484          | case_args ',' • "*" arg_value
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 1176
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 1177
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 1097

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  485 case_body: k_when case_args then • compstmt cases
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`end'", "`else'", "`when'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`end'"      reduce using rule 781 (none)
    "`else'"     reduce using rule 781 (none)
    "`when'"     reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    compstmt          go to state 1178
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 1098

  353 primary: k_for for_var "`in'" expr_value_do compstmt k_end •

    $default  reduce using rule 353 (primary)


State 1099

  357 primary: k_class "<<" expr $@22 term bodystmt • k_end
  386 k_end: • "`end'"
  387      | • "dummy end"

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 1179


State 1100

  669 superclass: '<' $@49 expr_value term •

    $default  reduce using rule 669 (superclass)


State 1101

  355 primary: k_class cpath superclass $@21 bodystmt k_end •

    $default  reduce using rule 355 (primary)


State 1102

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  218    | primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt • arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  276 arg_rhs: • arg
  277        | • arg "`rescue' modifier" arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 832
    rel_expr          go to state 89
    arg_rhs           go to state 1164
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 1103

  452 f_larglist: '(' f_args opt_bv_decl • ')'

    ')'  shift, and go to state 1180


State 1104

  441 opt_bv_decl: opt_nl •  ['|', ')']
  442            | opt_nl • ';' bv_decls opt_nl

    ';'  shift, and go to state 1181

    $default  reduce using rule 441 (opt_bv_decl)


State 1105

  455 $@31: ε •
  456 lambda_body: "`do' for lambda" • $@31 bodystmt k_end

    $default  reduce using rule 455 ($@31)

    $@31  go to state 1182


State 1106

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  454 lambda_body: tLAMBEG • compstmt '}'
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ['}', ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    '}'   reduce using rule 781 (none)
    ';'   reduce using rule 781 (none)
    '\n'  reduce using rule 781 (none)

    compstmt          go to state 1183
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 1107

  451 lambda: "->" @27 @28 @29 f_larglist $@30 lambda_body •

    $default  reduce using rule 451 (lambda)


State 1108

  631 @48: ε •
  632 string_content: tSTRING_DBEG $@44 @45 @46 @47 • @48 compstmt "'}'"

    $default  reduce using rule 631 (@48)

    @48  go to state 1184


State 1109

  400 f_marg: • f_norm_arg
  401       | • "(" f_margs rparen
  402 f_marg_list: • f_marg
  403            | • f_marg_list ',' f_marg
  406 f_margs: f_marg_list ',' f_rest_marg ',' • f_marg_list
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "("                         shift, and go to state 718

    f_marg       go to state 720
    f_marg_list  go to state 1185
    f_bad_arg    go to state 547
    f_norm_arg   go to state 724


State 1110

  400 f_marg: • f_norm_arg
  401       | • "(" f_margs rparen
  403 f_marg_list: f_marg_list ',' • f_marg
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "("                         shift, and go to state 718

    f_marg      go to state 1007
    f_bad_arg   go to state 547
    f_norm_arg  go to state 724


State 1111

  682 opt_args_tail: • ',' args_tail
  683              | ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']
  687 f_args: f_arg ',' f_optarg ',' f_arg • opt_args_tail
  710 f_arg: f_arg • ',' f_arg_item

    ','  shift, and go to state 1015

    $default  reduce using rule 683 (opt_args_tail)

    opt_args_tail  go to state 1186


State 1112

  682 opt_args_tail: • ',' args_tail
  683              | ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']
  684 f_args: f_arg ',' f_optarg ',' f_rest_arg • opt_args_tail
  685       | f_arg ',' f_optarg ',' f_rest_arg • ',' f_arg opt_args_tail

    ','  shift, and go to state 1187

    $default  reduce using rule 683 (opt_args_tail)

    opt_args_tail  go to state 1188


State 1113

  682 opt_args_tail: • ',' args_tail
  683              | ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']
  689 f_args: f_arg ',' f_rest_arg ',' f_arg • opt_args_tail
  710 f_arg: f_arg • ',' f_arg_item

    ','  shift, and go to state 1015

    $default  reduce using rule 683 (opt_args_tail)

    opt_args_tail  go to state 1189


State 1114

  682 opt_args_tail: • ',' args_tail
  683              | ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']
  692 f_args: f_optarg ',' f_rest_arg ',' f_arg • opt_args_tail
  710 f_arg: f_arg • ',' f_arg_item

    ','  shift, and go to state 1015

    $default  reduce using rule 683 (opt_args_tail)

    opt_args_tail  go to state 1190


State 1115

  417 block_args_tail: f_any_kwrest • opt_f_block_arg
  739 opt_f_block_arg: • ',' f_block_arg
  740                | • none
  781 none: ε •  ['|', ';', '\n']

    ','  shift, and go to state 725

    $default  reduce using rule 781 (none)

    opt_f_block_arg  go to state 1191
    none             go to state 727


State 1116

  436 block_param: block_args_tail •

    $default  reduce using rule 436 (block_param)


State 1117

  440 block_param_def: '|' block_param • opt_bv_decl '|'
  441 opt_bv_decl: • opt_nl
  442            | • opt_nl ';' bv_decls opt_nl
  770 opt_nl: ε •  ['|', ';']
  771       | • '\n'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_bv_decl  go to state 1192
    opt_nl       go to state 1104


State 1118

  439 block_param_def: '|' opt_bv_decl • '|'

    '|'  shift, and go to state 1193


State 1119

  413 $@26: ε •  ['=']
  414 f_eq: • $@26 '='
  707 f_arg_item: f_arg_asgn •  ['|', ',', ';', '\n']
  726 f_block_opt: f_arg_asgn • f_eq primary_value

    '='       reduce using rule 413 ($@26)
    $default  reduce using rule 707 (f_arg_item)

    f_eq  go to state 1194
    $@26  go to state 730


State 1120

  419 opt_block_args_tail: • ',' block_args_tail
  420                    | ε •  ['|', ';', '\n']
  421 excessed_comma: • ','
  422 block_param: f_arg • ',' f_block_optarg ',' f_rest_arg opt_block_args_tail
  423            | f_arg • ',' f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail
  424            | f_arg • ',' f_block_optarg opt_block_args_tail
  425            | f_arg • ',' f_block_optarg ',' f_arg opt_block_args_tail
  426            | f_arg • ',' f_rest_arg opt_block_args_tail
  427            | f_arg • excessed_comma
  428            | f_arg • ',' f_rest_arg ',' f_arg opt_block_args_tail
  429            | f_arg • opt_block_args_tail
  710 f_arg: f_arg • ',' f_arg_item

    ','  shift, and go to state 1195

    $default  reduce using rule 420 (opt_block_args_tail)

    opt_block_args_tail  go to state 1196
    excessed_comma       go to state 1197


State 1121

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  714 f_block_kw: f_label • primary_value
  715           | f_label •  ['|', ',', ';', '\n']
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 281
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    ":: at EXPR_BEG"            shift, and go to state 1198
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 283

    $default  reduce using rule 715 (f_block_kw)

    defn_head         go to state 285
    defs_head         go to state 286
    fcall             go to state 254
    primary           go to state 288
    primary_value     go to state 1199
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 405
    keyword_variable  go to state 406
    var_ref           go to state 124
    backref           go to state 407
    operation         go to state 127


State 1122

  716 f_block_kwarg: f_block_kw •

    $default  reduce using rule 716 (f_block_kwarg)


State 1123

  415 block_args_tail: f_block_kwarg • ',' f_kwrest opt_f_block_arg
  416                | f_block_kwarg • opt_f_block_arg
  717 f_block_kwarg: f_block_kwarg • ',' f_block_kw
  739 opt_f_block_arg: • ',' f_block_arg
  740                | • none
  781 none: ε •  ['|', ';', '\n']

    ','  shift, and go to state 1200

    $default  reduce using rule 781 (none)

    opt_f_block_arg  go to state 1201
    none             go to state 727


State 1124

  727 f_block_optarg: f_block_opt •

    $default  reduce using rule 727 (f_block_optarg)


State 1125

  419 opt_block_args_tail: • ',' block_args_tail
  420                    | ε •  ['|', ';', '\n']
  430 block_param: f_block_optarg • ',' f_rest_arg opt_block_args_tail
  431            | f_block_optarg • ',' f_rest_arg ',' f_arg opt_block_args_tail
  432            | f_block_optarg • opt_block_args_tail
  433            | f_block_optarg • ',' f_arg opt_block_args_tail
  728 f_block_optarg: f_block_optarg • ',' f_block_opt

    ','  shift, and go to state 1202

    $default  reduce using rule 420 (opt_block_args_tail)

    opt_block_args_tail  go to state 1203


State 1126

  419 opt_block_args_tail: • ',' block_args_tail
  420                    | ε •  ['|', ';', '\n']
  434 block_param: f_rest_arg • opt_block_args_tail
  435            | f_rest_arg • ',' f_arg opt_block_args_tail

    ','  shift, and go to state 1204

    $default  reduce using rule 420 (opt_block_args_tail)

    opt_block_args_tail  go to state 1205


State 1127

  418 block_args_tail: f_block_arg •

    $default  reduce using rule 418 (block_args_tail)


State 1128

  476 brace_body: @32 @33 @34 opt_block_param compstmt •

    $default  reduce using rule 476 (brace_body)


State 1129

  480 do_body: @35 @36 @37 opt_block_param bodystmt •

    $default  reduce using rule 480 (do_body)


State 1130

  303 args: args ',' "*" arg_value •  [',']
  308 mrhs: args ',' "*" arg_value •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "=>", "'}'", '}', ')', ';', '\n']

    ','       reduce using rule 303 (args)
    $default  reduce using rule 308 (mrhs)


State 1131

   41 command_asgn: primary_value '[' opt_call_args rbracket • "operator-assignment" lex_ctxt command_rhs
  123 lhs: primary_value '[' opt_call_args rbracket •  ['=']
  218 arg: primary_value '[' opt_call_args rbracket • "operator-assignment" lex_ctxt arg_rhs
  470 method_call: primary_value '[' opt_call_args rbracket •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`elsif'", "`else'", "`when'", "`in'", "`do'", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", '.', "**", "<=>", "==", "===", "!=", ">=", "<=", "&&", "||", "=~", "!~", "..", "...", "<<", ">>", "&.", "::", "=>", "'}'", '?', '>', '<', '|', '^', '&', '+', '-', '*', '/', '%', '{', '}', '[', ',', ')', ';', '\n']

    "operator-assignment"  shift, and go to state 955

    '='       reduce using rule 123 (lhs)
    $default  reduce using rule 470 (method_call)


State 1132

  504 p_as: p_expr • "=>" p_variable
  527 p_expr_basic: "(" @42 p_expr • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    "=>"  shift, and go to state 1060
    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 1206


State 1133

  520 p_expr_basic: "[" p_args rbracket •

    $default  reduce using rule 520 (p_expr_basic)


State 1134

  504 p_as: p_expr • "=>" p_variable
  543 p_arg: p_expr •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ',', ')', ']', ';', '\n']

    "=>"  shift, and go to state 1060

    $default  reduce using rule 543 (p_arg)


State 1135

  531 p_args: p_args_head p_rest •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ']', ';', '\n']
  532       | p_args_head p_rest • ',' p_args_post

    ','  shift, and go to state 1207

    $default  reduce using rule 531 (p_args)


State 1136

  530 p_args: p_args_head p_arg •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ']', ';', '\n']
  535 p_args_head: p_args_head p_arg • ','

    ','  shift, and go to state 1208

    $default  reduce using rule 530 (p_args)


State 1137

  521 p_expr_basic: "[" p_find rbracket •

    $default  reduce using rule 521 (p_expr_basic)


State 1138

  534 p_args_head: p_arg ',' •

    $default  reduce using rule 534 (p_args_head)


State 1139

  553 p_kw_label: "string literal" • string_contents tLABEL_END
  618 string_contents: ε •
  619                | • string_contents string_content

    $default  reduce using rule 618 (string_contents)

    string_contents  go to state 1209


State 1140

  524 p_expr_basic: "{" @41 p_kwargs • rbrace
  770 opt_nl: ε •  ['}']
  771       | • '\n'
  774 rbrace: • opt_nl '}'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 1053
    rbrace  go to state 1210


State 1141

  774 rbrace: opt_nl '}' •

    $default  reduce using rule 774 (rbrace)


State 1142

  553 p_kw_label: "string literal" string_contents tLABEL_END •

    $default  reduce using rule 553 (p_kw_label)


State 1143

  582 p_expr_ref: '^' "(" expr_value • ')'

    ')'  shift, and go to state 1211


State 1144

  504 p_as: p_expr "=>" p_variable •

    $default  reduce using rule 504 (p_as)


State 1145

  499 p_top_expr_body: p_expr ',' p_args •

    $default  reduce using rule 499 (p_top_expr_body)


State 1146

  536 p_args_tail: p_rest •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
  537            | p_rest • ',' p_args_post

    ','  shift, and go to state 1212

    $default  reduce using rule 536 (p_args_tail)


State 1147

  506 p_alt: p_alt '|' p_expr_basic •

    $default  reduce using rule 506 (p_alt)


State 1148

  537 p_args_tail: p_rest ',' p_args_post •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ']', ';', '\n']
  538 p_find: p_rest ',' p_args_post • ',' p_rest
  542 p_args_post: p_args_post • ',' p_arg

    ','  shift, and go to state 1213

    $default  reduce using rule 537 (p_args_tail)


State 1149

  541 p_args_post: p_arg •

    $default  reduce using rule 541 (p_args_post)


State 1150

  549 p_kwarg: p_kwarg ',' p_kw •

    $default  reduce using rule 549 (p_kwarg)


State 1151

  544 p_kwargs: p_kwarg ',' p_any_kwrest •

    $default  reduce using rule 544 (p_kwargs)


State 1152

  560 p_value: p_primitive ".." p_primitive •

    $default  reduce using rule 560 (p_value)


State 1153

  561 p_value: p_primitive "..." p_primitive •

    $default  reduce using rule 561 (p_value)


State 1154

  584 p_const: p_const "::" cname •

    $default  reduce using rule 584 (p_const)


State 1155

  519 p_expr_basic: p_const '[' rbracket •

    $default  reduce using rule 519 (p_expr_basic)


State 1156

  515 p_expr_basic: p_const '(' rparen •

    $default  reduce using rule 515 (p_expr_basic)


State 1157

  512 p_expr_basic: p_const p_lparen p_args • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 1214


State 1158

  513 p_expr_basic: p_const p_lparen p_find • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 1215


State 1159

  514 p_expr_basic: p_const p_lparen p_kwargs • rparen
  770 opt_nl: ε •  [')']
  771       | • '\n'
  772 rparen: • opt_nl ')'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 453
    rparen  go to state 1216


State 1160

  516 p_expr_basic: p_const p_lbracket p_args • rbracket
  770 opt_nl: ε •  [']']
  771       | • '\n'
  773 rbracket: • opt_nl ']'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl    go to state 785
    rbracket  go to state 1217


State 1161

  517 p_expr_basic: p_const p_lbracket p_find • rbracket
  770 opt_nl: ε •  [']']
  771       | • '\n'
  773 rbracket: • opt_nl ']'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl    go to state 785
    rbracket  go to state 1218


State 1162

  518 p_expr_basic: p_const p_lbracket p_kwargs • rbracket
  770 opt_nl: ε •  [']']
  771       | • '\n'
  773 rbracket: • opt_nl ']'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl    go to state 785
    rbracket  go to state 1219


State 1163

   41 command_asgn: primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs •

    $default  reduce using rule 41 (command_asgn)


State 1164

  218 arg: primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs •

    $default  reduce using rule 218 (arg)


State 1165

  128 lhs: ":: at EXPR_BEG" • "constant"
  329 primary: ":: at EXPR_BEG" • "constant"

    "constant"  shift, and go to state 1220


State 1166

  591 exc_var: "=>" lhs •

    $default  reduce using rule 591 (exc_var)


State 1167

  123 lhs: primary_value • '[' opt_call_args rbracket
  124    | primary_value • call_op "local variable or method"
  125    | primary_value • "::" "local variable or method"
  126    | primary_value • call_op "constant"
  127    | primary_value • "::" "constant"
  328 primary: primary_value • "::" "constant"
  463 method_call: primary_value • call_op operation2 opt_paren_args
  464            | primary_value • "::" operation2 paren_args
  465            | primary_value • "::" operation3
  466            | primary_value • call_op paren_args
  467            | primary_value • "::" paren_args
  470            | primary_value • '[' opt_call_args rbracket
  764 call_op: • '.'
  765        | • "&."

    '.'   shift, and go to state 374
    "&."  shift, and go to state 375
    "::"  shift, and go to state 1221
    '['   shift, and go to state 1222

    call_op  go to state 1223


State 1168

  121 lhs: user_variable •  ["`then'", ';', '\n']
  662 var_ref: user_variable •  ['.', "&.", "::", '[']

    "`then'"  reduce using rule 121 (lhs)
    ';'       reduce using rule 121 (lhs)
    '\n'      reduce using rule 121 (lhs)
    $default  reduce using rule 662 (var_ref)


State 1169

  122 lhs: keyword_variable •  ["`then'", ';', '\n']
  663 var_ref: keyword_variable •  ['.', "&.", "::", '[']

    "`then'"  reduce using rule 122 (lhs)
    ';'       reduce using rule 122 (lhs)
    '\n'      reduce using rule 122 (lhs)
    $default  reduce using rule 663 (var_ref)


State 1170

  129 lhs: backref •  ["`then'", ';', '\n']
  319 primary: backref •  ['.', "&.", "::", '[']

    "`then'"  reduce using rule 129 (lhs)
    ';'       reduce using rule 129 (lhs)
    '\n'      reduce using rule 129 (lhs)
    $default  reduce using rule 319 (primary)


State 1171

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  586 opt_rescue: k_rescue exc_list exc_var then • compstmt opt_rescue
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`rescue'", "`ensure'", "`end'", "`else'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`rescue'"   reduce using rule 781 (none)
    "`ensure'"   reduce using rule 781 (none)
    "`end'"      reduce using rule 781 (none)
    "`else'"     reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    compstmt          go to state 1224
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 1172

   11 bodystmt: compstmt opt_rescue k_else $@2 compstmt • opt_ensure
  382 k_ensure: • "`ensure'"
  593 opt_ensure: • k_ensure compstmt
  594           | • none
  781 none: ε •  ["`end'", "dummy end"]

    "`ensure'"  shift, and go to state 963

    $default  reduce using rule 781 (none)

    k_ensure    go to state 965
    opt_ensure  go to state 1225
    none        go to state 968


State 1173

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  395 if_tail: k_elsif expr_value then • compstmt if_tail
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`end'", "`elsif'", "`else'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`end'"      reduce using rule 781 (none)
    "`elsif'"    reduce using rule 781 (none)
    "`else'"     reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    compstmt          go to state 1226
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 1174

  389 then: • term
  390     | • "`then'"
  391     | • term "`then'"
  491 p_case_body: "`in'" @38 @39 p_top_expr • then $@40 compstmt p_cases
  777 term: • ';'
  778     | • '\n'

    "`then'"  shift, and go to state 627
    ';'       shift, and go to state 309
    '\n'      shift, and go to state 310

    then  go to state 1227
    term  go to state 629


State 1175

  494 p_top_expr: p_top_expr_body •  ["`then'", ';', '\n']
  495           | p_top_expr_body • "`if' modifier" expr_value
  496           | p_top_expr_body • "`unless' modifier" expr_value

    "`if' modifier"      shift, and go to state 1228
    "`unless' modifier"  shift, and go to state 1229

    $default  reduce using rule 494 (p_top_expr)


State 1176

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  484 case_args: case_args ',' "*" • arg_value
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 254
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 1230
    primary           go to state 90
    primary_value     go to state 256
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 1177

  483 case_args: case_args ',' arg_value •

    $default  reduce using rule 483 (case_args)


State 1178

  383 k_when: • "`when'"
  384 k_else: • "`else'"
  396 opt_else: • none
  397         | • k_else compstmt
  485 case_body: • k_when case_args then compstmt cases
  485          | k_when case_args then compstmt • cases
  486 cases: • opt_else
  487      | • case_body
  781 none: ε •  ["`end'", "dummy end"]

    "`else'"  shift, and go to state 964
    "`when'"  shift, and go to state 810

    $default  reduce using rule 781 (none)

    k_when     go to state 811
    k_else     go to state 970
    opt_else   go to state 1231
    case_body  go to state 1232
    cases      go to state 1233
    none       go to state 974


State 1179

  357 primary: k_class "<<" expr $@22 term bodystmt k_end •

    $default  reduce using rule 357 (primary)


State 1180

  452 f_larglist: '(' f_args opt_bv_decl ')' •

    $default  reduce using rule 452 (f_larglist)


State 1181

  442 opt_bv_decl: opt_nl ';' • bv_decls opt_nl
  443 bv_decls: • bvar
  444         | • bv_decls ',' bvar
  445 bvar: • "local variable or method"
  446     | • f_bad_arg
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"

    "local variable or method"  shift, and go to state 1234
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532

    bv_decls   go to state 1235
    bvar       go to state 1236
    f_bad_arg  go to state 1237


State 1182

   11 bodystmt: • compstmt opt_rescue k_else $@2 compstmt opt_ensure
   12         | • compstmt opt_rescue opt_ensure
   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  456 lambda_body: "`do' for lambda" $@31 • bodystmt k_end
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`rescue'", "`ensure'", "`end'", "`else'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`rescue'"   reduce using rule 781 (none)
    "`ensure'"   reduce using rule 781 (none)
    "`end'"      reduce using rule 781 (none)
    "`else'"     reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    bodystmt          go to state 1238
    compstmt          go to state 626
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 1183

  454 lambda_body: tLAMBEG compstmt • '}'

    '}'  shift, and go to state 1239


State 1184

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  632 string_content: tSTRING_DBEG $@44 @45 @46 @47 @48 • compstmt "'}'"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["'}'", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "'}'"  reduce using rule 781 (none)
    ';'    reduce using rule 781 (none)
    '\n'   reduce using rule 781 (none)

    compstmt          go to state 1240
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 1185

  403 f_marg_list: f_marg_list • ',' f_marg
  406 f_margs: f_marg_list ',' f_rest_marg ',' f_marg_list •  [')', '\n']

    ','  shift, and go to state 1110

    $default  reduce using rule 406 (f_margs)


State 1186

  687 f_args: f_arg ',' f_optarg ',' f_arg opt_args_tail •

    $default  reduce using rule 687 (f_args)


State 1187

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  556 p_kwnorest: • kwrest_mark "`nil'"
  677 args_tail: • f_kwarg ',' f_kwrest opt_f_block_arg
  678          | • f_kwarg opt_f_block_arg
  679          | • f_any_kwrest opt_f_block_arg
  680          | • f_block_arg
  681          | • args_forward
  682 opt_args_tail: ',' • args_tail
  685 f_args: f_arg ',' f_optarg ',' f_rest_arg ',' • f_arg opt_args_tail
  699 args_forward: • "(..."
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  712 f_kw: • f_label arg_value
  713     | • f_label
  718 f_kwarg: • f_kw
  719        | • f_kwarg ',' f_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "(..."                      shift, and go to state 535
    "("                         shift, and go to state 536
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540

    f_any_kwrest  go to state 542
    p_kwnorest    go to state 543
    args_tail     go to state 874
    args_forward  go to state 546
    f_bad_arg     go to state 547
    f_norm_arg    go to state 548
    f_arg_asgn    go to state 884
    f_arg_item    go to state 550
    f_arg         go to state 1241
    f_label       go to state 552
    f_kw          go to state 553
    f_kwarg       go to state 554
    kwrest_mark   go to state 555
    f_no_kwarg    go to state 556
    f_kwrest      go to state 557
    blkarg_mark   go to state 562
    f_block_arg   go to state 563


State 1188

  684 f_args: f_arg ',' f_optarg ',' f_rest_arg opt_args_tail •

    $default  reduce using rule 684 (f_args)


State 1189

  689 f_args: f_arg ',' f_rest_arg ',' f_arg opt_args_tail •

    $default  reduce using rule 689 (f_args)


State 1190

  692 f_args: f_optarg ',' f_rest_arg ',' f_arg opt_args_tail •

    $default  reduce using rule 692 (f_args)


State 1191

  417 block_args_tail: f_any_kwrest opt_f_block_arg •

    $default  reduce using rule 417 (block_args_tail)


State 1192

  440 block_param_def: '|' block_param opt_bv_decl • '|'

    '|'  shift, and go to state 1242


State 1193

  439 block_param_def: '|' opt_bv_decl '|' •

    $default  reduce using rule 439 (block_param_def)


State 1194

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  726 f_block_opt: f_arg_asgn f_eq • primary_value
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 250
    "`next'"                    shift, and go to state 251
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 252
    "`super'"                   shift, and go to state 253
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 281
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    ":: at EXPR_BEG"            shift, and go to state 1198
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 283

    defn_head         go to state 285
    defs_head         go to state 286
    fcall             go to state 254
    primary           go to state 288
    primary_value     go to state 1243
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 257
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 405
    keyword_variable  go to state 406
    var_ref           go to state 124
    backref           go to state 407
    operation         go to state 127


State 1195

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  415 block_args_tail: • f_block_kwarg ',' f_kwrest opt_f_block_arg
  416                | • f_block_kwarg opt_f_block_arg
  417                | • f_any_kwrest opt_f_block_arg
  418                | • f_block_arg
  419 opt_block_args_tail: ',' • block_args_tail
  421 excessed_comma: ',' •  ['|', ';', '\n']
  422 block_param: f_arg ',' • f_block_optarg ',' f_rest_arg opt_block_args_tail
  423            | f_arg ',' • f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail
  424            | f_arg ',' • f_block_optarg opt_block_args_tail
  425            | f_arg ',' • f_block_optarg ',' f_arg opt_block_args_tail
  426            | f_arg ',' • f_rest_arg opt_block_args_tail
  428            | f_arg ',' • f_rest_arg ',' f_arg opt_block_args_tail
  556 p_kwnorest: • kwrest_mark "`nil'"
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  710 f_arg: f_arg ',' • f_arg_item
  711 f_label: • "label"
  714 f_block_kw: • f_label primary_value
  715           | • f_label
  716 f_block_kwarg: • f_block_kw
  717              | • f_block_kwarg ',' f_block_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  726 f_block_opt: • f_arg_asgn f_eq primary_value
  727 f_block_optarg: • f_block_opt
  728               | • f_block_optarg ',' f_block_opt
  731 restarg_mark: • '*'
  732             | • "*"
  733 f_rest_arg: • restarg_mark "local variable or method"
  734           | • restarg_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "("                         shift, and go to state 536
    "*"                         shift, and go to state 537
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540
    '*'                         shift, and go to state 541

    $default  reduce using rule 421 (excessed_comma)

    f_any_kwrest     go to state 1115
    block_args_tail  go to state 1244
    p_kwnorest       go to state 543
    f_bad_arg        go to state 547
    f_norm_arg       go to state 548
    f_arg_asgn       go to state 1119
    f_arg_item       go to state 875
    f_label          go to state 1121
    f_block_kw       go to state 1122
    f_block_kwarg    go to state 1123
    kwrest_mark      go to state 555
    f_no_kwarg       go to state 556
    f_kwrest         go to state 557
    f_block_opt      go to state 1124
    f_block_optarg   go to state 1245
    restarg_mark     go to state 560
    f_rest_arg       go to state 1246
    blkarg_mark      go to state 562
    f_block_arg      go to state 1127


State 1196

  429 block_param: f_arg opt_block_args_tail •

    $default  reduce using rule 429 (block_param)


State 1197

  427 block_param: f_arg excessed_comma •

    $default  reduce using rule 427 (block_param)


State 1198

  329 primary: ":: at EXPR_BEG" • "constant"

    "constant"  shift, and go to state 1247


State 1199

  328 primary: primary_value • "::" "constant"
  463 method_call: primary_value • call_op operation2 opt_paren_args
  464            | primary_value • "::" operation2 paren_args
  465            | primary_value • "::" operation3
  466            | primary_value • call_op paren_args
  467            | primary_value • "::" paren_args
  470            | primary_value • '[' opt_call_args rbracket
  714 f_block_kw: f_label primary_value •  ['|', ',', ';', '\n']
  764 call_op: • '.'
  765        | • "&."

    '.'   shift, and go to state 374
    "&."  shift, and go to state 375
    "::"  shift, and go to state 1248
    '['   shift, and go to state 648

    $default  reduce using rule 714 (f_block_kw)

    call_op  go to state 649


State 1200

  415 block_args_tail: f_block_kwarg ',' • f_kwrest opt_f_block_arg
  711 f_label: • "label"
  714 f_block_kw: • f_label primary_value
  715           | • f_label
  717 f_block_kwarg: f_block_kwarg ',' • f_block_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark
  739 opt_f_block_arg: ',' • f_block_arg

    "label"  shift, and go to state 533
    "**"     shift, and go to state 534
    "**arg"  shift, and go to state 538
    "&"      shift, and go to state 539
    '&'      shift, and go to state 540

    f_label      go to state 1121
    f_block_kw   go to state 1249
    kwrest_mark  go to state 879
    f_kwrest     go to state 1250
    blkarg_mark  go to state 562
    f_block_arg  go to state 871


State 1201

  416 block_args_tail: f_block_kwarg opt_f_block_arg •

    $default  reduce using rule 416 (block_args_tail)


State 1202

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  415 block_args_tail: • f_block_kwarg ',' f_kwrest opt_f_block_arg
  416                | • f_block_kwarg opt_f_block_arg
  417                | • f_any_kwrest opt_f_block_arg
  418                | • f_block_arg
  419 opt_block_args_tail: ',' • block_args_tail
  430 block_param: f_block_optarg ',' • f_rest_arg opt_block_args_tail
  431            | f_block_optarg ',' • f_rest_arg ',' f_arg opt_block_args_tail
  433            | f_block_optarg ',' • f_arg opt_block_args_tail
  556 p_kwnorest: • kwrest_mark "`nil'"
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  714 f_block_kw: • f_label primary_value
  715           | • f_label
  716 f_block_kwarg: • f_block_kw
  717              | • f_block_kwarg ',' f_block_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  726 f_block_opt: • f_arg_asgn f_eq primary_value
  728 f_block_optarg: f_block_optarg ',' • f_block_opt
  731 restarg_mark: • '*'
  732             | • "*"
  733 f_rest_arg: • restarg_mark "local variable or method"
  734           | • restarg_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "("                         shift, and go to state 536
    "*"                         shift, and go to state 537
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540
    '*'                         shift, and go to state 541

    f_any_kwrest     go to state 1115
    block_args_tail  go to state 1244
    p_kwnorest       go to state 543
    f_bad_arg        go to state 547
    f_norm_arg       go to state 548
    f_arg_asgn       go to state 1119
    f_arg_item       go to state 550
    f_arg            go to state 1251
    f_label          go to state 1121
    f_block_kw       go to state 1122
    f_block_kwarg    go to state 1123
    kwrest_mark      go to state 555
    f_no_kwarg       go to state 556
    f_kwrest         go to state 557
    f_block_opt      go to state 1252
    restarg_mark     go to state 560
    f_rest_arg       go to state 1253
    blkarg_mark      go to state 562
    f_block_arg      go to state 1127


State 1203

  432 block_param: f_block_optarg opt_block_args_tail •

    $default  reduce using rule 432 (block_param)


State 1204

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  415 block_args_tail: • f_block_kwarg ',' f_kwrest opt_f_block_arg
  416                | • f_block_kwarg opt_f_block_arg
  417                | • f_any_kwrest opt_f_block_arg
  418                | • f_block_arg
  419 opt_block_args_tail: ',' • block_args_tail
  435 block_param: f_rest_arg ',' • f_arg opt_block_args_tail
  556 p_kwnorest: • kwrest_mark "`nil'"
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  714 f_block_kw: • f_label primary_value
  715           | • f_label
  716 f_block_kwarg: • f_block_kw
  717              | • f_block_kwarg ',' f_block_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "("                         shift, and go to state 536
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540

    f_any_kwrest     go to state 1115
    block_args_tail  go to state 1244
    p_kwnorest       go to state 543
    f_bad_arg        go to state 547
    f_norm_arg       go to state 548
    f_arg_asgn       go to state 884
    f_arg_item       go to state 550
    f_arg            go to state 1254
    f_label          go to state 1121
    f_block_kw       go to state 1122
    f_block_kwarg    go to state 1123
    kwrest_mark      go to state 555
    f_no_kwarg       go to state 556
    f_kwrest         go to state 557
    blkarg_mark      go to state 562
    f_block_arg      go to state 1127


State 1205

  434 block_param: f_rest_arg opt_block_args_tail •

    $default  reduce using rule 434 (block_param)


State 1206

  527 p_expr_basic: "(" @42 p_expr rparen •

    $default  reduce using rule 527 (p_expr_basic)


State 1207

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  503 p_expr: • p_as
  504 p_as: • p_expr "=>" p_variable
  505     | • p_alt
  506 p_alt: • p_alt '|' p_expr_basic
  507      | • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  513             | • p_const p_lparen p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  521             | • "[" p_find rbracket
  522             | • "[" rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  532 p_args: p_args_head p_rest ',' • p_args_post
  541 p_args_post: • p_arg
  542            | • p_args_post ',' p_arg
  543 p_arg: • p_expr
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283

    lambda            go to state 917
    p_expr            go to state 1134
    p_as              go to state 920
    p_alt             go to state 921
    p_expr_basic      go to state 922
    p_args_post       go to state 1255
    p_arg             go to state 1149
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947


State 1208

  535 p_args_head: p_args_head p_arg ',' •

    $default  reduce using rule 535 (p_args_head)


State 1209

  553 p_kw_label: "string literal" string_contents • tLABEL_END
  619 string_contents: string_contents • string_content
  624 string_content: • "literal content"
  626               | • tSTRING_DVAR @43 string_dvar
  632               | • tSTRING_DBEG $@44 @45 @46 @47 @48 compstmt "'}'"

    "literal content"  shift, and go to state 504
    tSTRING_DBEG       shift, and go to state 506
    tSTRING_DVAR       shift, and go to state 507
    tLABEL_END         shift, and go to state 1142

    string_content  go to state 508


State 1210

  524 p_expr_basic: "{" @41 p_kwargs rbrace •

    $default  reduce using rule 524 (p_expr_basic)


State 1211

  582 p_expr_ref: '^' "(" expr_value ')' •

    $default  reduce using rule 582 (p_expr_ref)


State 1212

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  503 p_expr: • p_as
  504 p_as: • p_expr "=>" p_variable
  505     | • p_alt
  506 p_alt: • p_alt '|' p_expr_basic
  507      | • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  513             | • p_const p_lparen p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  521             | • "[" p_find rbracket
  522             | • "[" rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  537 p_args_tail: p_rest ',' • p_args_post
  541 p_args_post: • p_arg
  542            | • p_args_post ',' p_arg
  543 p_arg: • p_expr
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283

    lambda            go to state 917
    p_expr            go to state 1134
    p_as              go to state 920
    p_alt             go to state 921
    p_expr_basic      go to state 922
    p_args_post       go to state 1256
    p_arg             go to state 1149
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947


State 1213

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  503 p_expr: • p_as
  504 p_as: • p_expr "=>" p_variable
  505     | • p_alt
  506 p_alt: • p_alt '|' p_expr_basic
  507      | • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  513             | • p_const p_lparen p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  521             | • "[" p_find rbracket
  522             | • "[" rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  538 p_find: p_rest ',' p_args_post ',' • p_rest
  539 p_rest: • "*" "local variable or method"
  540       | • "*"
  542 p_args_post: p_args_post ',' • p_arg
  543 p_arg: • p_expr
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "*"                         shift, and go to state 914
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283

    lambda            go to state 917
    p_expr            go to state 1134
    p_as              go to state 920
    p_alt             go to state 921
    p_expr_basic      go to state 922
    p_rest            go to state 1257
    p_arg             go to state 1258
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947


State 1214

  512 p_expr_basic: p_const p_lparen p_args rparen •

    $default  reduce using rule 512 (p_expr_basic)


State 1215

  513 p_expr_basic: p_const p_lparen p_find rparen •

    $default  reduce using rule 513 (p_expr_basic)


State 1216

  514 p_expr_basic: p_const p_lparen p_kwargs rparen •

    $default  reduce using rule 514 (p_expr_basic)


State 1217

  516 p_expr_basic: p_const p_lbracket p_args rbracket •

    $default  reduce using rule 516 (p_expr_basic)


State 1218

  517 p_expr_basic: p_const p_lbracket p_find rbracket •

    $default  reduce using rule 517 (p_expr_basic)


State 1219

  518 p_expr_basic: p_const p_lbracket p_kwargs rbracket •

    $default  reduce using rule 518 (p_expr_basic)


State 1220

  128 lhs: ":: at EXPR_BEG" "constant" •  ["`then'", ';', '\n']
  329 primary: ":: at EXPR_BEG" "constant" •  ['.', "&.", "::", '[']

    "`then'"  reduce using rule 128 (lhs)
    ';'       reduce using rule 128 (lhs)
    '\n'      reduce using rule 128 (lhs)
    $default  reduce using rule 329 (primary)


State 1221

  125 lhs: primary_value "::" • "local variable or method"
  127    | primary_value "::" • "constant"
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  328 primary: primary_value "::" • "constant"
  464 method_call: primary_value "::" • operation2 paren_args
  465            | primary_value "::" • operation3
  467            | primary_value "::" • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op
  759 operation3: • "local variable or method"
  760           | • "method"
  761           | • op

    "local variable or method"  shift, and go to state 1259
    "method"                    shift, and go to state 610
    "constant"                  shift, and go to state 1260
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 612
    paren_args  go to state 613
    operation   go to state 614
    operation2  go to state 690
    operation3  go to state 616


State 1222

   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  123    | primary_value '[' • opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  271 arg_value: • arg
  283 opt_call_args: • none
  284              | • call_args
  285              | • args ','
  286              | • args ',' assocs ','
  287              | • assocs ','
  288 call_args: • command
  289          | • args opt_block_arg
  290          | • assocs opt_block_arg
  291          | • args ',' assocs opt_block_arg
  292          | • block_arg
  295 block_arg: • "&" arg_value
  296          | • "&"
  299 args: • arg_value
  300     | • "*" arg_value
  301     | • "*"
  302     | • args ',' arg_value
  303     | • args ',' "*" arg_value
  304     | • args ',' "*"
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  470            | primary_value '[' • opt_call_args rbracket
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  746 assocs: • assoc
  747       | • assocs ',' assoc
  748 assoc: • arg_value "=>" arg_value
  749      | • "label" arg_value
  750      | • "label"
  751      | • "string literal" string_contents tLABEL_END arg_value
  752      | • "**arg" arg_value
  753      | • "**arg"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  [']', '\n']

    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 209
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "label"                     shift, and go to state 210
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 213
    "**arg"                     shift, and go to state 214
    "&"                         shift, and go to state 215
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 216
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 217
    '~'                         shift, and go to state 69

    $default  reduce using rule 781 (none)

    defn_head         go to state 218
    defs_head         go to state 219
    fcall             go to state 80
    command           go to state 220
    lhs               go to state 221
    arg               go to state 222
    rel_expr          go to state 89
    arg_value         go to state 223
    opt_call_args     go to state 1261
    call_args         go to state 458
    block_arg         go to state 225
    args              go to state 618
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    assocs            go to state 461
    assoc             go to state 233
    operation         go to state 127
    none              go to state 462


State 1223

  124 lhs: primary_value call_op • "local variable or method"
  126    | primary_value call_op • "constant"
  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  463 method_call: primary_value call_op • operation2 opt_paren_args
  466            | primary_value call_op • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op

    "local variable or method"  shift, and go to state 1262
    "method"                    shift, and go to state 620
    "constant"                  shift, and go to state 1263
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 622
    paren_args  go to state 623
    operation   go to state 614
    operation2  go to state 691


State 1224

  381 k_rescue: • "`rescue'"
  586 opt_rescue: • k_rescue exc_list exc_var then compstmt opt_rescue
  586           | k_rescue exc_list exc_var then compstmt • opt_rescue
  587           | • none
  781 none: ε •  ["`ensure'", "`end'", "`else'", "dummy end"]

    "`rescue'"  shift, and go to state 795

    $default  reduce using rule 781 (none)

    k_rescue    go to state 796
    opt_rescue  go to state 1264
    none        go to state 798


State 1225

   11 bodystmt: compstmt opt_rescue k_else $@2 compstmt opt_ensure •

    $default  reduce using rule 11 (bodystmt)


State 1226

  384 k_else: • "`else'"
  385 k_elsif: • "`elsif'"
  394 if_tail: • opt_else
  395        | • k_elsif expr_value then compstmt if_tail
  395        | k_elsif expr_value then compstmt • if_tail
  396 opt_else: • none
  397         | • k_else compstmt
  781 none: ε •  ["`end'", "dummy end"]

    "`elsif'"  shift, and go to state 969
    "`else'"   shift, and go to state 964

    $default  reduce using rule 781 (none)

    k_else    go to state 970
    k_elsif   go to state 971
    if_tail   go to state 1265
    opt_else  go to state 973
    none      go to state 974


State 1227

  490 $@40: ε •
  491 p_case_body: "`in'" @38 @39 p_top_expr then • $@40 compstmt p_cases

    $default  reduce using rule 490 ($@40)

    $@40  go to state 1266


State 1228

   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   70 expr_value: • expr
   71           | • error
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  495 p_top_expr: p_top_expr_body "`if' modifier" • expr_value
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 380
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 381
    defn_head         go to state 218
    defs_head         go to state 219
    expr_value        go to state 1267
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 1229

   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   70 expr_value: • expr
   71           | • error
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  496 p_top_expr: p_top_expr_body "`unless' modifier" • expr_value
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"

    error                       shift, and go to state 380
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`defined?'"                shift, and go to state 29
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 211
    "("                         shift, and go to state 212
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    expr              go to state 381
    defn_head         go to state 218
    defs_head         go to state 219
    expr_value        go to state 1268
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    lhs               go to state 221
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 227
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 228
    keyword_variable  go to state 229
    var_ref           go to state 124
    var_lhs           go to state 230
    backref           go to state 231
    operation         go to state 127


State 1230

  484 case_args: case_args ',' "*" arg_value •

    $default  reduce using rule 484 (case_args)


State 1231

  486 cases: opt_else •

    $default  reduce using rule 486 (cases)


State 1232

  487 cases: case_body •

    $default  reduce using rule 487 (cases)


State 1233

  485 case_body: k_when case_args then compstmt cases •

    $default  reduce using rule 485 (case_body)


State 1234

  445 bvar: "local variable or method" •

    $default  reduce using rule 445 (bvar)


State 1235

  442 opt_bv_decl: opt_nl ';' bv_decls • opt_nl
  444 bv_decls: bv_decls • ',' bvar
  770 opt_nl: ε •  ['|', ')']
  771       | • '\n'

    ','   shift, and go to state 1269
    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl  go to state 1270


State 1236

  443 bv_decls: bvar •

    $default  reduce using rule 443 (bv_decls)


State 1237

  446 bvar: f_bad_arg •

    $default  reduce using rule 446 (bvar)


State 1238

  386 k_end: • "`end'"
  387      | • "dummy end"
  456 lambda_body: "`do' for lambda" $@31 bodystmt • k_end

    "`end'"      shift, and go to state 754
    "dummy end"  shift, and go to state 755

    k_end  go to state 1271


State 1239

  454 lambda_body: tLAMBEG compstmt '}' •

    $default  reduce using rule 454 (lambda_body)


State 1240

  632 string_content: tSTRING_DBEG $@44 @45 @46 @47 @48 compstmt • "'}'"

    "'}'"  shift, and go to state 1272


State 1241

  682 opt_args_tail: • ',' args_tail
  683              | ε •  ["`do' for lambda", tLAMBEG, ')', ';', '\n']
  685 f_args: f_arg ',' f_optarg ',' f_rest_arg ',' f_arg • opt_args_tail
  710 f_arg: f_arg • ',' f_arg_item

    ','  shift, and go to state 1015

    $default  reduce using rule 683 (opt_args_tail)

    opt_args_tail  go to state 1273


State 1242

  440 block_param_def: '|' block_param opt_bv_decl '|' •

    $default  reduce using rule 440 (block_param_def)


State 1243

  328 primary: primary_value • "::" "constant"
  463 method_call: primary_value • call_op operation2 opt_paren_args
  464            | primary_value • "::" operation2 paren_args
  465            | primary_value • "::" operation3
  466            | primary_value • call_op paren_args
  467            | primary_value • "::" paren_args
  470            | primary_value • '[' opt_call_args rbracket
  726 f_block_opt: f_arg_asgn f_eq primary_value •  ['|', ',', ';', '\n']
  764 call_op: • '.'
  765        | • "&."

    '.'   shift, and go to state 374
    "&."  shift, and go to state 375
    "::"  shift, and go to state 1248
    '['   shift, and go to state 648

    $default  reduce using rule 726 (f_block_opt)

    call_op  go to state 649


State 1244

  419 opt_block_args_tail: ',' block_args_tail •

    $default  reduce using rule 419 (opt_block_args_tail)


State 1245

  419 opt_block_args_tail: • ',' block_args_tail
  420                    | ε •  ['|', ';', '\n']
  422 block_param: f_arg ',' f_block_optarg • ',' f_rest_arg opt_block_args_tail
  423            | f_arg ',' f_block_optarg • ',' f_rest_arg ',' f_arg opt_block_args_tail
  424            | f_arg ',' f_block_optarg • opt_block_args_tail
  425            | f_arg ',' f_block_optarg • ',' f_arg opt_block_args_tail
  728 f_block_optarg: f_block_optarg • ',' f_block_opt

    ','  shift, and go to state 1274

    $default  reduce using rule 420 (opt_block_args_tail)

    opt_block_args_tail  go to state 1275


State 1246

  419 opt_block_args_tail: • ',' block_args_tail
  420                    | ε •  ['|', ';', '\n']
  426 block_param: f_arg ',' f_rest_arg • opt_block_args_tail
  428            | f_arg ',' f_rest_arg • ',' f_arg opt_block_args_tail

    ','  shift, and go to state 1276

    $default  reduce using rule 420 (opt_block_args_tail)

    opt_block_args_tail  go to state 1277


State 1247

  329 primary: ":: at EXPR_BEG" "constant" •

    $default  reduce using rule 329 (primary)


State 1248

  145 op: • '|'
  146   | • '^'
  147   | • '&'
  148   | • "<=>"
  149   | • "=="
  150   | • "==="
  151   | • "=~"
  152   | • "!~"
  153   | • '>'
  154   | • ">="
  155   | • '<'
  156   | • "<="
  157   | • "!="
  158   | • "<<"
  159   | • ">>"
  160   | • '+'
  161   | • '-'
  162   | • '*'
  163   | • "*"
  164   | • '/'
  165   | • '%'
  166   | • "**"
  167   | • "**arg"
  168   | • '!'
  169   | • '~'
  170   | • "unary+"
  171   | • "unary-"
  172   | • "[]"
  173   | • "[]="
  174   | • '`'
  278 paren_args: • '(' opt_call_args rparen
  279           | • '(' args ',' args_forward rparen
  280           | • '(' args_forward rparen
  328 primary: primary_value "::" • "constant"
  464 method_call: primary_value "::" • operation2 paren_args
  465            | primary_value "::" • operation3
  467            | primary_value "::" • paren_args
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  757 operation2: • operation
  758           | • op
  759 operation3: • "local variable or method"
  760           | • "method"
  761           | • op

    "local variable or method"  shift, and go to state 1278
    "method"                    shift, and go to state 610
    "constant"                  shift, and go to state 1279
    "unary+"                    shift, and go to state 173
    "unary-"                    shift, and go to state 174
    "**"                        shift, and go to state 175
    "<=>"                       shift, and go to state 176
    "=="                        shift, and go to state 177
    "==="                       shift, and go to state 178
    "!="                        shift, and go to state 179
    ">="                        shift, and go to state 180
    "<="                        shift, and go to state 181
    "=~"                        shift, and go to state 182
    "!~"                        shift, and go to state 183
    "[]"                        shift, and go to state 184
    "[]="                       shift, and go to state 185
    "<<"                        shift, and go to state 186
    ">>"                        shift, and go to state 187
    "*"                         shift, and go to state 188
    "**arg"                     shift, and go to state 189
    '>'                         shift, and go to state 190
    '<'                         shift, and go to state 191
    '|'                         shift, and go to state 192
    '^'                         shift, and go to state 193
    '&'                         shift, and go to state 194
    '+'                         shift, and go to state 195
    '-'                         shift, and go to state 196
    '*'                         shift, and go to state 197
    '/'                         shift, and go to state 198
    '%'                         shift, and go to state 199
    '!'                         shift, and go to state 200
    '~'                         shift, and go to state 201
    '`'                         shift, and go to state 202
    '('                         shift, and go to state 238

    op          go to state 612
    paren_args  go to state 613
    operation   go to state 614
    operation2  go to state 690
    operation3  go to state 616


State 1249

  717 f_block_kwarg: f_block_kwarg ',' f_block_kw •

    $default  reduce using rule 717 (f_block_kwarg)


State 1250

  415 block_args_tail: f_block_kwarg ',' f_kwrest • opt_f_block_arg
  739 opt_f_block_arg: • ',' f_block_arg
  740                | • none
  781 none: ε •  ['|', ';', '\n']

    ','  shift, and go to state 725

    $default  reduce using rule 781 (none)

    opt_f_block_arg  go to state 1280
    none             go to state 727


State 1251

  419 opt_block_args_tail: • ',' block_args_tail
  420                    | ε •  ['|', ';', '\n']
  433 block_param: f_block_optarg ',' f_arg • opt_block_args_tail
  710 f_arg: f_arg • ',' f_arg_item

    ','  shift, and go to state 1281

    $default  reduce using rule 420 (opt_block_args_tail)

    opt_block_args_tail  go to state 1282


State 1252

  728 f_block_optarg: f_block_optarg ',' f_block_opt •

    $default  reduce using rule 728 (f_block_optarg)


State 1253

  419 opt_block_args_tail: • ',' block_args_tail
  420                    | ε •  ['|', ';', '\n']
  430 block_param: f_block_optarg ',' f_rest_arg • opt_block_args_tail
  431            | f_block_optarg ',' f_rest_arg • ',' f_arg opt_block_args_tail

    ','  shift, and go to state 1283

    $default  reduce using rule 420 (opt_block_args_tail)

    opt_block_args_tail  go to state 1284


State 1254

  419 opt_block_args_tail: • ',' block_args_tail
  420                    | ε •  ['|', ';', '\n']
  435 block_param: f_rest_arg ',' f_arg • opt_block_args_tail
  710 f_arg: f_arg • ',' f_arg_item

    ','  shift, and go to state 1281

    $default  reduce using rule 420 (opt_block_args_tail)

    opt_block_args_tail  go to state 1285


State 1255

  532 p_args: p_args_head p_rest ',' p_args_post •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ']', ';', '\n']
  542 p_args_post: p_args_post • ',' p_arg

    ','  shift, and go to state 1286

    $default  reduce using rule 532 (p_args)


State 1256

  537 p_args_tail: p_rest ',' p_args_post •  ["end-of-input", "`rescue'", "`ensure'", "`end'", "`then'", "`elsif'", "`else'", "`when'", "`in'", "`do' for condition", "`and'", "`or'", "`if' modifier", "`unless' modifier", "`while' modifier", "`until' modifier", "`rescue' modifier", "dummy end", "'}'", '}', ')', ';', '\n']
  542 p_args_post: p_args_post • ',' p_arg

    ','  shift, and go to state 1286

    $default  reduce using rule 537 (p_args_tail)


State 1257

  538 p_find: p_rest ',' p_args_post ',' p_rest •

    $default  reduce using rule 538 (p_find)


State 1258

  542 p_args_post: p_args_post ',' p_arg •

    $default  reduce using rule 542 (p_args_post)


State 1259

  125 lhs: primary_value "::" "local variable or method" •  ["`then'", ';', '\n']
  754 operation: "local variable or method" •  ['(']
  759 operation3: "local variable or method" •  ["`do'", '.', "&.", "::", '{', '[']

    "`then'"  reduce using rule 125 (lhs)
    '('       reduce using rule 754 (operation)
    ';'       reduce using rule 125 (lhs)
    '\n'      reduce using rule 125 (lhs)
    $default  reduce using rule 759 (operation3)


State 1260

  127 lhs: primary_value "::" "constant" •  ["`then'", ';', '\n']
  328 primary: primary_value "::" "constant" •  ['.', "&.", "::", '[']
  755 operation: "constant" •  ['(']

    "`then'"  reduce using rule 127 (lhs)
    '('       reduce using rule 755 (operation)
    ';'       reduce using rule 127 (lhs)
    '\n'      reduce using rule 127 (lhs)
    $default  reduce using rule 328 (primary)


State 1261

  123 lhs: primary_value '[' opt_call_args • rbracket
  470 method_call: primary_value '[' opt_call_args • rbracket
  770 opt_nl: ε •  [']']
  771       | • '\n'
  773 rbracket: • opt_nl ']'

    '\n'  shift, and go to state 242

    $default  reduce using rule 770 (opt_nl)

    opt_nl    go to state 785
    rbracket  go to state 1287


State 1262

  124 lhs: primary_value call_op "local variable or method" •  ["`then'", ';', '\n']
  754 operation: "local variable or method" •  ["`do'", '.', "&.", "::", '{', '[', '(']

    "`then'"  reduce using rule 124 (lhs)
    ';'       reduce using rule 124 (lhs)
    '\n'      reduce using rule 124 (lhs)
    $default  reduce using rule 754 (operation)


State 1263

  126 lhs: primary_value call_op "constant" •  ["`then'", ';', '\n']
  755 operation: "constant" •  ["`do'", '.', "&.", "::", '{', '[', '(']

    "`then'"  reduce using rule 126 (lhs)
    ';'       reduce using rule 126 (lhs)
    '\n'      reduce using rule 126 (lhs)
    $default  reduce using rule 755 (operation)


State 1264

  586 opt_rescue: k_rescue exc_list exc_var then compstmt opt_rescue •

    $default  reduce using rule 586 (opt_rescue)


State 1265

  395 if_tail: k_elsif expr_value then compstmt if_tail •

    $default  reduce using rule 395 (if_tail)


State 1266

   13 compstmt: • stmts opt_terms
   14 stmts: • none
   15      | • stmt_or_begin
   16      | • stmts terms stmt_or_begin
   17 stmt_or_begin: • stmt
   19              | • "`BEGIN'" $@3 begin_block
   21 stmt: • "`alias'" fitem $@4 fitem
   22     | • "`alias'" "global variable" "global variable"
   23     | • "`alias'" "global variable" "back reference"
   24     | • "`alias'" "global variable" "numbered reference"
   25     | • "`undef'" undef_list
   26     | • stmt "`if' modifier" expr_value
   27     | • stmt "`unless' modifier" expr_value
   28     | • stmt "`while' modifier" expr_value
   29     | • stmt "`until' modifier" expr_value
   30     | • stmt "`rescue' modifier" stmt
   31     | • "`END'" '{' compstmt '}'
   32     | • command_asgn
   33     | • mlhs '=' lex_ctxt command_call
   34     | • lhs '=' lex_ctxt mrhs
   35     | • mlhs '=' lex_ctxt mrhs_arg "`rescue' modifier" stmt
   36     | • mlhs '=' lex_ctxt mrhs_arg
   37     | • expr
   38     | • error
   39 command_asgn: • lhs '=' lex_ctxt command_rhs
   40             | • var_lhs "operator-assignment" lex_ctxt command_rhs
   41             | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt command_rhs
   42             | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt command_rhs
   43             | • primary_value call_op "constant" "operator-assignment" lex_ctxt command_rhs
   44             | • primary_value "::" "constant" "operator-assignment" lex_ctxt command_rhs
   45             | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt command_rhs
   46             | • defn_head f_opt_paren_args '=' command
   47             | • defn_head f_opt_paren_args '=' command "`rescue' modifier" arg
   48             | • defs_head f_opt_paren_args '=' command
   49             | • defs_head f_opt_paren_args '=' command "`rescue' modifier" arg
   50             | • backref "operator-assignment" lex_ctxt command_rhs
   54 expr: • command_call
   55     | • expr "`and'" expr
   56     | • expr "`or'" expr
   57     | • "`not'" opt_nl expr
   58     | • '!' command_call
   61     | • arg "=>" @5 @6 p_top_expr_body
   64     | • arg "`in'" @7 @8 p_top_expr_body
   65     | • arg
   67 defn_head: • k_def def_name
   69 defs_head: • k_def singleton dot_or_colon $@9 def_name
   75 command_call: • command
   76             | • block_command
   77 block_command: • block_call
   78              | • block_call call_op2 operation2 command_args
   80 fcall: • operation
   81 command: • fcall command_args
   82        | • fcall command_args cmd_brace_block
   83        | • primary_value call_op operation2 command_args
   84        | • primary_value call_op operation2 command_args cmd_brace_block
   85        | • primary_value "::" operation2 command_args
   86        | • primary_value "::" operation2 command_args cmd_brace_block
   87        | • "`super'" command_args
   88        | • "`yield'" command_args
   89        | • k_return call_args
   90        | • "`break'" call_args
   91        | • "`next'" call_args
   92 mlhs: • mlhs_basic
   93     | • "(" mlhs_inner rparen
   96 mlhs_basic: • mlhs_head
   97           | • mlhs_head mlhs_item
   98           | • mlhs_head "*" mlhs_node
   99           | • mlhs_head "*" mlhs_node ',' mlhs_post
  100           | • mlhs_head "*"
  101           | • mlhs_head "*" ',' mlhs_post
  102           | • "*" mlhs_node
  103           | • "*" mlhs_node ',' mlhs_post
  104           | • "*"
  105           | • "*" ',' mlhs_post
  106 mlhs_item: • mlhs_node
  107          | • "(" mlhs_inner rparen
  108 mlhs_head: • mlhs_item ','
  109          | • mlhs_head mlhs_item ','
  112 mlhs_node: • user_variable
  113          | • keyword_variable
  114          | • primary_value '[' opt_call_args rbracket
  115          | • primary_value call_op "local variable or method"
  116          | • primary_value "::" "local variable or method"
  117          | • primary_value call_op "constant"
  118          | • primary_value "::" "constant"
  119          | • ":: at EXPR_BEG" "constant"
  120          | • backref
  121 lhs: • user_variable
  122    | • keyword_variable
  123    | • primary_value '[' opt_call_args rbracket
  124    | • primary_value call_op "local variable or method"
  125    | • primary_value "::" "local variable or method"
  126    | • primary_value call_op "constant"
  127    | • primary_value "::" "constant"
  128    | • ":: at EXPR_BEG" "constant"
  129    | • backref
  216 arg: • lhs '=' lex_ctxt arg_rhs
  217    | • var_lhs "operator-assignment" lex_ctxt arg_rhs
  218    | • primary_value '[' opt_call_args rbracket "operator-assignment" lex_ctxt arg_rhs
  219    | • primary_value call_op "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  220    | • primary_value call_op "constant" "operator-assignment" lex_ctxt arg_rhs
  221    | • primary_value "::" "local variable or method" "operator-assignment" lex_ctxt arg_rhs
  222    | • primary_value "::" "constant" "operator-assignment" lex_ctxt arg_rhs
  223    | • ":: at EXPR_BEG" "constant" "operator-assignment" lex_ctxt arg_rhs
  224    | • backref "operator-assignment" lex_ctxt arg_rhs
  225    | • arg ".." arg
  226    | • arg "..." arg
  227    | • arg ".."
  228    | • arg "..."
  229    | • "(.." arg
  230    | • "(..." arg
  231    | • arg '+' arg
  232    | • arg '-' arg
  233    | • arg '*' arg
  234    | • arg '/' arg
  235    | • arg '%' arg
  236    | • arg "**" arg
  237    | • tUMINUS_NUM simple_numeric "**" arg
  238    | • "unary+" arg
  239    | • "unary-" arg
  240    | • arg '|' arg
  241    | • arg '^' arg
  242    | • arg '&' arg
  243    | • arg "<=>" arg
  244    | • rel_expr
  245    | • arg "==" arg
  246    | • arg "===" arg
  247    | • arg "!=" arg
  248    | • arg "=~" arg
  249    | • arg "!~" arg
  250    | • '!' arg
  251    | • '~' arg
  252    | • arg "<<" arg
  253    | • arg ">>" arg
  254    | • arg "&&" arg
  255    | • arg "||" arg
  257    | • "`defined?'" opt_nl $@13 arg
  258    | • arg '?' arg opt_nl ':' arg
  259    | • defn_head f_opt_paren_args '=' arg
  260    | • defn_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  261    | • defs_head f_opt_paren_args '=' arg
  262    | • defs_head f_opt_paren_args '=' arg "`rescue' modifier" arg
  263    | • primary
  268 rel_expr: • arg relop arg
  269         | • rel_expr relop arg
  310 primary: • literal
  311        | • strings
  312        | • xstring
  313        | • regexp
  314        | • words
  315        | • qwords
  316        | • symbols
  317        | • qsymbols
  318        | • var_ref
  319        | • backref
  320        | • "method"
  322        | • k_begin $@15 bodystmt k_end
  324        | • "( arg" $@16 rparen
  326        | • "( arg" stmt $@17 rparen
  327        | • "(" compstmt ')'
  328        | • primary_value "::" "constant"
  329        | • ":: at EXPR_BEG" "constant"
  330        | • "[" aref_args ']'
  331        | • "{" assoc_list '}'
  332        | • k_return
  333        | • "`yield'" '(' call_args rparen
  334        | • "`yield'" '(' rparen
  335        | • "`yield'"
  337        | • "`defined?'" opt_nl '(' $@18 expr rparen
  338        | • "`not'" '(' expr rparen
  339        | • "`not'" '(' rparen
  340        | • fcall brace_block
  341        | • method_call
  342        | • method_call brace_block
  343        | • lambda
  344        | • k_if expr_value then compstmt if_tail k_end
  345        | • k_unless expr_value then compstmt opt_else k_end
  346        | • k_while expr_value_do compstmt k_end
  347        | • k_until expr_value_do compstmt k_end
  349        | • k_case expr_value opt_terms @19 case_body k_end
  351        | • k_case opt_terms @20 case_body k_end
  352        | • k_case expr_value opt_terms p_case_body k_end
  353        | • k_for for_var "`in'" expr_value_do compstmt k_end
  355        | • k_class cpath superclass $@21 bodystmt k_end
  357        | • k_class "<<" expr $@22 term bodystmt k_end
  359        | • k_module cpath $@23 bodystmt k_end
  361        | • defn_head f_arglist $@24 bodystmt k_end
  363        | • defs_head f_arglist $@25 bodystmt k_end
  364        | • "`break'"
  365        | • "`next'"
  366        | • "`redo'"
  367        | • "`retry'"
  368 primary_value: • primary
  369 k_begin: • "`begin'"
  370 k_if: • "`if'"
  371 k_unless: • "`unless'"
  372 k_while: • "`while'"
  373 k_until: • "`until'"
  374 k_case: • "`case'"
  375 k_for: • "`for'"
  376 k_class: • "`class'"
  377 k_module: • "`module'"
  378 k_def: • "`def'"
  388 k_return: • "`return'"
  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  458 block_call: • command do_block
  459           | • block_call call_op2 operation2 opt_paren_args
  460           | • block_call call_op2 operation2 opt_paren_args brace_block
  461           | • block_call call_op2 operation2 command_args do_block
  462 method_call: • fcall paren_args
  463            | • primary_value call_op operation2 opt_paren_args
  464            | • primary_value "::" operation2 paren_args
  465            | • primary_value "::" operation3
  466            | • primary_value call_op paren_args
  467            | • primary_value "::" paren_args
  468            | • "`super'" paren_args
  469            | • "`super'"
  470            | • primary_value '[' opt_call_args rbracket
  491 p_case_body: "`in'" @38 @39 p_top_expr then $@40 • compstmt p_cases
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  649 nonlocal_var: • "instance variable"
  650             | • "global variable"
  651             | • "class variable"
  652 user_variable: • "local variable or method"
  653              | • "constant"
  654              | • nonlocal_var
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"
  662 var_ref: • user_variable
  663        | • keyword_variable
  664 var_lhs: • user_variable
  665        | • keyword_variable
  666 backref: • "numbered reference"
  667        | • "back reference"
  754 operation: • "local variable or method"
  755          | • "constant"
  756          | • "method"
  781 none: ε •  ["`end'", "`else'", "`in'", "dummy end", ';', '\n']

    error                       shift, and go to state 4
    "`class'"                   shift, and go to state 5
    "`module'"                  shift, and go to state 6
    "`def'"                     shift, and go to state 7
    "`undef'"                   shift, and go to state 8
    "`begin'"                   shift, and go to state 9
    "`if'"                      shift, and go to state 10
    "`unless'"                  shift, and go to state 11
    "`case'"                    shift, and go to state 12
    "`while'"                   shift, and go to state 13
    "`until'"                   shift, and go to state 14
    "`for'"                     shift, and go to state 15
    "`break'"                   shift, and go to state 16
    "`next'"                    shift, and go to state 17
    "`redo'"                    shift, and go to state 18
    "`retry'"                   shift, and go to state 19
    "`return'"                  shift, and go to state 20
    "`yield'"                   shift, and go to state 21
    "`super'"                   shift, and go to state 22
    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`not'"                     shift, and go to state 27
    "`alias'"                   shift, and go to state 28
    "`defined?'"                shift, and go to state 29
    "`BEGIN'"                   shift, and go to state 262
    "`END'"                     shift, and go to state 31
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 35
    "method"                    shift, and go to state 36
    "global variable"           shift, and go to state 37
    "instance variable"         shift, and go to state 38
    "constant"                  shift, and go to state 39
    "class variable"            shift, and go to state 40
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "numbered reference"        shift, and go to state 46
    "back reference"            shift, and go to state 47
    "unary+"                    shift, and go to state 48
    "unary-"                    shift, and go to state 49
    "(.."                       shift, and go to state 50
    "(..."                      shift, and go to state 51
    ":: at EXPR_BEG"            shift, and go to state 52
    "("                         shift, and go to state 53
    "( arg"                     shift, and go to state 54
    "["                         shift, and go to state 55
    "{"                         shift, and go to state 56
    "*"                         shift, and go to state 57
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    tUMINUS_NUM                 shift, and go to state 67
    '!'                         shift, and go to state 68
    '~'                         shift, and go to state 69

    "`end'"      reduce using rule 781 (none)
    "`else'"     reduce using rule 781 (none)
    "`in'"       reduce using rule 781 (none)
    "dummy end"  reduce using rule 781 (none)
    ';'          reduce using rule 781 (none)
    '\n'         reduce using rule 781 (none)

    compstmt          go to state 1288
    stmts             go to state 265
    stmt_or_begin     go to state 266
    stmt              go to state 267
    command_asgn      go to state 74
    expr              go to state 75
    defn_head         go to state 76
    defs_head         go to state 77
    command_call      go to state 78
    block_command     go to state 79
    fcall             go to state 80
    command           go to state 81
    mlhs              go to state 82
    mlhs_basic        go to state 83
    mlhs_item         go to state 84
    mlhs_head         go to state 85
    mlhs_node         go to state 86
    lhs               go to state 87
    arg               go to state 88
    rel_expr          go to state 89
    primary           go to state 90
    primary_value     go to state 91
    k_begin           go to state 92
    k_if              go to state 93
    k_unless          go to state 94
    k_while           go to state 95
    k_until           go to state 96
    k_case            go to state 97
    k_for             go to state 98
    k_class           go to state 99
    k_module          go to state 100
    k_def             go to state 101
    k_return          go to state 102
    lambda            go to state 103
    block_call        go to state 104
    method_call       go to state 105
    literal           go to state 106
    strings           go to state 107
    string            go to state 108
    string1           go to state 109
    xstring           go to state 110
    regexp            go to state 111
    words             go to state 112
    symbols           go to state 113
    qwords            go to state 114
    qsymbols          go to state 115
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    nonlocal_var      go to state 121
    user_variable     go to state 122
    keyword_variable  go to state 123
    var_ref           go to state 124
    var_lhs           go to state 125
    backref           go to state 126
    operation         go to state 127
    none              go to state 270


State 1267

  495 p_top_expr: p_top_expr_body "`if' modifier" expr_value •

    $default  reduce using rule 495 (p_top_expr)


State 1268

  496 p_top_expr: p_top_expr_body "`unless' modifier" expr_value •

    $default  reduce using rule 496 (p_top_expr)


State 1269

  444 bv_decls: bv_decls ',' • bvar
  445 bvar: • "local variable or method"
  446     | • f_bad_arg
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"

    "local variable or method"  shift, and go to state 1234
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532

    bvar       go to state 1289
    f_bad_arg  go to state 1237


State 1270

  442 opt_bv_decl: opt_nl ';' bv_decls opt_nl •

    $default  reduce using rule 442 (opt_bv_decl)


State 1271

  456 lambda_body: "`do' for lambda" $@31 bodystmt k_end •

    $default  reduce using rule 456 (lambda_body)


State 1272

  632 string_content: tSTRING_DBEG $@44 @45 @46 @47 @48 compstmt "'}'" •

    $default  reduce using rule 632 (string_content)


State 1273

  685 f_args: f_arg ',' f_optarg ',' f_rest_arg ',' f_arg opt_args_tail •

    $default  reduce using rule 685 (f_args)


State 1274

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  415 block_args_tail: • f_block_kwarg ',' f_kwrest opt_f_block_arg
  416                | • f_block_kwarg opt_f_block_arg
  417                | • f_any_kwrest opt_f_block_arg
  418                | • f_block_arg
  419 opt_block_args_tail: ',' • block_args_tail
  422 block_param: f_arg ',' f_block_optarg ',' • f_rest_arg opt_block_args_tail
  423            | f_arg ',' f_block_optarg ',' • f_rest_arg ',' f_arg opt_block_args_tail
  425            | f_arg ',' f_block_optarg ',' • f_arg opt_block_args_tail
  556 p_kwnorest: • kwrest_mark "`nil'"
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  714 f_block_kw: • f_label primary_value
  715           | • f_label
  716 f_block_kwarg: • f_block_kw
  717              | • f_block_kwarg ',' f_block_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  726 f_block_opt: • f_arg_asgn f_eq primary_value
  728 f_block_optarg: f_block_optarg ',' • f_block_opt
  731 restarg_mark: • '*'
  732             | • "*"
  733 f_rest_arg: • restarg_mark "local variable or method"
  734           | • restarg_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "("                         shift, and go to state 536
    "*"                         shift, and go to state 537
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540
    '*'                         shift, and go to state 541

    f_any_kwrest     go to state 1115
    block_args_tail  go to state 1244
    p_kwnorest       go to state 543
    f_bad_arg        go to state 547
    f_norm_arg       go to state 548
    f_arg_asgn       go to state 1119
    f_arg_item       go to state 550
    f_arg            go to state 1290
    f_label          go to state 1121
    f_block_kw       go to state 1122
    f_block_kwarg    go to state 1123
    kwrest_mark      go to state 555
    f_no_kwarg       go to state 556
    f_kwrest         go to state 557
    f_block_opt      go to state 1252
    restarg_mark     go to state 560
    f_rest_arg       go to state 1291
    blkarg_mark      go to state 562
    f_block_arg      go to state 1127


State 1275

  424 block_param: f_arg ',' f_block_optarg opt_block_args_tail •

    $default  reduce using rule 424 (block_param)


State 1276

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  415 block_args_tail: • f_block_kwarg ',' f_kwrest opt_f_block_arg
  416                | • f_block_kwarg opt_f_block_arg
  417                | • f_any_kwrest opt_f_block_arg
  418                | • f_block_arg
  419 opt_block_args_tail: ',' • block_args_tail
  428 block_param: f_arg ',' f_rest_arg ',' • f_arg opt_block_args_tail
  556 p_kwnorest: • kwrest_mark "`nil'"
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  714 f_block_kw: • f_label primary_value
  715           | • f_label
  716 f_block_kwarg: • f_block_kw
  717              | • f_block_kwarg ',' f_block_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "("                         shift, and go to state 536
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540

    f_any_kwrest     go to state 1115
    block_args_tail  go to state 1244
    p_kwnorest       go to state 543
    f_bad_arg        go to state 547
    f_norm_arg       go to state 548
    f_arg_asgn       go to state 884
    f_arg_item       go to state 550
    f_arg            go to state 1292
    f_label          go to state 1121
    f_block_kw       go to state 1122
    f_block_kwarg    go to state 1123
    kwrest_mark      go to state 555
    f_no_kwarg       go to state 556
    f_kwrest         go to state 557
    blkarg_mark      go to state 562
    f_block_arg      go to state 1127


State 1277

  426 block_param: f_arg ',' f_rest_arg opt_block_args_tail •

    $default  reduce using rule 426 (block_param)


State 1278

  754 operation: "local variable or method" •  ['(']
  759 operation3: "local variable or method" •  ["`do'", '.', "&.", "::", '|', '{', '[', ',', ';', '\n']

    '('       reduce using rule 754 (operation)
    $default  reduce using rule 759 (operation3)


State 1279

  328 primary: primary_value "::" "constant" •  ['.', "&.", "::", '|', '[', ',', ';', '\n']
  755 operation: "constant" •  ['(']

    '('       reduce using rule 755 (operation)
    $default  reduce using rule 328 (primary)


State 1280

  415 block_args_tail: f_block_kwarg ',' f_kwrest opt_f_block_arg •

    $default  reduce using rule 415 (block_args_tail)


State 1281

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  415 block_args_tail: • f_block_kwarg ',' f_kwrest opt_f_block_arg
  416                | • f_block_kwarg opt_f_block_arg
  417                | • f_any_kwrest opt_f_block_arg
  418                | • f_block_arg
  419 opt_block_args_tail: ',' • block_args_tail
  556 p_kwnorest: • kwrest_mark "`nil'"
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  710 f_arg: f_arg ',' • f_arg_item
  711 f_label: • "label"
  714 f_block_kw: • f_label primary_value
  715           | • f_label
  716 f_block_kwarg: • f_block_kw
  717              | • f_block_kwarg ',' f_block_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "("                         shift, and go to state 536
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540

    f_any_kwrest     go to state 1115
    block_args_tail  go to state 1244
    p_kwnorest       go to state 543
    f_bad_arg        go to state 547
    f_norm_arg       go to state 548
    f_arg_asgn       go to state 884
    f_arg_item       go to state 875
    f_label          go to state 1121
    f_block_kw       go to state 1122
    f_block_kwarg    go to state 1123
    kwrest_mark      go to state 555
    f_no_kwarg       go to state 556
    f_kwrest         go to state 557
    blkarg_mark      go to state 562
    f_block_arg      go to state 1127


State 1282

  433 block_param: f_block_optarg ',' f_arg opt_block_args_tail •

    $default  reduce using rule 433 (block_param)


State 1283

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  415 block_args_tail: • f_block_kwarg ',' f_kwrest opt_f_block_arg
  416                | • f_block_kwarg opt_f_block_arg
  417                | • f_any_kwrest opt_f_block_arg
  418                | • f_block_arg
  419 opt_block_args_tail: ',' • block_args_tail
  431 block_param: f_block_optarg ',' f_rest_arg ',' • f_arg opt_block_args_tail
  556 p_kwnorest: • kwrest_mark "`nil'"
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  714 f_block_kw: • f_label primary_value
  715           | • f_label
  716 f_block_kwarg: • f_block_kw
  717              | • f_block_kwarg ',' f_block_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "("                         shift, and go to state 536
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540

    f_any_kwrest     go to state 1115
    block_args_tail  go to state 1244
    p_kwnorest       go to state 543
    f_bad_arg        go to state 547
    f_norm_arg       go to state 548
    f_arg_asgn       go to state 884
    f_arg_item       go to state 550
    f_arg            go to state 1293
    f_label          go to state 1121
    f_block_kw       go to state 1122
    f_block_kwarg    go to state 1123
    kwrest_mark      go to state 555
    f_no_kwarg       go to state 556
    f_kwrest         go to state 557
    blkarg_mark      go to state 562
    f_block_arg      go to state 1127


State 1284

  430 block_param: f_block_optarg ',' f_rest_arg opt_block_args_tail •

    $default  reduce using rule 430 (block_param)


State 1285

  435 block_param: f_rest_arg ',' f_arg opt_block_args_tail •

    $default  reduce using rule 435 (block_param)


State 1286

  451 lambda: • "->" @27 @28 @29 f_larglist $@30 lambda_body
  503 p_expr: • p_as
  504 p_as: • p_expr "=>" p_variable
  505     | • p_alt
  506 p_alt: • p_alt '|' p_expr_basic
  507      | • p_expr_basic
  510 p_expr_basic: • p_value
  511             | • p_variable
  512             | • p_const p_lparen p_args rparen
  513             | • p_const p_lparen p_find rparen
  514             | • p_const p_lparen p_kwargs rparen
  515             | • p_const '(' rparen
  516             | • p_const p_lbracket p_args rbracket
  517             | • p_const p_lbracket p_find rbracket
  518             | • p_const p_lbracket p_kwargs rbracket
  519             | • p_const '[' rbracket
  520             | • "[" p_args rbracket
  521             | • "[" p_find rbracket
  522             | • "[" rbracket
  524             | • "{" @41 p_kwargs rbrace
  525             | • "{" rbrace
  527             | • "(" @42 p_expr rparen
  542 p_args_post: p_args_post ',' • p_arg
  543 p_arg: • p_expr
  559 p_value: • p_primitive
  560        | • p_primitive ".." p_primitive
  561        | • p_primitive "..." p_primitive
  562        | • p_primitive ".."
  563        | • p_primitive "..."
  564        | • p_var_ref
  565        | • p_expr_ref
  566        | • p_const
  567        | • "(.." p_primitive
  568        | • "(..." p_primitive
  569 p_primitive: • literal
  570            | • strings
  571            | • xstring
  572            | • regexp
  573            | • words
  574            | • qwords
  575            | • symbols
  576            | • qsymbols
  577            | • keyword_variable
  578            | • lambda
  579 p_variable: • "local variable or method"
  580 p_var_ref: • '^' "local variable or method"
  581          | • '^' nonlocal_var
  582 p_expr_ref: • '^' "(" expr_value ')'
  583 p_const: • ":: at EXPR_BEG" cname
  584        | • p_const "::" cname
  585        | • "constant"
  595 literal: • numeric
  596        | • symbol
  597 strings: • string
  598 string: • "char literal"
  599       | • string1
  600       | • string string1
  601 string1: • "string literal" string_contents "terminator"
  602 xstring: • "backtick literal" xstring_contents "terminator"
  603 regexp: • "regexp literal" regexp_contents tREGEXP_END
  604 words: • "word list" ' ' word_list "terminator"
  609 symbols: • "symbol list" ' ' symbol_list "terminator"
  612 qwords: • "verbatim word list" ' ' qword_list "terminator"
  613 qsymbols: • "verbatim symbol list" ' ' qsym_list "terminator"
  637 symbol: • ssym
  638       | • dsym
  639 ssym: • "symbol literal" sym
  642 dsym: • "symbol literal" string_contents "terminator"
  643 numeric: • simple_numeric
  644        | • tUMINUS_NUM simple_numeric
  645 simple_numeric: • "integer literal"
  646               | • "float literal"
  647               | • "rational literal"
  648               | • "imaginary literal"
  655 keyword_variable: • "`nil'"
  656                 | • "`self'"
  657                 | • "`true'"
  658                 | • "`false'"
  659                 | • "`__FILE__'"
  660                 | • "`__LINE__'"
  661                 | • "`__ENCODING__'"

    "`self'"                    shift, and go to state 23
    "`nil'"                     shift, and go to state 24
    "`true'"                    shift, and go to state 25
    "`false'"                   shift, and go to state 26
    "`__LINE__'"                shift, and go to state 32
    "`__FILE__'"                shift, and go to state 33
    "`__ENCODING__'"            shift, and go to state 34
    "local variable or method"  shift, and go to state 905
    "constant"                  shift, and go to state 906
    "integer literal"           shift, and go to state 41
    "float literal"             shift, and go to state 42
    "rational literal"          shift, and go to state 43
    "imaginary literal"         shift, and go to state 44
    "char literal"              shift, and go to state 45
    "(.."                       shift, and go to state 908
    "(..."                      shift, and go to state 909
    ":: at EXPR_BEG"            shift, and go to state 910
    "("                         shift, and go to state 911
    "["                         shift, and go to state 912
    "{"                         shift, and go to state 913
    "->"                        shift, and go to state 58
    "symbol literal"            shift, and go to state 59
    "string literal"            shift, and go to state 60
    "backtick literal"          shift, and go to state 61
    "regexp literal"            shift, and go to state 62
    "word list"                 shift, and go to state 63
    "verbatim word list"        shift, and go to state 64
    "symbol list"               shift, and go to state 65
    "verbatim symbol list"      shift, and go to state 66
    '^'                         shift, and go to state 916
    tUMINUS_NUM                 shift, and go to state 283

    lambda            go to state 917
    p_expr            go to state 1134
    p_as              go to state 920
    p_alt             go to state 921
    p_expr_basic      go to state 922
    p_arg             go to state 1258
    p_value           go to state 933
    p_primitive       go to state 934
    p_variable        go to state 935
    p_var_ref         go to state 936
    p_expr_ref        go to state 937
    p_const           go to state 938
    literal           go to state 939
    strings           go to state 940
    string            go to state 108
    string1           go to state 109
    xstring           go to state 941
    regexp            go to state 942
    words             go to state 943
    symbols           go to state 944
    qwords            go to state 945
    qsymbols          go to state 946
    symbol            go to state 116
    ssym              go to state 117
    dsym              go to state 118
    numeric           go to state 119
    simple_numeric    go to state 120
    keyword_variable  go to state 947


State 1287

  123 lhs: primary_value '[' opt_call_args rbracket •  ["`then'", ';', '\n']
  470 method_call: primary_value '[' opt_call_args rbracket •  ["`do'", '.', "&.", "::", '{', '[']

    "`then'"  reduce using rule 123 (lhs)
    ';'       reduce using rule 123 (lhs)
    '\n'      reduce using rule 123 (lhs)
    $default  reduce using rule 470 (method_call)


State 1288

  384 k_else: • "`else'"
  396 opt_else: • none
  397         | • k_else compstmt
  491 p_case_body: • "`in'" @38 @39 p_top_expr then $@40 compstmt p_cases
  491            | "`in'" @38 @39 p_top_expr then $@40 compstmt • p_cases
  492 p_cases: • opt_else
  493        | • p_case_body
  781 none: ε •  ["`end'", "dummy end"]

    "`else'"  shift, and go to state 964
    "`in'"    shift, and go to state 807

    $default  reduce using rule 781 (none)

    k_else       go to state 970
    opt_else     go to state 1294
    p_case_body  go to state 1295
    p_cases      go to state 1296
    none         go to state 974


State 1289

  444 bv_decls: bv_decls ',' bvar •

    $default  reduce using rule 444 (bv_decls)


State 1290

  419 opt_block_args_tail: • ',' block_args_tail
  420                    | ε •  ['|', ';', '\n']
  425 block_param: f_arg ',' f_block_optarg ',' f_arg • opt_block_args_tail
  710 f_arg: f_arg • ',' f_arg_item

    ','  shift, and go to state 1281

    $default  reduce using rule 420 (opt_block_args_tail)

    opt_block_args_tail  go to state 1297


State 1291

  419 opt_block_args_tail: • ',' block_args_tail
  420                    | ε •  ['|', ';', '\n']
  422 block_param: f_arg ',' f_block_optarg ',' f_rest_arg • opt_block_args_tail
  423            | f_arg ',' f_block_optarg ',' f_rest_arg • ',' f_arg opt_block_args_tail

    ','  shift, and go to state 1298

    $default  reduce using rule 420 (opt_block_args_tail)

    opt_block_args_tail  go to state 1299


State 1292

  419 opt_block_args_tail: • ',' block_args_tail
  420                    | ε •  ['|', ';', '\n']
  428 block_param: f_arg ',' f_rest_arg ',' f_arg • opt_block_args_tail
  710 f_arg: f_arg • ',' f_arg_item

    ','  shift, and go to state 1281

    $default  reduce using rule 420 (opt_block_args_tail)

    opt_block_args_tail  go to state 1300


State 1293

  419 opt_block_args_tail: • ',' block_args_tail
  420                    | ε •  ['|', ';', '\n']
  431 block_param: f_block_optarg ',' f_rest_arg ',' f_arg • opt_block_args_tail
  710 f_arg: f_arg • ',' f_arg_item

    ','  shift, and go to state 1281

    $default  reduce using rule 420 (opt_block_args_tail)

    opt_block_args_tail  go to state 1301


State 1294

  492 p_cases: opt_else •

    $default  reduce using rule 492 (p_cases)


State 1295

  493 p_cases: p_case_body •

    $default  reduce using rule 493 (p_cases)


State 1296

  491 p_case_body: "`in'" @38 @39 p_top_expr then $@40 compstmt p_cases •

    $default  reduce using rule 491 (p_case_body)


State 1297

  425 block_param: f_arg ',' f_block_optarg ',' f_arg opt_block_args_tail •

    $default  reduce using rule 425 (block_param)


State 1298

  411 f_any_kwrest: • f_kwrest
  412             | • f_no_kwarg
  415 block_args_tail: • f_block_kwarg ',' f_kwrest opt_f_block_arg
  416                | • f_block_kwarg opt_f_block_arg
  417                | • f_any_kwrest opt_f_block_arg
  418                | • f_block_arg
  419 opt_block_args_tail: ',' • block_args_tail
  423 block_param: f_arg ',' f_block_optarg ',' f_rest_arg ',' • f_arg opt_block_args_tail
  556 p_kwnorest: • kwrest_mark "`nil'"
  700 f_bad_arg: • "constant"
  701          | • "instance variable"
  702          | • "global variable"
  703          | • "class variable"
  704 f_norm_arg: • f_bad_arg
  705           | • "local variable or method"
  706 f_arg_asgn: • f_norm_arg
  707 f_arg_item: • f_arg_asgn
  708           | • "(" f_margs rparen
  709 f_arg: • f_arg_item
  710      | • f_arg ',' f_arg_item
  711 f_label: • "label"
  714 f_block_kw: • f_label primary_value
  715           | • f_label
  716 f_block_kwarg: • f_block_kw
  717              | • f_block_kwarg ',' f_block_kw
  720 kwrest_mark: • "**"
  721            | • "**arg"
  722 f_no_kwarg: • p_kwnorest
  723 f_kwrest: • kwrest_mark "local variable or method"
  724         | • kwrest_mark
  735 blkarg_mark: • '&'
  736            | • "&"
  737 f_block_arg: • blkarg_mark "local variable or method"
  738            | • blkarg_mark

    "local variable or method"  shift, and go to state 528
    "global variable"           shift, and go to state 529
    "instance variable"         shift, and go to state 530
    "constant"                  shift, and go to state 531
    "class variable"            shift, and go to state 532
    "label"                     shift, and go to state 533
    "**"                        shift, and go to state 534
    "("                         shift, and go to state 536
    "**arg"                     shift, and go to state 538
    "&"                         shift, and go to state 539
    '&'                         shift, and go to state 540

    f_any_kwrest     go to state 1115
    block_args_tail  go to state 1244
    p_kwnorest       go to state 543
    f_bad_arg        go to state 547
    f_norm_arg       go to state 548
    f_arg_asgn       go to state 884
    f_arg_item       go to state 550
    f_arg            go to state 1302
    f_label          go to state 1121
    f_block_kw       go to state 1122
    f_block_kwarg    go to state 1123
    kwrest_mark      go to state 555
    f_no_kwarg       go to state 556
    f_kwrest         go to state 557
    blkarg_mark      go to state 562
    f_block_arg      go to state 1127


State 1299

  422 block_param: f_arg ',' f_block_optarg ',' f_rest_arg opt_block_args_tail •

    $default  reduce using rule 422 (block_param)


State 1300

  428 block_param: f_arg ',' f_rest_arg ',' f_arg opt_block_args_tail •

    $default  reduce using rule 428 (block_param)


State 1301

  431 block_param: f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail •

    $default  reduce using rule 431 (block_param)


State 1302

  419 opt_block_args_tail: • ',' block_args_tail
  420                    | ε •  ['|', ';', '\n']
  423 block_param: f_arg ',' f_block_optarg ',' f_rest_arg ',' f_arg • opt_block_args_tail
  710 f_arg: f_arg • ',' f_arg_item

    ','  shift, and go to state 1281

    $default  reduce using rule 420 (opt_block_args_tail)

    opt_block_args_tail  go to state 1303


State 1303

  423 block_param: f_arg ',' f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail •

    $default  reduce using rule 423 (block_param)
